class POST_AI {
    constructor() {
        this.root = "https://summary.tianli0.top";
        this.aiTalkMode = false;
        this.aiPostExplanation = '';
        this.config = GLOBAL_CONFIG.post_ai;
        this.scoGPTIsRunning = false;
        console.log('%c TianliGPT %c 文章摘要 %c https://postchat.zhheo.com', 
                    'background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff', 
                    'background:#ff9a9a ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff', 
                    'background:unset ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff');
    }

    init() {
        const explanationElement = document.querySelector(".ai-explanation");
        if (!explanationElement) return;

        this.scoGPTIsRunning = false;
        this.aiPostExplanation = PAGE_CONFIG.ai_text || '';

        if (!this.aiPostExplanation) {
            this.generate();
        } else {
            this.aiShowAnimation(Promise.resolve(this.aiPostExplanation));
        }
        this.AIEngine();
    }

    getTitleAndContent() {
        const articleContainer = document.querySelector(".article-container");
        const title = document.title;
        const paragraphs = articleContainer.getElementsByTagName("p");
        const headers = articleContainer.querySelectorAll("h1, h2, h3, h4, h5");

        return (title + " " + [...headers, ...paragraphs]
            .map(element => element.innerText.replace(/https?:\/\/[^\s]+/g, ""))
            .join(" ")).slice(0, 1000);
    }

    async generate() {
        const title = document.title;
        const content = this.getTitleAndContent();
        const key = this.config.key;
        this.aiShowAnimation(this.fetch(title, content, key));
    }

    async fetch(title, content, key) {
        const url = `${this.root}/?content=${encodeURIComponent(content)}&title=${title}&key=${encodeURIComponent(key)}&url=${encodeURIComponent(window.location.href)}`;
        try {
            const response = await fetch(url);
            const data = await response.json();
            if (response.ok) {
                this.aiPostExplanation = data.summary;
                return data.summary;
            } else {
                console.error("Request failed:", data.err_msg);
                return data.err_msg;
            }
        } catch (error) {
            console.error("Fetch error:", error);
            return "Error fetching data";
        }
    }

    aiShowAnimation(promise, onComplete = false, delay = 0) {
        const explanationElement = document.querySelector(".ai-explanation");
        const tagElement = document.querySelector(".ai-tag");
        if (!explanationElement || this.scoGPTIsRunning) return;

        this.scoGPTIsRunning = true;
        this.cleanSuggestions();
        tagElement.classList.add("loadingAI");
        explanationElement.style.display = "block";
        explanationElement.innerHTML = '生成中...<span class="blinking-cursor"></span>';

        setTimeout(() => {
            let startTime, update, currentIndex = 0, isIntersecting = true, isInitial = true;
            const observer = new IntersectionObserver(entries => {
                isIntersecting = entries[0].isIntersecting;
                if (isIntersecting) requestAnimationFrame(update);
            }, { threshold: 0 });

            promise.then(result => {
                startTime = performance.now();
                update = () => {
                    if (currentIndex < result.length && isIntersecting) {
                        const now = performance.now();
                        const timeElapsed = now - startTime;
                        const char = result.slice(currentIndex, currentIndex + 1);
                        const isPunctuation = /[，。！、？,.!?]/.test(char);
                        const isAlphaNumeric = /[a-zA-Z0-9]/.test(char);
                        const delay = isPunctuation ? 100 * Math.random() + 100 : (isAlphaNumeric ? 10 : 25);

                        if (timeElapsed >= delay) {
                            explanationElement.innerText = result.slice(0, currentIndex + 1);
                            startTime = now;
                            currentIndex++;
                            if (currentIndex < result.length) {
                                explanationElement.innerHTML = result.slice(0, currentIndex) + '<span class="blinking-cursor"></span>';
                            } else {
                                explanationElement.innerHTML = result;
                                explanationElement.style.display = "block";
                                this.scoGPTIsRunning = false;
                                tagElement.classList.remove("loadingAI");
                                observer.disconnect();
                                if (onComplete) this.createSuggestions();
                            }
                        }
                        if (isIntersecting) requestAnimationFrame(update);
                    }
                };
                if (isIntersecting && isInitial) {
                    requestAnimationFrame(update);
                    isInitial = false;
                }
                observer.observe(explanationElement);
            }).catch(error => {
                console.error("检索信息失败：", error);
                explanationElement.innerHTML = "检索信息失败";
                explanationElement.style.display = "block";
                this.scoGPTIsRunning = false;
                tagElement.classList.remove("loadingAI");
                observer.disconnect();
            });
        }, delay);
    }

    AIEngine() {
        const tagElement = document.querySelector(".ai-tag");
        if (tagElement) {
            tagElement.addEventListener("click", () => {
                if (!this.scoGPTIsRunning) {
                    this.aiTalkMode = true;
                    this.aiShowAnimation(Promise.resolve(this.config.talk), true);
                }
            });
        }
    }

    cleanSuggestions() {
        const suggestionsElement = document.querySelector(".ai-suggestions");
        if (suggestionsElement) {
            suggestionsElement.innerHTML = "";
        } else {
            console.error("没有这个元素：'ai-suggestions'");
        }
    }

    createSuggestions() {
        if (this.aiTalkMode) {
            this.cleanSuggestions();
            this.createSuggestionItemWithAction("这篇文章讲了什么？", () => {
                if (this.aiPostExplanation === "") {
                    setTimeout(() => {
                        this.generate();
                    }, 3000);
                } else {
                    setTimeout(() => {
                        this.aiShowAnimation(Promise.resolve(this.aiPostExplanation), true);
                    }, 3000);
                }
            });
            if (this.config.randomPost) {
                this.createSuggestionItemWithAction("带我去看看其他文章", () => toRandomPost());
            }
            this.aiTalkMode = true;
        }
    }

    createSuggestionItemWithAction(text, action) {
        const suggestions = document.querySelector(".ai-suggestions");
        if (!suggestions) {
            console.error("无法找到具有class为ai-suggestions的元素");
            return;
        }
        const item = document.createElement("div");
        item.classList.add("ai-suggestions-item");
        item.textContent = text;
        item.addEventListener("click", action);
        suggestions.appendChild(item);
    }
}

const ai = new POST_AI();