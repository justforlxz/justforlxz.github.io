<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小竹&#39;s blog</title>
  
  <subtitle>永远不要停止思考</subtitle>
  <link href="https://blog.justforlxz.com/atom.xml" rel="self"/>
  
  <link href="https://blog.justforlxz.com/"/>
  <updated>2023-04-11T05:16:17.975Z</updated>
  <id>https://blog.justforlxz.com/</id>
  
  <author>
    <name>小竹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to solve parallels desktop linux usb problem</title>
    <link href="https://blog.justforlxz.com/2023/04/11/How-to-solve-parallels-desktop-linux-usb-problem/"/>
    <id>https://blog.justforlxz.com/2023/04/11/How-to-solve-parallels-desktop-linux-usb-problem/</id>
    <published>2023-04-11T04:59:39.000Z</published>
    <updated>2023-04-11T05:16:17.975Z</updated>
    
    <content type="html"><![CDATA[<p>I am runing a linux virtual machine macos using parallels desktop. One day when I booted normally, I got a usb error and couldn’t use the keyboard and mouse in virtual machine.</p><p>An error messages like this is output on the screen.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">usb 3-1: can&#x27;t set config #1, error -62<br>xhci_hcd Error while assigning device slot ID: Command Aborted.<br>xhci_hcd Max number of devices this xHCI host supports is 32.<br>usb usb3-port2: couldn&#x27;t allocate usb_device<br></code></pre></td></tr></table></figure><img src="/2023/04/11/How-to-solve-parallels-desktop-linux-usb-problem/tg_image_2922023940.jpeg" class="" title="error.jpeg"><p>Finally I found a solution on the parallels desktop forum.</p><ol><li>Start your virtual machine.</li><li>Press e to edit the grub menu during the boot phase, passing a new parameter to the kernel.</li><li>Append <code>xhci_hcd.quirks=0x40</code> after quiet</li><li>F10 booting the kernel</li><li>After entering the system, open the terminal and edit the <code>/etc/default/grub</code> file</li><li>Replace that line with the following line:</li></ol><blockquote><p>GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet xhci_hcd.quirks&#x3D;0x40”</p></blockquote><ol start="7"><li>Next, execute the following command:</li></ol><blockquote><p>sudo update-grub</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I am runing a linux virtual machine macos using parallels desktop. One day when I booted normally, I got a usb error and couldn’t use the</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="parallels desktop" scheme="https://blog.justforlxz.com/tags/parallels-desktop/"/>
    
  </entry>
  
  <entry>
    <title>How to remove all Terminating pods</title>
    <link href="https://blog.justforlxz.com/2023/03/15/How-to-remove-all-Terminating-pods/"/>
    <id>https://blog.justforlxz.com/2023/03/15/How-to-remove-all-Terminating-pods/</id>
    <published>2023-03-15T06:47:59.000Z</published>
    <updated>2023-04-11T05:16:49.310Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes all pods of k8s will be in Terminating state, use this command to clean up all pods.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get pods --all-namespaces | grep Terminating | while read line; do<br>  pod_name=$(echo $line | awk &#x27;&#123;print $2&#125;&#x27; ) \<br>  name_space=$(echo $line | awk &#x27;&#123;print $1&#125;&#x27; ); \<br>  kubectl delete pods $pod_name -n $name_space --grace-period=0 --force<br>done<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes all pods of k8s will be in Terminating state, use this command to clean up all pods.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="k8s" scheme="https://blog.justforlxz.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>solved duplicate hostname or contents</title>
    <link href="https://blog.justforlxz.com/2023/02/01/solved-duplicate-hostname-or-contents/"/>
    <id>https://blog.justforlxz.com/2023/02/01/solved-duplicate-hostname-or-contents/</id>
    <published>2023-02-01T06:48:21.000Z</published>
    <updated>2023-02-01T07:02:12.549Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/01/solved-duplicate-hostname-or-contents/tg_image_1176326230.jpeg" class=""><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Feb 01 05:40:37 fv-az406-375 k3s[5352]: time=&quot;2023-02-01T05:40:37Z&quot; level=info msg=&quot;Waiting to retrieve agent configuration; server is not ready: Node password rejected, duplicate hostname or contents of &#x27;/etc/rancher/node/password&#x27; may not match server node-passwd entry, try enabling a unique node name with the --with-node-id flag&quot;<br></code></pre></td></tr></table></figure><p>When you join a cluster, you are reminded that it already exists, but the same node does not exist in the cluster.</p><p>you can do this.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl -n kube-<span class="hljs-keyword">system</span> <span class="hljs-keyword">delete</span> secrets &lt;node <span class="hljs-type">name</span>&gt;.node-<span class="hljs-keyword">password</span>.k3s<br></code></pre></td></tr></table></figure><p>example:</p><p>first, we list all node to check, if the node exists, we should not continue the operation, we need to modify the name of the node that is joining the cluster to avoid conflicts with existing ones.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get node<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">rpi4                    Ready    control-plane,master   2d3h   v1.25.6+k3s1<br></code></pre></td></tr></table></figure><p>Now the homenas-vm node does not exist. But the logs tell us that the cluster already has the password, it doesn’t match the current one.</p><p>Then we need to manually delete the old password in the cluster and let the new node join.</p><p>you can use this command to show all secrets, the node password in here.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl <span class="hljs-built_in">get</span> -n kube-<span class="hljs-keyword">system</span> secrets<br></code></pre></td></tr></table></figure><p>then you will see all secrets.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">NAME                                      TYPE                 DATA   AGE<br>company-laptop<span class="hljs-selector-class">.node-password</span><span class="hljs-selector-class">.k3s</span>          Opaque               <span class="hljs-number">1</span>      <span class="hljs-number">2</span>d1h<br>company-pc<span class="hljs-selector-class">.node-password</span><span class="hljs-selector-class">.k3s</span>              Opaque               <span class="hljs-number">1</span>      <span class="hljs-number">2</span>d2h<br>homenas-vm<span class="hljs-selector-class">.node-password</span><span class="hljs-selector-class">.k3s</span>              Opaque               <span class="hljs-number">1</span>      <span class="hljs-number">50</span>m<br>k3s-serving                               kubernetes.io/tls    <span class="hljs-number">2</span>      <span class="hljs-number">2</span>d3h<br>rpi4<span class="hljs-selector-class">.node-password</span><span class="hljs-selector-class">.k3s</span>                    Opaque               <span class="hljs-number">1</span>      <span class="hljs-number">2</span>d3h<br>sh<span class="hljs-selector-class">.helm</span><span class="hljs-selector-class">.release</span><span class="hljs-selector-class">.v1</span><span class="hljs-selector-class">.traefik-crd</span><span class="hljs-selector-class">.v1</span>         helm.sh/release<span class="hljs-selector-class">.v1</span>   <span class="hljs-number">1</span>      <span class="hljs-number">2</span>d3h<br>sh<span class="hljs-selector-class">.helm</span><span class="hljs-selector-class">.release</span><span class="hljs-selector-class">.v1</span><span class="hljs-selector-class">.traefik</span><span class="hljs-selector-class">.v1</span>             helm.sh/release<span class="hljs-selector-class">.v1</span>   <span class="hljs-number">1</span>      <span class="hljs-number">2</span>d3h<br></code></pre></td></tr></table></figure><p>if the homenas-vm is invalid, we need to delete it manually.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl -n kube-<span class="hljs-keyword">system</span> <span class="hljs-keyword">delete</span> secrets homenas-vm.node-<span class="hljs-keyword">password</span>.k3s<br></code></pre></td></tr></table></figure><p>it’s done!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2023/02/01/solved-duplicate-hostname-or-contents/tg_image_1176326230.jpeg&quot; class=&quot;&quot;&gt;

&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>how to use nvim dap to debug cpp</title>
    <link href="https://blog.justforlxz.com/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/"/>
    <id>https://blog.justforlxz.com/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/</id>
    <published>2022-12-08T02:16:45.000Z</published>
    <updated>2023-04-11T05:17:20.678Z</updated>
    
    <content type="html"><![CDATA[<p>在之前我已经分享过了一份简单的 nvim 配置，它已经实现了编程所需的智能提示，语法高亮，代码跳转等功能，今天我打算整一下 nvim 的调试框架 dap。</p><p>dap 是一个框架，客户端负责在 nvim 上显示各种调试信息，比如显示断点、调用栈、对象内存信息等，服务端则提供客户端所需的功能，服务端通常是一个调试器，或者是调试器包装。</p><p>本篇会用到 Mason 这个插件去安装 dap 的服务端，本篇不会展开 Mason，将来有机会详细说一下。</p><p>首先先看几张正常工作的图:</p><center><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3574429301.jpeg" class=""><p>运行界面</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3358891712.jpeg" class=""><p>查看变量信息</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3913027219.jpeg" class=""><p>快捷键</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_1568131740.jpeg" class="" title="call stacks"><p>函数调用栈</p></center><h2 id="安装-dap"><a href="#安装-dap" class="headerlink" title="安装 dap"></a>安装 dap</h2><p>在 Mason 的安装列表中添加上 codelldb，codelldb 是 vscode 用的调试服务端，负责给 vscode 提供调试信息，有了这个后端，我们就可以方便的实现和 vscode 相同的调试功能。</p><h2 id="配置-dap"><a href="#配置-dap" class="headerlink" title="配置 dap"></a>配置 dap</h2><p>在 plugins 目录下新建 <code>_dap.lua</code> 文件。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-string">&quot;mfussenegger/nvim-dap&quot;</span>,<br>  opt = <span class="hljs-literal">true</span>,<br>  <span class="hljs-built_in">module</span> = &#123; <span class="hljs-string">&quot;dap&quot;</span> &#125;,<br>  requires = &#123;<br>    &#123;<br>      <span class="hljs-string">&quot;theHamsta/nvim-dap-virtual-text&quot;</span>,<br>      <span class="hljs-built_in">module</span> = &#123; <span class="hljs-string">&quot;nvim-dap-virtual-text&quot;</span> &#125;,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;rcarriga/nvim-dap-ui&quot;</span>,<br>      <span class="hljs-built_in">module</span> = &#123; <span class="hljs-string">&quot;dapui&quot;</span> &#125;,<br>    &#125;,<br>    <span class="hljs-string">&quot;nvim-telescope/telescope-dap.nvim&quot;</span>,<br>    &#123;<br>      <span class="hljs-string">&quot;jbyuki/one-small-step-for-vimkind&quot;</span>,<br>      <span class="hljs-built_in">module</span> = <span class="hljs-string">&quot;osv&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>    <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;config.dap&quot;</span>).setup()<br>  <span class="hljs-keyword">end</span>,<br>  disable = <span class="hljs-literal">false</span>,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>有些人会在 packer 里用 use 安装，把 return 改成 use 就可以了。</p></blockquote><p>packer 的代码已经写好了，现在写 config 函数，在我的例子中，我把文件放在了 <code>lua/config/dap/</code> 目录下，因为要配置不同的语言，这样会方便管理一些。</p><p>首先要先在 dap 目录下新建一个 init.lua，这里是模块入口，初始化的工作从这里开始。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> M = &#123;&#125;<br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configure</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configure_exts</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configure_debuggers</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.setup</span><span class="hljs-params">()</span></span><br>configure() <span class="hljs-comment">-- Configuration</span><br>configure_exts() <span class="hljs-comment">-- Extensions</span><br>configure_debuggers() <span class="hljs-comment">-- Debugger</span><br><span class="hljs-keyword">end</span><br><br>configure_debuggers()<br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><p>在 <code>_dap.lua</code> 中调用了 <code>require(&quot;config.dap&quot;).setup()</code>，这个 setup 函数就是 <code>config/dap/init.lua</code> 中的 <code>M.setup()</code> 函数。</p><p>目前只是写了一个壳子，现在让我们正式配置它吧。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>在 nvim 中进行调试，界面显然还是在终端里的，所以我们要使用快捷键进行一些操作，比如标记断点、单步进入、跳出等。</p><p>在 <code>config/dap/keymaps.lua</code> 中进行快捷键的配置。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> M = &#123;&#125;<br><br><span class="hljs-keyword">local</span> whichkey = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;which-key&quot;</span><br><span class="hljs-comment">-- local legendary = require &quot;legendary&quot;</span><br><br><span class="hljs-comment">-- local function keymap(lhs, rhs, desc)</span><br><span class="hljs-comment">--   vim.keymap.set(&quot;n&quot;, lhs, rhs, &#123; silent = true, desc = desc &#125;)</span><br><span class="hljs-comment">-- end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.setup</span><span class="hljs-params">()</span></span><br>  <span class="hljs-keyword">local</span> keymap = &#123;<br>    d = &#123;<br>      name = <span class="hljs-string">&quot;DAP&quot;</span>,<br>      R = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.run_to_cursor()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Run to Cursor&quot;</span> &#125;,<br>      E = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.eval(vim.fn.input &#x27;[Expression] &gt; &#x27;)&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Evaluate Input&quot;</span> &#125;,<br>      C = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.set_breakpoint(vim.fn.input &#x27;[Condition] &gt; &#x27;)&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Conditional Breakpoint&quot;</span> &#125;,<br>      U = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.toggle()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Toggle UI&quot;</span> &#125;,<br>      b = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_back()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Step Back&quot;</span> &#125;,<br>      c = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.continue()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Continue&quot;</span> &#125;,<br>      d = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.disconnect()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Disconnect&quot;</span> &#125;,<br>      e = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.eval()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Evaluate&quot;</span> &#125;,<br>      g = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.session()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Get Session&quot;</span> &#125;,<br>      h = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap.ui.widgets&#x27;.hover()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Hover Variables&quot;</span> &#125;,<br>      S = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap.ui.widgets&#x27;.scopes()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Scopes&quot;</span> &#125;,<br>      i = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_into()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Step Into&quot;</span> &#125;,<br>      o = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_over()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Step Over&quot;</span> &#125;,<br>      p = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.pause.toggle()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Pause&quot;</span> &#125;,<br>      q = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.close()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Quit&quot;</span> &#125;,<br>      r = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.repl.toggle()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Toggle Repl&quot;</span> &#125;,<br>      s = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.continue()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Start&quot;</span> &#125;,<br>      t = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.toggle_breakpoint()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Toggle Breakpoint&quot;</span> &#125;,<br>      x = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.terminate()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Terminate&quot;</span> &#125;,<br>      u = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_out()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Step Out&quot;</span> &#125;,<br>    &#125;,<br>  &#125;<br>  <span class="hljs-keyword">local</span> opts = &#123;<br>    mode = <span class="hljs-string">&quot;n&quot;</span>,<br>    prefix = <span class="hljs-string">&quot;&lt;leader&gt;&quot;</span>,<br>    buffer = <span class="hljs-literal">nil</span>,<br>    silent = <span class="hljs-literal">true</span>,<br>    noremap = <span class="hljs-literal">true</span>,<br>    nowait = <span class="hljs-literal">false</span>,<br>  &#125;<br>  whichkey.register(keymap, opts)<br>  <span class="hljs-comment">--- require(&quot;legendary.integrations.which-key&quot;).bind_whichkey(keymap, opts, false)</span><br><br>  <span class="hljs-keyword">local</span> keymap_v = &#123;<br>    d = &#123;<br>      name = <span class="hljs-string">&quot;Debug&quot;</span>,<br>      e = &#123; <span class="hljs-string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.eval()&lt;cr&gt;&quot;</span>, <span class="hljs-string">&quot;Evaluate&quot;</span> &#125;,<br>    &#125;,<br>  &#125;<br>  opts = &#123;<br>    mode = <span class="hljs-string">&quot;v&quot;</span>,<br>    prefix = <span class="hljs-string">&quot;&lt;leader&gt;&quot;</span>,<br>    buffer = <span class="hljs-literal">nil</span>,<br>    silent = <span class="hljs-literal">true</span>,<br>    noremap = <span class="hljs-literal">true</span>,<br>    nowait = <span class="hljs-literal">false</span>,<br>  &#125;<br>  whichkey.register(keymap_v, opts)<br>  <span class="hljs-comment">--- require(&quot;legendary.integrations.which-key&quot;).bind_whichkey(keymap_v, opts, false)</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><p>在这里我将快捷键绑定在了 <code>&lt;leader&gt; d</code> 上面。</p><p>现在返回到 <code>init.lua</code> 中，在 <code>setup</code> 函数中调用 keymaps。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.setup</span><span class="hljs-params">()</span></span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;config.dap.keymaps&quot;</span>).setup() <span class="hljs-comment">-- Keymaps</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="dapui"><a href="#dapui" class="headerlink" title="dapui"></a>dapui</h3><p>dapui 是一个美化 dap 界面的插件，通常大家都会配置的吧！</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configure_exts</span><span class="hljs-params">()</span></span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nvim-dap-virtual-text&quot;</span>).setup(&#123;<br>commented = <span class="hljs-literal">true</span>,<br>&#125;)<br><br><span class="hljs-keyword">local</span> dap, dapui = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dap&quot;</span>), <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dapui&quot;</span>)<br>dapui.setup(&#123;<br>expand_lines = <span class="hljs-literal">true</span>,<br>icons = &#123; expanded = <span class="hljs-string">&quot;&quot;</span>, collapsed = <span class="hljs-string">&quot;&quot;</span>, circular = <span class="hljs-string">&quot;&quot;</span> &#125;,<br>mappings = &#123;<br><span class="hljs-comment">-- Use a table to apply multiple mappings</span><br>expand = &#123; <span class="hljs-string">&quot;&lt;CR&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;2-LeftMouse&gt;&quot;</span> &#125;,<br><span class="hljs-built_in">open</span> = <span class="hljs-string">&quot;o&quot;</span>,<br><span class="hljs-built_in">remove</span> = <span class="hljs-string">&quot;d&quot;</span>,<br>edit = <span class="hljs-string">&quot;e&quot;</span>,<br>repl = <span class="hljs-string">&quot;r&quot;</span>,<br>toggle = <span class="hljs-string">&quot;t&quot;</span>,<br>&#125;,<br>layouts = &#123;<br>&#123;<br>elements = &#123;<br>&#123; id = <span class="hljs-string">&quot;scopes&quot;</span>, size = <span class="hljs-number">0.33</span> &#125;,<br>&#123; id = <span class="hljs-string">&quot;breakpoints&quot;</span>, size = <span class="hljs-number">0.17</span> &#125;,<br>&#123; id = <span class="hljs-string">&quot;stacks&quot;</span>, size = <span class="hljs-number">0.25</span> &#125;,<br>&#123; id = <span class="hljs-string">&quot;watches&quot;</span>, size = <span class="hljs-number">0.25</span> &#125;,<br>&#125;,<br>size = <span class="hljs-number">0.33</span>,<br>position = <span class="hljs-string">&quot;right&quot;</span>,<br>&#125;,<br>&#123;<br>elements = &#123;<br>&#123; id = <span class="hljs-string">&quot;repl&quot;</span>, size = <span class="hljs-number">0.45</span> &#125;,<br>&#123; id = <span class="hljs-string">&quot;console&quot;</span>, size = <span class="hljs-number">0.55</span> &#125;,<br>&#125;,<br>size = <span class="hljs-number">0.27</span>,<br>position = <span class="hljs-string">&quot;bottom&quot;</span>,<br>&#125;,<br>&#125;,<br>floating = &#123;<br>max_height = <span class="hljs-number">0.9</span>,<br>max_width = <span class="hljs-number">0.5</span>, <span class="hljs-comment">-- Floats will be treated as percentage of your screen.</span><br>border = vim.g.border_chars, <span class="hljs-comment">-- Border style. Can be &#x27;single&#x27;, &#x27;double&#x27; or &#x27;rounded&#x27;</span><br>mappings = &#123;<br><span class="hljs-built_in">close</span> = &#123; <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;&lt;Esc&gt;&quot;</span> &#125;,<br>&#125;,<br>&#125;,<br>&#125;) <span class="hljs-comment">-- use default</span><br>dap.listeners.after.event_initialized[<span class="hljs-string">&quot;dapui_config&quot;</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>dapui.<span class="hljs-built_in">open</span>(&#123;&#125;)<br><span class="hljs-keyword">end</span><br>dap.listeners.before.event_terminated[<span class="hljs-string">&quot;dapui_config&quot;</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>dapui.<span class="hljs-built_in">close</span>(&#123;&#125;)<br><span class="hljs-keyword">end</span><br>dap.listeners.before.event_exited[<span class="hljs-string">&quot;dapui_config&quot;</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>dapui.<span class="hljs-built_in">close</span>(&#123;&#125;)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>配置基本上大家都没差多少，说不定都是从一个人的配置里搬运的。</p><center><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_1681120408.jpeg" class="" title="evaluate"></center><h3 id="配置-icon"><a href="#配置-icon" class="headerlink" title="配置 icon"></a>配置 icon</h3><p>我还修改了几个默认的 icon，在 configure 函数里。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configure</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> dap_breakpoint = &#123;<br>breakpoint = &#123;<br>text = <span class="hljs-string">&quot;&quot;</span>,<br>texthl = <span class="hljs-string">&quot;LspDiagnosticsSignError&quot;</span>,<br>linehl = <span class="hljs-string">&quot;&quot;</span>,<br>numhl = <span class="hljs-string">&quot;&quot;</span>,<br>&#125;,<br>rejected = &#123;<br>text = <span class="hljs-string">&quot;&quot;</span>,<br>texthl = <span class="hljs-string">&quot;LspDiagnosticsSignHint&quot;</span>,<br>linehl = <span class="hljs-string">&quot;&quot;</span>,<br>numhl = <span class="hljs-string">&quot;&quot;</span>,<br>&#125;,<br>stopped = &#123;<br>text = <span class="hljs-string">&quot;&quot;</span>,<br>texthl = <span class="hljs-string">&quot;LspDiagnosticsSignInformation&quot;</span>,<br>linehl = <span class="hljs-string">&quot;DiagnosticUnderlineInfo&quot;</span>,<br>numhl = <span class="hljs-string">&quot;LspDiagnosticsSignInformation&quot;</span>,<br>&#125;,<br>&#125;<br><br>vim.fn.sign_define(<span class="hljs-string">&quot;DapBreakpoint&quot;</span>, dap_breakpoint.breakpoint)<br>vim.fn.sign_define(<span class="hljs-string">&quot;DapStopped&quot;</span>, dap_breakpoint.stopped)<br>vim.fn.sign_define(<span class="hljs-string">&quot;DapBreakpointRejected&quot;</span>, dap_breakpoint.rejected)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><center><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3049280764.jpeg" class="" title="breakpoint"><p>断点标记</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3325119905.jpeg" class="" title="breakpoint"><p>单步停止</p></center><h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><p>现在还差一个客户端的函数没有写，在这里只是为了调用针对不同语言设置的服务端，内容也非常的简单。</p><p>新建一个 <code>config/dap/cpp.lua</code>，在里面配置 c++ 相关的参数就行了，需要注意的是，codelldb 可以调试 c、c++、rust 等语言，就不会再拆分成更精细的文件了。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> M = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.setup</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">-- local dap_install = require &quot;dap-install&quot;</span><br><span class="hljs-comment">-- dap_install.config(&quot;codelldb&quot;, &#123;&#125;)</span><br><br><span class="hljs-keyword">local</span> dap = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dap&quot;</span>)<br><span class="hljs-keyword">local</span> install_root_dir = vim.fn.stdpath(<span class="hljs-string">&quot;data&quot;</span>) .. <span class="hljs-string">&quot;/mason&quot;</span><br><span class="hljs-keyword">local</span> extension_path = install_root_dir .. <span class="hljs-string">&quot;/packages/codelldb/extension/&quot;</span><br><span class="hljs-keyword">local</span> codelldb_path = extension_path .. <span class="hljs-string">&quot;adapter/codelldb&quot;</span><br><br>dap.adapters.codelldb = &#123;<br><span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;server&quot;</span>,<br>port = <span class="hljs-string">&quot;$&#123;port&#125;&quot;</span>,<br>executable = &#123;<br>command = codelldb_path,<br>args = &#123; <span class="hljs-string">&quot;--port&quot;</span>, <span class="hljs-string">&quot;$&#123;port&#125;&quot;</span> &#125;,<br><br><span class="hljs-comment">-- On windows you may have to uncomment this:</span><br><span class="hljs-comment">-- detached = false,</span><br>&#125;,<br>&#125;<br>dap.configurations.cpp = &#123;<br>&#123;<br>name = <span class="hljs-string">&quot;Launch file&quot;</span>,<br><span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;codelldb&quot;</span>,<br>request = <span class="hljs-string">&quot;launch&quot;</span>,<br>program = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">return</span> vim.fn.<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Path to executable: &quot;</span>, vim.fn.getcwd() .. <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;file&quot;</span>)<br><span class="hljs-keyword">end</span>,<br>cwd = <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,<br>stopOnEntry = <span class="hljs-literal">true</span>,<br>&#125;,<br>&#125;<br><br>dap.configurations.c = dap.configurations.cpp<br>dap.configurations.rust = dap.configurations.cpp<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><blockquote><p>Mason 在这里终于露面了，但是我们只是看到查找了 Mason 安装 codelldb 的路径而已。</p></blockquote><p>配置的内容是固定的，设置一下执行文件的路径和参数，设置一下调试这个语言所需的启动参数，这里默认给了一个输入可执行文件路径启动调试的简单方法。</p><h2 id="配置-launch-json"><a href="#配置-launch-json" class="headerlink" title="配置 launch.json"></a>配置 launch.json</h2><p>上面的内容就已经足够调试 c++ 程序了，但是 dap 还支持 vscode 的 launch.json，将启动配置作为固定模板填入启动调试的列表，并且在 launch.json 中我们还可以控制程序的环境变量，启动参数等，会比较方便一些。</p><p>dap 支持这个只需要在 setup 函数加上一行代码就足够了。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dap.ext.vscode&quot;</span>).load_launchjs(<span class="hljs-literal">nil</span>, &#123; codelldb = &#123; <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;cpp&quot;</span>, <span class="hljs-string">&quot;rust&quot;</span> &#125; &#125;)<br></code></pre></td></tr></table></figure><p>这句话的意思是 launch.json 中的类型是 codelldb 时，使用 c、cpp、rust 的调试配置，而上面我们配置了 codelldb 的参数 和 cpp 的参数，而且还将 cpp 的配置复制给了 c 和 rust。</p><p>但是有一个需要注意的地方，launch.json 现在环境变量换成了 environment 字段，并且结构也发生了变化，dap 目前只支持 env 字段，我在考虑贡献一个 pr 做一个自动转换。</p><p>这里给一个 launch.json 的例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(codelldb) Launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;codelldb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./build/bin/deepin-kwin_x11&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;--replace&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;DISPLAY&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;:0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;PATH&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/bin:$PATH&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;XDG_CURRENT_DESKTOP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Deepin&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;QT_PLUGIN_PATH&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;QT_LOGGING_RULES&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kwin_*.debug=true&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>需要注意的是，这里的 codelldb 其实是一个标识字符串，vscode 默认提供的 type 是 cppgdb，我们也可以改成相同的字段。</p><p>想要在线查看最终文件内容，可以看下面几个链接：</p><p><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/config/dap/rust.lua">cpp.lua </a><br><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/config/dap/init.lua">init.lua</a><br><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/config/dap/keymaps.lua">keymaps.lua</a><br><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/plugins/_dap.lua">_dap.lua</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前我已经分享过了一份简单的 nvim 配置，它已经实现了编程所需的智能提示，语法高亮，代码跳转等功能，今天我打算整一下 nvim 的调试框架 dap。&lt;/p&gt;
&lt;p&gt;dap 是一个框架，客户端负责在 nvim 上显示各种调试信息，比如显示断点、调用栈、对象内存信息等，服</summary>
      
    
    
    
    <category term="neovim" scheme="https://blog.justforlxz.com/categories/neovim/"/>
    
    
    <category term="neovim" scheme="https://blog.justforlxz.com/tags/neovim/"/>
    
    <category term="dap" scheme="https://blog.justforlxz.com/tags/dap/"/>
    
  </entry>
  
  <entry>
    <title>1. init project</title>
    <link href="https://blog.justforlxz.com/2022/11/07/photo-1-init-project/"/>
    <id>https://blog.justforlxz.com/2022/11/07/photo-1-init-project/</id>
    <published>2022-11-07T08:38:31.000Z</published>
    <updated>2023-02-01T06:35:51.228Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个系列的文章，用来记录我的相册应用的开发过程，内容可能会比较枯燥，还请读者见谅。</p><p>我使用  NextCloud 作为我的存储中心，但是当我备份相册的时候，我感到了莫名的蛋疼，实在是太难用了，不支持相册，不支持标记，不支持各种视图，所以我决定自己写一个新的客户端，只提供相册功能。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>我用的是 iPhone 12，理所当然我会选择 iOS 客户端开发，在我面前有这么几种方案可以选择：</p><ol><li>object-c</li><li>swift</li><li>swiftui</li><li>flutter</li><li>qml</li><li>react-native</li></ol><blockquote><p>本着三短一长选最长的原则，我计划使用 react-native 作为项目的技术方案。</p></blockquote><p>object-c 已经很老旧了，我只是想业余时间做一个应用满足自己的需求，排除。</p><p>swfit 和 swiftui 是苹果目前主推的，特别是 swfitui，用来写界面真的很方便，但是我不想学新的，排除。</p><p>flutter 是谷歌在推的一个框架，从我的研发角度来看，flutter 和 qml 没有什么本质区别，都是自己实现了绘制，在此基础上完善控件等高级功能，既然我是一个 Qt 开发者，我肯定不会选择再去学一套类似的技术了，排除。</p><p>qml，Qt 目前主推的界面开发框架，采用 JSON like 的方式描述界面，并且可以运行一部分的标准 js 语法，配合 C++ 在 native 端提供本地功能，Qt 自己是一套平台一样的框架，用起来很爽，但是我不想写 qml，排除。</p><p>最终就只能用 react native 了，我个人想学一下前端开发，使用相关的技术栈对我来说性价比最高，选择。</p><blockquote><p><del>为了写 js 而找了这么多借口（</del></p></blockquote><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><p>确定了技术方案，就需要考虑实现哪些功能了，作为一个相册 App，它最基本的功能肯定是 <del>能启动</del>,嗯，看图。</p><ul><li>浏览服务器和本地的图片</li><li>上传和下载图片</li><li>相册分类</li><li>标记信息</li><li>查看文件详情</li></ul><p>一开始先不考虑那么多，做一个基本的 TimeLine 样式就可以了。</p><h2 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h2><p>功能也已经确定了，先实现一个 TimeLine 的功能，那么就要确定界面的样式了，我个人比较欣赏 Google Photo 的设计，打算就按像素复制了。</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>现在可以考虑怎么写代码了，首先初始化一下项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx react-native init photos --template react-native-template-typescript<br></code></pre></td></tr></table></figure><p>初始化一个带有 typescript 的 react native 项目，然后在 vscode 里安装一些 react 和 react native 相关的插件就可以了。</p><p>删掉初始化项目的 App.tsx 和相关的文件，新建 src 目录和 App.tsx 文件，开始写新的界面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个系列的文章，用来记录我的相册应用的开发过程，内容可能会比较枯燥，还请读者见谅。&lt;/p&gt;
&lt;p&gt;我使用  NextCloud 作为我的存储中心，但是当我备份相册的时候，我感到了莫名的蛋疼，实在是太难用了，不支持相册，不支持标记，不支持各种视图，所以我决定自己写一个新的</summary>
      
    
    
    
    <category term="photos 开发笔记" scheme="https://blog.justforlxz.com/categories/photos-%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="typescript" scheme="https://blog.justforlxz.com/tags/typescript/"/>
    
    <category term="react" scheme="https://blog.justforlxz.com/tags/react/"/>
    
    <category term="react native" scheme="https://blog.justforlxz.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>docker-buildx-multi-arch-images</title>
    <link href="https://blog.justforlxz.com/2022/08/25/docker-buildx-multi-arch-images/"/>
    <id>https://blog.justforlxz.com/2022/08/25/docker-buildx-multi-arch-images/</id>
    <published>2022-08-25T05:32:03.000Z</published>
    <updated>2023-02-01T06:35:51.162Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在搞 github 的 ci，为了方便公司的开发快速修复其他发行版上的构建问题，我研究了一下 distrobox 启动容器来作为本地验证环境的可行性，结果发现还不错，就顺手做了几个镜像。</p><p>v23 的仓库是支持多个架构的，想着顺手做一份 v23 的镜像提交到 docker hub 上，结果遇到了一点多平台的坑。</p><h2 id="docker-buildx"><a href="#docker-buildx" class="headerlink" title="docker buildx"></a>docker buildx</h2><p>Docker Buildx是一个CLI插件，它扩展了Docker命令，完全支持 Moby BuildKit 构建工具包提供的特性。它提供了与docker 构建相同的用户体验，提供了许多新特性，比如创建作用域的构建器实例和同时针对多个节点构建。</p><p>Moby BuildKit 构建工具提供了一些诸如跨平台启动的功能。</p><h2 id="首次尝试"><a href="#首次尝试" class="headerlink" title="首次尝试"></a>首次尝试</h2><p>最开始我是打算使用 docker import 直接把 base.tgz 导入进去的，docker import 支持 –platform 参数指定架构，我就跑了两遍，生成了 linux&#x2F;arm64 和 linux&#x2F;amd64 两个架构的。</p><p>结果我看到 docker images 里只有一份，而且用 docker image inspect beige:base 查看发现里面的 Architecuture 只有 amd64，推送到 docker hub 后也只有一份，这显然是不正确的。</p><h2 id="使用-dockerfile"><a href="#使用-dockerfile" class="headerlink" title="使用 dockerfile"></a>使用 dockerfile</h2><p>经过我一番的搜索，我看到了一种使用 docker buildx 配合 dockerfile 的多架构构建方式，然后我就快速的写了一份 dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> --platform=$TARGETPLATFORM scratch<br><br><span class="hljs-keyword">ARG</span> TARGETARCH<br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> beige-<span class="hljs-variable">$&#123;TARGETARCH&#125;</span>.tgz /</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [ <span class="hljs-string">&quot;sh&quot;</span> ]</span><br></code></pre></td></tr></table></figure><p>dockerfile 需要注意的是，变量需要先使用 ARG 声明，在 build 阶段，遇到变量会产生一次分叉，这样就会在不同的架构里继续运行了（这也是坑我很长的时间，最终我将文件名修改为方便获取的方式……）。</p><p>接下来需要创建一份构建环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker buildx create --use<br></code></pre></td></tr></table></figure><p>这条命令可以创建一个基本环境，可以使用 <code>docker buildx ls</code> 查看当前的环境，可以看到默认就支持的有很多种架构。</p><p>然后使用 build 命令开始构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker buildx build --platform=linux/amd64,linux/arm64 -t linuxdeepin/beige:base --push .<br></code></pre></td></tr></table></figure><p>简单说一下参数，platform 参数负责控制本次 build 传入架构，t 参数设置 tag 名称，这里我用了 –push 直接推送上去了，它默认用的 docker-compose 处理，构建产物不会出现在 docker images 里，所以就直接推送了。</p><p>现在我就有一份 v23 的 docker base 可用了，很开心。</p><p>点击前往：<br><a href="https://hub.docker.com/repository/docker/linuxdeepin/beige">https://hub.docker.com/repository/docker/linuxdeepin/beige</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近一直在搞 github 的 ci，为了方便公司的开发快速修复其他发行版上的构建问题，我研究了一下 distrobox 启动容器来作为本地验证环境的可行性，结果发现还不错，就顺手做了几个镜像。&lt;/p&gt;
&lt;p&gt;v23 的仓库是支持多个架构的，想着顺手做一份 v23 的镜像提</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.justforlxz.com/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://blog.justforlxz.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 React 的 JSX</title>
    <link href="https://blog.justforlxz.com/2022/07/02/jsx/"/>
    <id>https://blog.justforlxz.com/2022/07/02/jsx/</id>
    <published>2022-07-01T16:11:59.000Z</published>
    <updated>2023-02-01T06:35:51.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h1><p>JSX 是 javascript XML 的缩写，可以在 javascript 代码中书写 HTML 结构的一种方式。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>采用类似于 HTML 语法</p><p>充分利用 js 自身的可编程能力创建 HTML 结构</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>需要使用 babel 进行语法转换，对于 react 而言，以下代码是等价的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;d&#x27;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>,<br>                                  &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;d&#x27;</span> &#125;,<br>                                  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>,<br>                                                         <span class="hljs-literal">null</span>,<br>                                                         <span class="hljs-string">&#x27;hello world&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>可以在 JSX 中使用表达式，表达式使用一对花括号对表达式进行标记。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> text = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">const</span> html = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123; text &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br><span class="hljs-keyword">const</span> flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;test function&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">const</span> newHtml = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123; flag ? test() : &#x27;no&#x27; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>通过上面的例子可以看出，JSX 的表达式支持以下几种方式：</p><ol><li>识别常规变量</li><li>原生 js 方法调用</li><li>三元运算符</li></ol><p><strong>特别注意</strong></p><p>JSX 中无法使用 if&#x2F;switch&#x2F;变量声明等语句，他们不是表达式，不支持在 jsx 中使用。</p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>在 vue 中，我们可以使用 v-for 对一个列表数据进行遍历，可以在模板中实现元素的重复生成。在 angular 中可以使用 *ngFor 实现相同的事情，在 JSX 中我们也可以做到相同的事情。</p><p>可以使用 map 方法返回包含 jsx 的表达式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> songs = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;可惜没如果&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;我继续&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;黑夜问白天&#x27;</span> &#125;,<br>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;App&#x27;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">&#123;</span><br><span class="language-xml">songs.map(item =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">item.id</span>&#125; &gt;</span>&#123; item.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>由于是重复元素渲染，需要为生成的元素分配一个 key，否则会影响 virtual dom 的性能。</p><p>key 只能使用 number&#x2F;string 类型，key 属性不会出现在真实的 dom 属性上，进在内部使用。</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>JSX 支持满足条件生成对应的 HTML 结构，可以使用 <code>三元运算符</code> 实现。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">&#123; flag ? &#x27;flag is true&#x27; : &#x27;flag is false&#x27; &#125;</span><br><span class="language-xml">&#123; flag ? <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>flag is true<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> : null &#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><p>JSX 支持 css 样式处理</p><ul><li>行内样式 - style - 在元素属性上绑定 style 属性</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> <span class="hljs-attr">red</span> &#125;&#125;&gt;</span>here is a div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>行内样式 - style - 更优写法</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> styleObj = &#123;<br><span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">styleObj</span> &#125;&gt;</span>here is a div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>类名样式 - 在元素身上绑一个 className 属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.active</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./app.css&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>here is a div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>在第一个例子中，由于 style 属性需要的是一个对象，所以第一层 <code>&#123;&#125;</code> 是表达式，第二层 <code>&#123;&#125;</code> 是对象的定义括号，所以通常会写成 Object 的方式，这样控制也更加方便。</p><h3 id="动态类名控制"><a href="#动态类名控制" class="headerlink" title="动态类名控制"></a>动态类名控制</h3><p>在上面的例子中，已经使用 css 中的类名样式进行了样式设置，但是有时候我们会希望控制一个元素的样式在某些场景下，会发生改变，这个时候就需要使用动态类名控制了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./app.css&#x27;</span><br><br><span class="hljs-keyword">const</span> flag = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">flag</span> ? &quot;<span class="hljs-attr">activate</span>&quot; <span class="hljs-attr">:</span> &quot;&quot; &#125;&gt;</span>here is a div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>JSX 在实际应用时的注意事项</p><ol><li>JSX 必须有一个根结点，也就是说 React 无法使用 jsx 创建最顶层的 html 元素，我们必须先提供一个空的元素作为 React 的根节点。（或者使用幽灵节点 <code>&lt;&gt;&lt;/&gt;</code> 创建）</li><li>所有标签必须形成闭合，成对闭合或者自闭合均可。</li><li>JSX 中的语法更贴近 javascript 的语法，属性采用小驼峰命名法 <code>class -&gt; className</code> <code>for -&gt; htmlFor</code> 。</li><li>JSX 支持多行（换行），如果需要换行，可以使用 <code>()</code> 进行包裹。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jsx&quot;&gt;&lt;a href=&quot;#jsx&quot; class=&quot;headerlink&quot; title=&quot;jsx&quot;&gt;&lt;/a&gt;jsx&lt;/h1&gt;&lt;p&gt;JSX 是 javascript XML 的缩写，可以在 javascript 代码中书写 HTML 结构的一种方式。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="Web" scheme="https://blog.justforlxz.com/categories/Web/"/>
    
    
    <category term="javascript" scheme="https://blog.justforlxz.com/tags/javascript/"/>
    
    <category term="jsx" scheme="https://blog.justforlxz.com/tags/jsx/"/>
    
  </entry>
  
  <entry>
    <title>栈分配问题</title>
    <link href="https://blog.justforlxz.com/2022/06/24/stack-problem/"/>
    <id>https://blog.justforlxz.com/2022/06/24/stack-problem/</id>
    <published>2022-06-24T08:44:30.000Z</published>
    <updated>2023-02-01T06:35:51.229Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子在写一个新的项目，为了提升一些速度，所以没有使用 Qt 之类的大型库，在做进程管理的时候，遇到了奇怪的崩溃问题。</p><p>因为平时很少写这样的代码，所以觉得出问题很正常，但是排查了很久，都没有找到问题所在。</p><p>在 @black-desk 大佬的帮助下，重新复习了一遍操作系统如何管理进程，找到了问题所在。</p><p>先来一份简单的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">child</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pid = fork();<br>    <span class="hljs-keyword">switch</span> (pid) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>          std::cout &lt;&lt; <span class="hljs-string">&quot;[child] I&#x27;m child.&quot;</span> &lt;&lt; std::endl;<br>          <span class="hljs-built_in">sleep</span>(<span class="hljs-number">5</span>);<br>          std::cout &lt;&lt; <span class="hljs-string">&quot;[child] I&#x27;m quit.&quot;</span> &lt;&lt; std::endl;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>          std::cout &lt;&lt; <span class="hljs-string">&quot;fork() failed.&quot;</span> &lt;&lt; std::endl;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          std::cout &lt;&lt; <span class="hljs-string">&quot;[parent] I&#x27;m meself.&quot;</span> &lt;&lt; std::endl;<br>          std::cout &lt;&lt; <span class="hljs-string">&quot;[parent] I will wait child.&quot;</span> &lt;&lt; std::endl;<br>          <span class="hljs-built_in">wait</span>(<span class="hljs-literal">nullptr</span>);<br>          std::cout &lt;&lt; <span class="hljs-string">&quot;[parent] I&#x27;m quit.&quot;</span> &lt;&lt; std::endl;<br>          <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> pid;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">child</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来跑一下这段代码，可以看到进程的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ child.cpp<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./a.out</span><br>[parent] I&#x27;m meself.<br>[parent] I will wait child.<br>[child] I&#x27;m child.<br>[child] I&#x27;m quit.<br>[parent] I&#x27;m quit.<br></code></pre></td></tr></table></figure><p>上面是一个非常简单和基本的 fork() 系统调用的用法，目前为止这里是没有问题的。</p><p>除了 fork() 系统调用，还有 clone() 系统调用，他们的作用分别是：</p><p>fork 会创建一个父进程的完整副本，复制父进程所有的资源。</p><p>clone 也可以创建一个新的进程，但是它可以比 fork 更加精细的控制与子进程共享的资源，因此参数会更加复杂一些，通常我们可以用它来实现线程。</p><p>在我的需求中，我需要控制子进程运行在一个新的 proc namespace 中，所以我会选择使用 clone() 系统调用控制子进程所属的 namespace。</p><p>大概的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHILD_STACK 8192</span><br><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">child_run</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count in child: %d\n&quot;</span>, ++count);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>   pid;<br>    <span class="hljs-type">int</span>   status;<br>    <span class="hljs-type">void</span> *child_stack = <span class="hljs-built_in">malloc</span>(CHILD_STACK);<br>    <span class="hljs-keyword">if</span> (!child_stack) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;failed to allocate child stack\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count before clone: %d\n&quot;</span>, count);<br>    <span class="hljs-comment">/* Simulate vfork */</span><br>    pid = <span class="hljs-built_in">clone</span>(child_run, (<span class="hljs-type">void</span> *) ((<span class="hljs-type">char</span> *) child_stack + CHILD_STACK),<br>                CLONE_NEWPID, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;failed to clone\n&quot;</span>);<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;clone failed: &quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">waitpid</span>(pid, &amp;status, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count after clone: %d\n&quot;</span>, count);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一份很常见的 clone() 使用方法，作为一个例子，它没毛病，直到我运行了大量的函数，它崩溃了。</p><p>gdb 跟踪了一下，崩溃在了 std 的函数调用中，看起来很奇怪，我并没有写什么特别奇怪的代码，然后我开始精简代码，用二分简单定位了一下，发现有一个函数不调用，就不会崩溃，然后我就跟进去看代码，也没发现里面有什么奇怪的，就是一些 std 的代码。</p><p>正当我发愁怎么处理这个问题的时候， @black-desk 大佬来我旁边看我在干啥，我就给他看了一下代码和问题，他也觉得奇怪，就挺有兴趣的来帮我检查了。</p><p>经过一波 debug，最后定位可能是 stack 空间不够用了，然后被操作系统干掉了，最终将 stack 调大了一些，发现可以正常运行了，这说明问题确实是这里。</p><p>然后我就去复习 linux 进程内存分配的知识了。</p><p>进程地址空间中最顶部的段是栈，大多数编程语言将之用于存储函数参数和局部变量。调用一个方法或函数会将一个新的栈帧（stack frame）压入到栈中，这个栈帧会在函数返回时被清理掉。由于栈中数据严格的遵守FIFO的顺序，这个简单的设计意味着不必使用复杂的数据结构来追踪栈中的内容，只需要一个简单的指针指向栈的顶端即可，因此压栈（pushing）和退栈（popping）过程非常迅速、准确。进程中的每一个线程都有属于自己的栈。</p><p>通过不断向栈中压入数据，超出其容量就会耗尽栈所对应的内存区域，这将触发一个页故障（page fault），而被 Linux 的 expand_stack() 处理，它会调用 acct_stack_growth() 来检查是否还有合适的地方用于栈的增长。如果栈的大小低于 RLIMIT_STACK（通常为8MB），那么一般情况下栈会被加长，程序继续执行，感觉不到发生了什么事情。这是一种将栈扩展到所需大小的常规机制。然而，如果达到了最大栈空间的大小，就会栈溢出（stack overflow），程序收到一个段错误（segmentation fault）。</p><blockquote><p><strong>动态栈增长是唯一一种访问未映射内存区域而被允许的情形，其他任何对未映射内存区域的访问都会触发页错误，从而导致段错误。一些被映射的区域是只读的，因此企图写这些区域也会导致段错误。</strong></p></blockquote><p>最终我没有再使用这套方案，所以问题也就不需要解决了，但是这个问题让我对 Linux 进程的内存布局有了更加深刻的了解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前阵子在写一个新的项目，为了提升一些速度，所以没有使用 Qt 之类的大型库，在做进程管理的时候，遇到了奇怪的崩溃问题。&lt;/p&gt;
&lt;p&gt;因为平时很少写这样的代码，所以觉得出问题很正常，但是排查了很久，都没有找到问题所在。&lt;/p&gt;
&lt;p&gt;在 @black-desk 大佬的帮助下</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.justforlxz.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="https://blog.justforlxz.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一个邪恶的想法</title>
    <link href="https://blog.justforlxz.com/2022/04/26/an-evil-idea/"/>
    <id>https://blog.justforlxz.com/2022/04/26/an-evil-idea/</id>
    <published>2022-04-26T07:39:49.000Z</published>
    <updated>2023-02-01T06:35:51.157Z</updated>
    
    <content type="html"><![CDATA[<p>哪个男孩子可以抵御服务器集群的诱惑呢？</p><p>我有几台性能偏弱的机器，并且分散在不同的地方，我就想着如何利用起来这些废旧设备。</p><p>我学习了一下 docker swarm 和 kubernetes，并半成功的使用 docker swarm 部署了一些服务，但是遇到了一些无法处理的难题，部署 php 服务时不知道为什么，只能在 manager 节点才能访问数据库，即使两个服务都在同一个节点上工作，这个问题困扰我了很久，一度以为是 docker 集群的网络不太行。</p><p>kubernetes 由于太过复杂，我目前还处于学习的状态，想要部署一些服务用作练习，但是我的机器都太垃圾了，想要使用 kubernetes 有点太困难，我就需要寻求其他人的帮助（白嫖），最终，我遇到了我的好朋友 Github。</p><p>Github 是一位非常热心的好朋友，它的家底雄厚，愿意给我一些房间，让我运行一些小的任务，但是它也规定了，每次只能使用六个小时，很多情况下我只是用它来启动一些检查或者编译任务，时间也不会很长，但是它提供的房间实在是太好了，以至于我动了歪脑筋（</p><p>一个邪恶的计划在我的脑海中逐渐成型。</p><p>首先，作为计划的第一步，我需要提供一个 VPN 服务，将所有的机器都联合进一个网络。</p><p>第二步，我需要想办法将 Github action 纳入我的管理。</p><p>第三步，自动更换房间，利用集群的自动迁移达到服务永不停的目的。</p><p>我有一台香港阿里云的轻量应用服务器，它的性能非常的弱，甚至坚持不了一个 go build，但是跑 VPN 和 kubernetes 还是足够了。</p><p>我需要写一个小的服务，提供 VPN 配置池，每个 action 启动时都会请求配置文件，从而加入集群网络。</p><p>启动的 action 会先请求 VPN 配置，加入集群网络后，初始化 kubernetes。作为 node 的 action 在启动后会加入到集群中，接受集群的管理。如果某个 action 即将过期，那么 master 会提前启动新的 node，并等待 node 被销毁，触发集群的 service 自动转移。</p><p>最终，我就拥有了一套性能非常强劲的集群，可以在上面部署各种服务。</p><p>当然，我这个邪恶的想法，也一定会伤了我好朋友的心。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哪个男孩子可以抵御服务器集群的诱惑呢？&lt;/p&gt;
&lt;p&gt;我有几台性能偏弱的机器，并且分散在不同的地方，我就想着如何利用起来这些废旧设备。&lt;/p&gt;
&lt;p&gt;我学习了一下 docker swarm 和 kubernetes，并半成功的使用 docker swarm 部署了一些服务，</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="https://blog.justforlxz.com/tags/kubernetes/"/>
    
    <category term="Github Action" scheme="https://blog.justforlxz.com/tags/Github-Action/"/>
    
    <category term="evil" scheme="https://blog.justforlxz.com/tags/evil/"/>
    
  </entry>
  
  <entry>
    <title>hello-metal.5 材质贴图</title>
    <link href="https://blog.justforlxz.com/2022/04/09/hello-metal-5/"/>
    <id>https://blog.justforlxz.com/2022/04/09/hello-metal-5/</id>
    <published>2022-04-09T03:01:52.000Z</published>
    <updated>2023-02-01T06:35:51.188Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。</p><p>目前系列有:</p><a href="/2022/04/04/hello-metal-1/" title="hello-metal.1 看到了绿色">hello-metal.1 看到了绿色</a><br><a href="/2022/04/04/hello-metal-2/" title="hello-metal.2 第一个三角形">hello-metal.2 第一个三角形</a><br><a href="/2022/04/04/hello-metal-3/" title="hello-metal.3 四边形">hello-metal.3 四边形</a><br><a href="/2022/04/04/hello-metal-4/" title="hello-metal.4 动画">hello-metal.4 动画</a><br><a href="/2022/04/09/hello-metal-5/" title="hello-metal.5 材质贴图">hello-metal.5 材质贴图</a><hr><div><p>点击查看上一篇 <a href="/2022/04/04/hello-metal-4/" title="hello-metal.4 动画">hello-metal.4 动画</a></p><p></div><p>上一篇我们成功的绘制了一个四边形，并且运行了一个简单的动画，今天我们来一起搞定材质贴图。</p><p>在前面的文章里已经介绍到了，我们通过两个三角形组合成了一个矩形，并且为每个顶点都增加偏移，以便我们在外部控制每帧绘制时坐标偏移。</p><p>在发送数据给 GPU 时，在 CPU 端准备的数据，必须设定好内存布局，然后在 shader 中接受时，也要使用相同的内存布局，否则读取就会出现问题，这也是为什么我们很多地方都在计算 offset 的原因。</p><p>这次我们拆分下数据，将原本一个 buffer 中的顶点数据，拆分为多个 buffer，一同发送给 GPU。</p><h2 id="多条-MTLBuffer"><a href="#多条-MTLBuffer" class="headerlink" title="多条 MTLBuffer"></a>多条 MTLBuffer</h2><p>在 MTLVertexDescriptor 中我们可以添加多条 attributes，需要指定一个新的 bufferIndex，因为每一条属性对应了新的 MTLBuffer。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> vertexDescriptor <span class="hljs-operator">=</span> <span class="hljs-type">MTLVertexDescriptor</span>()<br><br><span class="hljs-comment">// position</span><br>vertexDescriptor.attributes[<span class="hljs-number">0</span>].format <span class="hljs-operator">=</span> .float3<br>vertexDescriptor.attributes[<span class="hljs-number">0</span>].offset <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>vertexDescriptor.attributes[<span class="hljs-number">0</span>].bufferIndex <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment">// color</span><br>vertexDescriptor.attributes[<span class="hljs-number">1</span>].format <span class="hljs-operator">=</span> .float4<br>vertexDescriptor.attributes[<span class="hljs-number">1</span>].offset <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>vertexDescriptor.attributes[<span class="hljs-number">1</span>].bufferIndex <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><br>vertexDescriptor.layouts[<span class="hljs-number">0</span>].stride <span class="hljs-operator">=</span> <span class="hljs-type">MemoryLayout</span>&lt;simd_float4&gt;.stride<br>vertexDescriptor.layouts[<span class="hljs-number">1</span>].stride <span class="hljs-operator">=</span> <span class="hljs-type">MemoryLayout</span>&lt;simd_float4&gt;.stride<br></code></pre></td></tr></table></figure><p>每条 attributes 设置完毕后，我们还需要指定三条布局，和之前的指令相比，相当于我们将所有数据放在一条 buffer中，现在我们拆分成并行的数据，一块发送给 GPU。</p><img src="/2022/04/09/hello-metal-5/interleaved-attributes.png" class="" title="内存布局"><p>在这张图中可以看出，内存布局是由 layout 决定的，数据是由 attributes 组成。</p><img src="/2022/04/09/hello-metal-5/noninterleaved-attributes.png" class="" title="多条缓冲区"><p>多条缓冲区是单条缓冲区的结构复制，会并行将数据都发送到 GPU。</p><img src="/2022/04/09/hello-metal-5/interleaved-noninterleaved-buffers.png" class="" title="单条和多条缓冲区对比"><p>设置好内存布局以后，我们就需要创建对应的 MTLBuffer 来保存独立的顶点数据。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> positionBuffer: <span class="hljs-type">MTLBuffer</span>?<br><span class="hljs-keyword">var</span> colorBuffer: <span class="hljs-type">MTLBuffer</span>?<br></code></pre></td></tr></table></figure><p>在我们的 buildModel 函数中将数据初始化。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">positionBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: positionVertices,<br>                                  length: positionVertices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;simd_float4&gt;.size,<br>                                  options: [])<br>colorBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: colorVertices,<br>                                length: colorVertices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;simd_float4&gt;.size,<br>                                options: [])<br></code></pre></td></tr></table></figure><p>然后我们需要将顶点数据发送到 GPU，在 draw 函数中，将原本的 commandEncoder.setVertexBuffer 删除，并使用新的 MTLBuffer，而且需要注意的是，index 参数需要和 MTLVertexDescriptor 中的 index 保持一致，否则就无法正确的读取。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">commandEncoder.setVertexBuffer(positionBuffer,<br>                                offset: <span class="hljs-number">0</span>,<br>                                index: <span class="hljs-number">0</span>)<br>commandEncoder.setVertexBuffer(colorBuffer,<br>                                offset: <span class="hljs-number">0</span>,<br>                                index: <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>那么数据发送到 GPU 之后，shader 要如何使用数据呢？</p><p>我们需要在 shader 中增加一个结构体，并使用一些语法标记。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shader">struct VertexIn &#123;<br>    float4 position [[ attribute(0) ]];<br>    float4 color [[ attribute(1) ]];<br>&#125;;<br><br>struct VertexOut &#123;<br>    float4 position [[ position ]];<br>    float4 color;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>[[ attribute(0) ]]</code> 的意思就是为了取得对应的 attributes。</p><p>还需要修改一下顶点着色器代码，传入结构体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shader">vertex VertexOut vertex_shader(const VertexIn vertexIn [[ stage_in ]]) &#123;<br>    VertexOut vertexOut;<br>    vertexOut.position = vertexIn.position;<br>    vertexOut.color = vertexIn.color;<br><br>    return vertexOut;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们注意到，参数里有一个 <code>[[ stage_in ]]</code> 的标记，<code>[[ stage_in ]]</code> 可以修饰结构体，参数中只允许有一个参数使用该标记进行修饰。</p><p>由于我们的顶点是原始信息，所以只需要正常的赋值新的结构体，然后返回即可。</p><h2 id="绘制材质"><a href="#绘制材质" class="headerlink" title="绘制材质"></a>绘制材质</h2><p>材质贴图又称为纹理，纹理也有像素的称呼，但是需要区分一下，这里的像素并不是指屏幕上的物理像素。纹理使用不一样的坐标系，其原点在左上角，并且可以使用归一化将坐标系压缩至 (0.0, 1.0)，当然不强制使用归一化坐标系，但是当你想使用不同分辨率的纹理时，只要映射关系正确，就可以正常工作。</p><p>绘制材质需要先进行顶点映射，材质的坐标系与顶点的坐标系不相同，所以我们需要提供一种映射，在执行片元着色器时，获取到某个位置正确的图片颜色。</p><h3 id="坐标映射"><a href="#坐标映射" class="headerlink" title="坐标映射"></a>坐标映射</h3><p>我们在 vertexDescriptor 中增加一条新的属性，用来保存映射关系。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// texture</span><br>vertexDescriptor.attributes[<span class="hljs-number">2</span>].format <span class="hljs-operator">=</span> .float2<br>vertexDescriptor.attributes[<span class="hljs-number">2</span>].offset <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>vertexDescriptor.attributes[<span class="hljs-number">2</span>].bufferIndex <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br><br>vertexDescriptor.layouts[<span class="hljs-number">2</span>].stride <span class="hljs-operator">=</span> <span class="hljs-type">MemoryLayout</span>&lt;simd_float2&gt;.stride<br></code></pre></td></tr></table></figure><p>创建新的 MTLBuffer，保存映射关系。由于我们只使用了四个顶点，两个三角形组成了矩形，所以我们只需要将四个点的坐标对应起来就可以了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">textureBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: textureVertices,<br>                                  length: textureVertices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;simd_float2&gt;.size,<br>                                  options: [])<br></code></pre></td></tr></table></figure><p>在 draw 函数中，我们增加新的顶点信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swfit">commandEncoder.setVertexBuffer(textureBuffer,<br>                               offset: 0,<br>                               index: 2)<br></code></pre></td></tr></table></figure><p>在 shader 的结构体中增加属性的接收。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexIn</span> &#123;<br>    float4 position [[ attribute(<span class="hljs-number">0</span>) ]];<br>    float4 color [[ attribute(<span class="hljs-number">1</span>) ]];<br>    float2 textureCoordinates [[ attribute(<span class="hljs-number">2</span>) ]];<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexOut</span> &#123;<br>    float4 position [[ position ]];<br>    float4 color;<br>    float2 textureCoordinates;<br>&#125;;<br><br>vertex <span class="hljs-type">VertexOut</span> vertex_shader(const <span class="hljs-type">VertexIn</span> vertexIn [[ stage_in ]]) &#123;<br>    <span class="hljs-type">VertexOut</span> vertexOut;<br>    vertexOut.position <span class="hljs-operator">=</span> vertexIn.position;<br>    vertexOut.color <span class="hljs-operator">=</span> vertexIn.color;<br>    vertexOut.textureCoordinates <span class="hljs-operator">=</span> vertexIn.textureCoordinates;<br><br>    <span class="hljs-keyword">return</span> vertexOut;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>好，我们现在已经成功的设置好了顶点属性，可是我们还没有讲如何读取文件呢。</p><p>首先，在 Metal 中，材质的读取是通过 MTKTextureLoader 创建一个加载器，可以使用它提供的 newTexture 方法创建一个 MTLTexture 对象。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">createTexture</span>(<span class="hljs-params">device</span>: <span class="hljs-type">MTLDevice</span>, <span class="hljs-params">imageName</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">MTLTexture</span>? &#123;<br>    <span class="hljs-keyword">let</span> textureLoader <span class="hljs-operator">=</span> <span class="hljs-type">MTKTextureLoader</span>(device: device)<br>    <span class="hljs-keyword">var</span> texture: <span class="hljs-type">MTLTexture</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-comment">// change direction</span><br>    <span class="hljs-keyword">let</span> textureLoaderOptions: [<span class="hljs-type">MTKTextureLoader</span>.<span class="hljs-type">Option</span>: <span class="hljs-keyword">Any</span>] <span class="hljs-operator">=</span> [.origin: <span class="hljs-type">MTKTextureLoader</span>.<span class="hljs-type">Origin</span>.bottomLeft]<br>    <span class="hljs-comment">//let textureLoaderOptions: [MTKTextureLoader.Option: Any] = [:]</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> textureURL <span class="hljs-operator">=</span> <span class="hljs-type">Bundle</span>.main.url(forResource: imageName, withExtension: <span class="hljs-literal">nil</span>) &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            texture <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> textureLoader.newTexture(URL: textureURL, options: textureLoaderOptions)<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;texture not created&quot;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> texture<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，我通过 MTKTextureLoader.Option 修改了坐标系的方向，将原点从左上角改为左下角（第四象限位置改为第一象限），可以不用修改，仅仅是个人喜好。</p><h3 id="设置采样"><a href="#设置采样" class="headerlink" title="设置采样"></a>设置采样</h3><p>根据一般的流程，这个时候应该会先说画出来，然后发现画面比较模糊，这时候才开始说采样需要调整。</p><p>我不按套路，我就是要先讲采样，略略略。</p><p>Metal 使用 MTLSamplerDescriptor 来控制采样，我才用最基本的线性采样。Metal 的着色器工作流程是，先执行顶点着色器，处理顶点的坐标信息，再执行光栅化，确定像素边界，裁剪超出的像素。当光栅化结束后，执行片元着色器，计算每个像素的颜色。我们在片元着色器中使用材质，为片元着色器传入材质、顶点信息和采样属性，就可以完成像素颜色的输出。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> samplerState: <span class="hljs-type">MTLSamplerState</span>?<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildSamplerState</span>(<span class="hljs-params">device</span>: <span class="hljs-type">MTLDevice</span>) &#123;<br>    <span class="hljs-keyword">let</span> descriptor <span class="hljs-operator">=</span> <span class="hljs-type">MTLSamplerDescriptor</span>()<br>    descriptor.minFilter <span class="hljs-operator">=</span> .linear<br>    descriptor.magFilter <span class="hljs-operator">=</span> .linear<br>    samplerState <span class="hljs-operator">=</span> device.makeSamplerState(descriptor: descriptor)<br>&#125;<br></code></pre></td></tr></table></figure><p>在构造函数中执行该函数，就可以完成 MTLSamplerState 构建。</p><p>紧接着，我们为 MTLCommandEncoder 设置片元采样状态。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">commandEncoder.setFragmentSamplerState(node.samplerState, index: <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>在 shader 中修改片元着色器代码，使用上面设置好的全部信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shader">fragment half4 fragment_shader(VertexOut vertexIn [[ stage_in ]],<br>                               sampler sampler2d [[ sampler(0) ]],<br>                               texture2d&lt;float&gt; texture [[ texture(0) ]])<br>&#123;<br>    float4 color = texture.sample(sampler2d, vertexIn.textureCoordinates);<br>    return half4(color.r, color.g, color.b, 1);<br>&#125;<br></code></pre></td></tr></table></figure><p>在参数中使用 <code>[[ sampler(0) ]]</code> 来获取为 MTLCoMTLCommandEncoder 设置的 samplerState 的 index，<code>[[ texture(0) ]]</code> 获取 draw 函数中传入的材质。</p><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>终于到最后了，我们好像还没说 textureVertices 应该存什么样的数据。我们现在有四个顶点，我们的矩形是两个三角形组成的，所以我们的的数据就是，四个角的点，与图片的四个角保持一致即可，我已经将材质的坐标系原点改为左下角，所以数据就是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> textureVertices: [simd_float2] <span class="hljs-operator">=</span> [<br>    simd_float2(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), <span class="hljs-comment">// 左上角</span><br>    simd_float2(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-comment">// 左下角（原点）</span><br>    simd_float2(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), <span class="hljs-comment">// 右下角</span><br>    simd_float2(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), <span class="hljs-comment">// 右上角</span><br>]<br></code></pre></td></tr></table></figure><p>好，我们已经完成了所有的准备工作，现在是时候加载我老婆了！</p><img src="/2022/04/09/hello-metal-5/laopo.png" class=""><img src="/2022/04/09/hello-metal-5/test.png" class=""><p>也许你注意到了，照片看起来似乎饱和度有一些不太对，这是因为我们还没有调整色彩空间，只是简单的读取了原始信息，所以我们需要做一些处理，这就留到下一篇章吧～ </p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://developer.apple.com/documentation/metal/mtlvertexdescriptor">https://developer.apple.com/documentation/metal/mtlvertexdescriptor</a><br><a href="https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf">https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf</a><br><a href="https://metalbyexample.com/vertex-descriptors/">https://metalbyexample.com/vertex-descriptors/</a><br><a href="https://metalbyexample.com/textures-and-samplers/">https://metalbyexample.com/textures-and-samplers/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。&lt;/p&gt;
&lt;p&gt;目前系列有:&lt;/p&gt;
&lt;a href=&quot;/2022/04/04/hello-metal-1/&quot; title=&quot;hello-metal.1 看到了绿色&quot;&gt;</summary>
      
    
    
    
    <category term="HelloMetal系列" scheme="https://blog.justforlxz.com/categories/HelloMetal%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Metal" scheme="https://blog.justforlxz.com/tags/Metal/"/>
    
    <category term="GameEngine" scheme="https://blog.justforlxz.com/tags/GameEngine/"/>
    
  </entry>
  
  <entry>
    <title>hello-metal.4 动画</title>
    <link href="https://blog.justforlxz.com/2022/04/04/hello-metal-4/"/>
    <id>https://blog.justforlxz.com/2022/04/04/hello-metal-4/</id>
    <published>2022-04-04T08:20:24.000Z</published>
    <updated>2023-02-01T06:35:51.188Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。</p><p>目前系列有:</p><a href="/2022/04/04/hello-metal-1/" title="hello-metal.1 看到了绿色">hello-metal.1 看到了绿色</a><br><a href="/2022/04/04/hello-metal-2/" title="hello-metal.2 第一个三角形">hello-metal.2 第一个三角形</a><br><a href="/2022/04/04/hello-metal-3/" title="hello-metal.3 四边形">hello-metal.3 四边形</a><br><a href="/2022/04/04/hello-metal-4/" title="hello-metal.4 动画">hello-metal.4 动画</a><br><a href="/2022/04/09/hello-metal-5/" title="hello-metal.5 材质贴图">hello-metal.5 材质贴图</a><hr><div><p>点击查看上一篇 <a href="/2022/04/04/hello-metal-3/" title="hello-metal.3 四边形">hello-metal.3 四边形</a></p><p></div><p>在上一篇已经完成了四边形的绘制，这一篇我们来实现一个简单的动画效果。</p><h2 id="动起来"><a href="#动起来" class="headerlink" title="动起来"></a>动起来</h2><p>现在我们需要增加一个结构体，用来保存画面的偏移，这样每次画面更新的时候，我们都可以使用偏移来控制顶点的坐标，达到动画的效果。</p><h3 id="增加存储数据的结构体"><a href="#增加存储数据的结构体" class="headerlink" title="增加存储数据的结构体"></a>增加存储数据的结构体</h3><p>在 Renderer 中增加一个结构体，用来保存动画的值，增加一个 Float 类型的变量，保存每帧时间。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Constants</span> &#123;<br>    <span class="hljs-keyword">var</span> animateBy: <span class="hljs-type">Float</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">var</span> constants <span class="hljs-operator">=</span> <span class="hljs-type">Constants</span>()<br><span class="hljs-keyword">var</span> time: <span class="hljs-type">Float</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="计算每帧移动的距离"><a href="#计算每帧移动的距离" class="headerlink" title="计算每帧移动的距离"></a>计算每帧移动的距离</h3><p>在 draw 函数中，我们使用画面的最佳刷新率作为累加值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift">time <span class="hljs-operator">+=</span> <span class="hljs-number">1</span> <span class="hljs-operator">/</span> <span class="hljs-type">Float</span>(view.preferredFramesPerSecond)<br><br><span class="hljs-keyword">let</span> animateBy <span class="hljs-operator">=</span> <span class="hljs-built_in">abs</span>(sin(time) <span class="hljs-operator">/</span> <span class="hljs-number">2</span> <span class="hljs-operator">+</span> <span class="hljs-number">0.5</span>)<br>constants.animateBy <span class="hljs-operator">=</span> animateBy<br></code></pre></td></tr></table></figure><h3 id="发送数据到-GPU"><a href="#发送数据到-GPU" class="headerlink" title="发送数据到 GPU"></a>发送数据到 GPU</h3><p>然后我们将结构体放进 GPU 中，MTLCommandEncoder 提供了 setVertexBytes 函数来保存数据。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">commandEncoder<span class="hljs-operator">?</span>.setVertexBytes(<span class="hljs-operator">&amp;</span>constants,<br>                               length: <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">Constants</span>&gt;.stride,<br>                               index: <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>我们为这个数据设置一个索引值 1，这样我们就可以在着色器代码中访问了。</p><h3 id="修改着色器"><a href="#修改着色器" class="headerlink" title="修改着色器"></a>修改着色器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Constants</span> &#123;<br>    <span class="hljs-type">float</span> animateBy;<br>&#125;;<br><br><span class="hljs-function">vertex float4 <span class="hljs-title">vertex_shader</span><span class="hljs-params">(<span class="hljs-type">const</span> device packed_float3 *vertices [[ buffer(<span class="hljs-number">0</span>) ]],</span></span><br><span class="hljs-params"><span class="hljs-function">                            constant Constants &amp;constants [[ buffer(<span class="hljs-number">1</span>) ]],</span></span><br><span class="hljs-params"><span class="hljs-function">                            uint vertexId [[ vertex_id ]])</span> </span>&#123;<br>    float4 position = <span class="hljs-built_in">float4</span>(vertices[vertexId], <span class="hljs-number">1</span>);<br>    position.x += constants.animateBy;<br>    <span class="hljs-keyword">return</span> position;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们只需要在着色器代码中增加一个 struct，保持相同的内存布局，然后在函数参数中使用 <code>constant</code> 修饰结构体和buffer。</p><p><code>const</code> 和 <code>constant</code> 的不同在于，<code>constant</code> 是地址空间，<code>const</code> 是类型限定符。</p><p>现在我们再跑一下，就可以看到一个动画效果了。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?bvid=BV1e34y1x7qz" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Renderer.swift</span><br><span class="hljs-comment">//  HelloMetal</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by lxz on 2022/4/4.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Colors</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> wenderlichGreen <span class="hljs-operator">=</span> <span class="hljs-type">MTLClearColor</span>(red: <span class="hljs-number">0.0</span>,<br>                                               green: <span class="hljs-number">0.4</span>,<br>                                               blue: <span class="hljs-number">0.21</span>,<br>                                               alpha: <span class="hljs-number">1.0</span>)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Renderer</span>: <span class="hljs-title class_">NSObject</span> &#123;<br>    <span class="hljs-keyword">let</span> device: <span class="hljs-type">MTLDevice</span><br>    <span class="hljs-keyword">let</span> commandQueue: <span class="hljs-type">MTLCommandQueue</span><br>    <span class="hljs-keyword">var</span> vertices: [<span class="hljs-type">Float</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-operator">-</span><span class="hljs-number">1</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 左上角</span><br>        <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 左下角</span><br>         <span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 右下角</span><br>         <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 右上角</span><br>    ]<br>    <span class="hljs-keyword">let</span> indices: [<span class="hljs-type">UInt16</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-comment">// 左边的三角形</span><br>        <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>  <span class="hljs-comment">// 右边的三角形</span><br>    ]<br>    <span class="hljs-keyword">var</span> pipelineState: <span class="hljs-type">MTLRenderPipelineState</span>?<br>    <span class="hljs-keyword">var</span> vertexBuffer: <span class="hljs-type">MTLBuffer</span>?<br>    <span class="hljs-keyword">var</span> indexBuffer: <span class="hljs-type">MTLBuffer</span>?<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Constants</span> &#123;<br>        <span class="hljs-keyword">var</span> animateBy: <span class="hljs-type">Float</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> constants <span class="hljs-operator">=</span> <span class="hljs-type">Constants</span>()<br>    <span class="hljs-keyword">var</span> time: <span class="hljs-type">Float</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">device</span>: <span class="hljs-type">MTLDevice</span>) &#123;<br>        <span class="hljs-keyword">self</span>.device <span class="hljs-operator">=</span> device<br>        commandQueue <span class="hljs-operator">=</span> device.makeCommandQueue()<span class="hljs-operator">!</span><br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>()<br>        buildModel()<br>        buildPipelineState()<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildModel</span>() &#123;<br>        vertexBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: vertices,<br>                                         length: vertices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">Float</span>&gt;.size,<br>                                         options: [])<br>        indexBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: indices,<br>                                        length: indices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">UInt16</span>&gt;.size,<br>                                        options: [])<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildPipelineState</span>() &#123;<br>        <span class="hljs-keyword">let</span> library <span class="hljs-operator">=</span> device.makeDefaultLibrary()<br>        <span class="hljs-keyword">let</span> vertexFunction <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;vertex_shader&quot;</span>)<br>        <span class="hljs-keyword">let</span> fragmentFunction <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;fragment_shader&quot;</span>)<br><br>        <span class="hljs-keyword">let</span> pipelineDescriptor <span class="hljs-operator">=</span> <span class="hljs-type">MTLRenderPipelineDescriptor</span>()<br>        pipelineDescriptor.vertexFunction <span class="hljs-operator">=</span> vertexFunction<br>        pipelineDescriptor.fragmentFunction <span class="hljs-operator">=</span> fragmentFunction<br>        pipelineDescriptor.colorAttachments[<span class="hljs-number">0</span>].pixelFormat <span class="hljs-operator">=</span> .bgra8Unorm<br><br>        <span class="hljs-keyword">do</span> &#123;<br>            pipelineState <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> device.makeRenderPipelineState(descriptor: pipelineDescriptor)<br>        &#125; <span class="hljs-keyword">catch</span> <span class="hljs-keyword">let</span> error <span class="hljs-keyword">as</span> <span class="hljs-type">NSError</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: <span class="hljs-subst">\(error.localizedDescription)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Renderer</span>: <span class="hljs-title class_">MTKViewDelegate</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">mtkView</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">view</span>: <span class="hljs-type">MTKView</span>, <span class="hljs-params">drawableSizeWillChange</span> <span class="hljs-params">size</span>: <span class="hljs-type">CGSize</span>) &#123;<br>    &#125;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">in</span> <span class="hljs-params">view</span>: <span class="hljs-type">MTKView</span>) &#123;<br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> drawable <span class="hljs-operator">=</span> view.currentDrawable,<br>              <span class="hljs-keyword">let</span> pipelineState <span class="hljs-operator">=</span> pipelineState,<br>              <span class="hljs-keyword">let</span> indexBuffer <span class="hljs-operator">=</span> indexBuffer,<br>              <span class="hljs-keyword">let</span> descriptor <span class="hljs-operator">=</span> view.currentRenderPassDescriptor<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>        time <span class="hljs-operator">+=</span> <span class="hljs-number">1</span> <span class="hljs-operator">/</span> <span class="hljs-type">Float</span>(view.preferredFramesPerSecond)<br><br>        <span class="hljs-keyword">let</span> animateBy <span class="hljs-operator">=</span> <span class="hljs-built_in">abs</span>(sin(time) <span class="hljs-operator">/</span> <span class="hljs-number">2</span> <span class="hljs-operator">+</span> <span class="hljs-number">0.5</span>)<br>        constants.animateBy <span class="hljs-operator">=</span> animateBy<br><br>        <span class="hljs-keyword">let</span> commandBuffer <span class="hljs-operator">=</span> commandQueue.makeCommandBuffer()<br>        <span class="hljs-keyword">let</span> commandEncoder <span class="hljs-operator">=</span> commandBuffer<span class="hljs-operator">?</span>.makeRenderCommandEncoder(descriptor: view.currentRenderPassDescriptor<span class="hljs-operator">!</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.setRenderPipelineState(pipelineState)<br>        commandEncoder<span class="hljs-operator">?</span>.setVertexBuffer(vertexBuffer,<br>                                        offset: <span class="hljs-number">0</span>,<br>                                        index: <span class="hljs-number">0</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.setVertexBytes(<span class="hljs-operator">&amp;</span>constants,<br>                                       length: <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">Constants</span>&gt;.stride,<br>                                       index: <span class="hljs-number">1</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.drawIndexedPrimitives(type: .triangle,<br>                                              indexCount: indices.count,<br>                                              indexType: .uint16,<br>                                              indexBuffer: indexBuffer,<br>                                              indexBufferOffset: <span class="hljs-number">0</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.endEncoding()<br>        commandBuffer<span class="hljs-operator">?</span>.present(view.currentDrawable<span class="hljs-operator">!</span>)<br>        commandBuffer<span class="hljs-operator">?</span>.commit()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Shader.metal</span><br><span class="hljs-comment">//  HelloMetal</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by lxz on 2022/4/4.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;metal_stdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> metal;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Constants</span> &#123;<br>    <span class="hljs-type">float</span> animateBy;<br>&#125;;<br><br><span class="hljs-function">vertex float4 <span class="hljs-title">vertex_shader</span><span class="hljs-params">(<span class="hljs-type">const</span> device packed_float3 *vertices [[ buffer(<span class="hljs-number">0</span>) ]],</span></span><br><span class="hljs-params"><span class="hljs-function">                            constant Constants &amp;constants [[ buffer(<span class="hljs-number">1</span>) ]],</span></span><br><span class="hljs-params"><span class="hljs-function">                            uint vertexId [[ vertex_id ]])</span> </span>&#123;<br>    float4 position = <span class="hljs-built_in">float4</span>(vertices[vertexId], <span class="hljs-number">1</span>);<br>    position.x += constants.animateBy;<br>    <span class="hljs-keyword">return</span> position;<br>&#125;<br><br><span class="hljs-function">fragment half4 <span class="hljs-title">fragment_shader</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">half4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  ViewController.swift</span><br><span class="hljs-comment">//  HelloMetal</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by lxz on 2022/4/4.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <span class="hljs-keyword">var</span> metalView: <span class="hljs-type">MTKView</span> &#123;<br>        <span class="hljs-keyword">return</span> view <span class="hljs-keyword">as!</span> <span class="hljs-type">MTKView</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> renderer: <span class="hljs-type">Renderer</span>!<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        metalView.device <span class="hljs-operator">=</span> <span class="hljs-type">MTLCreateSystemDefaultDevice</span>()<br>        metalView.clearColor <span class="hljs-operator">=</span> <span class="hljs-type">Colors</span>.wenderlichGreen<br>        renderer <span class="hljs-operator">=</span> <span class="hljs-type">Renderer</span>(device: metalView.device<span class="hljs-operator">!</span>)<br>        metalView.delegate <span class="hljs-operator">=</span> renderer<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。&lt;/p&gt;
&lt;p&gt;目前系列有:&lt;/p&gt;
&lt;a href=&quot;/2022/04/04/hello-metal-1/&quot; title=&quot;hello-metal.1 看到了绿色&quot;&gt;</summary>
      
    
    
    
    <category term="HelloMetal系列" scheme="https://blog.justforlxz.com/categories/HelloMetal%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Metal" scheme="https://blog.justforlxz.com/tags/Metal/"/>
    
    <category term="GameEngine" scheme="https://blog.justforlxz.com/tags/GameEngine/"/>
    
  </entry>
  
  <entry>
    <title>hello-metal.3 四边形</title>
    <link href="https://blog.justforlxz.com/2022/04/04/hello-metal-3/"/>
    <id>https://blog.justforlxz.com/2022/04/04/hello-metal-3/</id>
    <published>2022-04-04T05:05:40.000Z</published>
    <updated>2023-02-01T06:35:51.186Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。</p><p>目前系列有:</p><a href="/2022/04/04/hello-metal-1/" title="hello-metal.1 看到了绿色">hello-metal.1 看到了绿色</a><br><a href="/2022/04/04/hello-metal-2/" title="hello-metal.2 第一个三角形">hello-metal.2 第一个三角形</a><br><a href="/2022/04/04/hello-metal-3/" title="hello-metal.3 四边形">hello-metal.3 四边形</a><br><a href="/2022/04/04/hello-metal-4/" title="hello-metal.4 动画">hello-metal.4 动画</a><br><a href="/2022/04/09/hello-metal-5/" title="hello-metal.5 材质贴图">hello-metal.5 材质贴图</a><hr><div><p>点击查看上一篇 <a href="/2022/04/04/hello-metal-2/" title="hello-metal.2 第一个三角形">hello-metal.2 第一个三角形</a></p><p></div><p>上一篇文章其实已经把基础内容讲完了，我们已经把绘制的流程走通了，这篇文章会说一下如何绘制一个四边形。</p><h2 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h2><p>首先我们需要稍微重构一下代码，现在的代码都耦合在一个函数里，这对我们非常的不好，我们抽出来一个 Renderer 的文件，专门存放绘制代码。</p><p>首先基于 NSObject 派生出 Renderer 类，将各种成员变量都转移到这里，并在在构造函数接受最重要的 MTLDevice 对象。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Renderer.swift</span><br><span class="hljs-comment">//  HelloMetal</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by lxz on 2022/4/4.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Colors</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> wenderlichGreen <span class="hljs-operator">=</span> <span class="hljs-type">MTLClearColor</span>(red: <span class="hljs-number">0.0</span>,<br>                                               green: <span class="hljs-number">0.4</span>,<br>                                               blue: <span class="hljs-number">0.21</span>,<br>                                               alpha: <span class="hljs-number">1.0</span>)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Renderer</span>: <span class="hljs-title class_">NSObject</span> &#123;<br>    <span class="hljs-keyword">let</span> device: <span class="hljs-type">MTLDevice</span><br>    <span class="hljs-keyword">let</span> commandQueue: <span class="hljs-type">MTLCommandQueue</span><br>    <span class="hljs-keyword">var</span> vertices: [<span class="hljs-type">Float</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>       <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>        <span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    ]<br>    <span class="hljs-keyword">var</span> pipelineState: <span class="hljs-type">MTLRenderPipelineState</span>?<br>    <span class="hljs-keyword">var</span> vertexBuffer: <span class="hljs-type">MTLBuffer</span>?<br><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">device</span>: <span class="hljs-type">MTLDevice</span>) &#123;<br>        <span class="hljs-keyword">self</span>.device <span class="hljs-operator">=</span> device<br>        commandQueue <span class="hljs-operator">=</span> device.makeCommandQueue()<span class="hljs-operator">!</span><br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>()<br>        buildModel()<br>        buildPipelineState()<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildModel</span>() &#123;<br>        vertexBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: vertices,<br>                                         length: vertices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">Float</span>&gt;.size,<br>                                         options: [])<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildPipelineState</span>() &#123;<br>        <span class="hljs-keyword">let</span> library <span class="hljs-operator">=</span> device.makeDefaultLibrary()<br>        <span class="hljs-keyword">let</span> vertexFunction <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;vertex_shader&quot;</span>)<br>        <span class="hljs-keyword">let</span> fragmentFunction <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;fragment_shader&quot;</span>)<br><br>        <span class="hljs-keyword">let</span> pipelineDescriptor <span class="hljs-operator">=</span> <span class="hljs-type">MTLRenderPipelineDescriptor</span>()<br>        pipelineDescriptor.vertexFunction <span class="hljs-operator">=</span> vertexFunction<br>        pipelineDescriptor.fragmentFunction <span class="hljs-operator">=</span> fragmentFunction<br>        pipelineDescriptor.colorAttachments[<span class="hljs-number">0</span>].pixelFormat <span class="hljs-operator">=</span> .bgra8Unorm<br><br>        <span class="hljs-keyword">do</span> &#123;<br>            pipelineState <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> device.makeRenderPipelineState(descriptor: pipelineDescriptor)<br>        &#125; <span class="hljs-keyword">catch</span> <span class="hljs-keyword">let</span> error <span class="hljs-keyword">as</span> <span class="hljs-type">NSError</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: <span class="hljs-subst">\(error.localizedDescription)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们把所有的代码都转移到新的类中，只需要在 ViewController 中保留 Renderer 对象就可以了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  ViewController.swift</span><br><span class="hljs-comment">//  HelloMetal</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by lxz on 2022/4/4.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <span class="hljs-keyword">var</span> metalView: <span class="hljs-type">MTKView</span> &#123;<br>        <span class="hljs-keyword">return</span> view <span class="hljs-keyword">as!</span> <span class="hljs-type">MTKView</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> renderer: <span class="hljs-type">Renderer</span>!<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        metalView.device <span class="hljs-operator">=</span> <span class="hljs-type">MTLCreateSystemDefaultDevice</span>()<br>        metalView.clearColor <span class="hljs-operator">=</span> <span class="hljs-type">Colors</span>.wenderlichGreen<br>        renderer <span class="hljs-operator">=</span> <span class="hljs-type">Renderer</span>(device: metalView.device<span class="hljs-operator">!</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>metalView 支持 delegate，我们可以让 Renderer 派生自 MTKViewDelegate，就可以将原本绘制三角形部分的代码转移到 draw 函数中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Renderer</span>: <span class="hljs-title class_">MTKViewDelegate</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">mtkView</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">view</span>: <span class="hljs-type">MTKView</span>, <span class="hljs-params">drawableSizeWillChange</span> <span class="hljs-params">size</span>: <span class="hljs-type">CGSize</span>) &#123;<br>    &#125;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">in</span> <span class="hljs-params">view</span>: <span class="hljs-type">MTKView</span>) &#123;<br>        <span class="hljs-keyword">let</span> commandBuffer <span class="hljs-operator">=</span> commandQueue.makeCommandBuffer()<br>        <span class="hljs-keyword">let</span> commandEncoder <span class="hljs-operator">=</span> commandBuffer<span class="hljs-operator">?</span>.makeRenderCommandEncoder(descriptor: view.currentRenderPassDescriptor<span class="hljs-operator">!</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.setRenderPipelineState(pipelineState<span class="hljs-operator">!</span>)<br>        commandEncoder<span class="hljs-operator">?</span>.setVertexBuffer(vertexBuffer,<br>                                        offset: <span class="hljs-number">0</span>,<br>                                        index: <span class="hljs-number">0</span>)<br>        commandEncoder<span class="hljs-operator">?</span>.drawPrimitives(type: .triangle,<br>                                       vertexStart: <span class="hljs-number">0</span>,<br>                                       vertexCount: vertices.count)<br><br>        commandEncoder<span class="hljs-operator">?</span>.endEncoding()<br>        commandBuffer<span class="hljs-operator">?</span>.present(view.currentDrawable<span class="hljs-operator">!</span>)<br>        commandBuffer<span class="hljs-operator">?</span>.commit()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到 ViewController.swift 中，我们需要在 viewDidLoad 函数中将 metalView 的 delegate 设置为 renderer。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">metalView.delegate <span class="hljs-operator">=</span> renderer<br></code></pre></td></tr></table></figure><p>swift 提供一个 guard 的语法，可以方便的进行一些检查，可以把 draw 里一定存在的变量统一检查，如果任何一个不存在，都会运行到 else 中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> drawable <span class="hljs-operator">=</span> view.currentDrawable,<br>      <span class="hljs-keyword">let</span> pipelineState <span class="hljs-operator">=</span> pipelineState,<br>      <span class="hljs-keyword">let</span> descriptor <span class="hljs-operator">=</span> view.currentRenderPassDescriptor<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="顶点索引"><a href="#顶点索引" class="headerlink" title="顶点索引"></a>顶点索引</h2><p>在上一篇讲过，顶点数组需要处理成顶点缓冲区，如果我们准备画一个四边形，正常来说我们需要准备两份三角形的坐标，但是！注意了，但是啊！由于两个三角形的斜边其实是同一条，那么意味着两个三角形的两个顶点，其实坐标是一样的，他们是重复的，如果我们完整的发送了全部顶点信息，虽然可以正常使用，但是数据量比较大的时候，就会浪费更多的资源。</p><p>一个模型通常由上万个三角形组成，每两个三角形都会浪费两个顶点，那么浪费掉的空间就不能忽略了，所以 Metal、OpenGL 这些 API 都提供了顶点索引功能，我们只需要发送顶点的坐标，然后使用顶点索引将点联系起来，这样就不用发送重复的顶点信息，只需要告诉 GPU，嘿老兄，这个点又被我用了，麻烦你读取一下吧。</p><p>我们将顶点数组换成这样的数据:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> vertices: [<span class="hljs-type">Float</span>] <span class="hljs-operator">=</span> [<br>    <span class="hljs-operator">-</span><span class="hljs-number">1</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 左上角</span><br>    <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 左下角</span><br>     <span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 右下角</span><br>     <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 右上角</span><br>]<br></code></pre></td></tr></table></figure><p>我们创建一个 indices，用来保存顶点索引，同样是三位一组，一共两组，使用了顶点数组中的三组坐标信息。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> indices: [<span class="hljs-type">UInt16</span>] <span class="hljs-operator">=</span> [<br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-comment">// 左边的三角形</span><br>    <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>  <span class="hljs-comment">// 右边的三角形</span><br>]<br></code></pre></td></tr></table></figure><p>同样的，我们还需要使用一个 MTLBuffer 保存顶点索引缓存。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> indexBuffer: <span class="hljs-type">MTLBuffer</span>?<br></code></pre></td></tr></table></figure><p>在 buildModel 函数里初始化顶点索引缓存。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">indexBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: indices,<br>                                length: indices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">UInt16</span>&gt;.size,<br>                                options: [])<br></code></pre></td></tr></table></figure><h2 id="绘制四边形"><a href="#绘制四边形" class="headerlink" title="绘制四边形"></a>绘制四边形</h2><p>我们已经有顶点缓冲了，也有顶点索引缓冲，可以去试一下了。</p><p>在 guard 中赋值一下，保证它不为空。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> drawable <span class="hljs-operator">=</span> view.currentDrawable,<br>      <span class="hljs-keyword">let</span> pipelineState <span class="hljs-operator">=</span> pipelineState,<br>      <span class="hljs-keyword">let</span> indexBuffer <span class="hljs-operator">=</span> indexBuffer,<br>      <span class="hljs-keyword">let</span> descriptor <span class="hljs-operator">=</span> view.currentRenderPassDescriptor<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就是比较重要的部分了，我们要如何使用顶点索引呢？</p><p>MTLCommandEncoder 有一个 drawIndexedPrimitives 函数，可以接受顶点索引缓冲。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift">commandEncoder<span class="hljs-operator">?</span>.drawIndexedPrimitives(type: .triangle,<br>                                      indexCount: indices.count,<br>                                      indexType: .uint16,<br>                                      indexBuffer: indexBuffer,<br>                                      indexBufferOffset: <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>让我们运行一下吧！</p><img src="/2022/04/04/hello-metal-3/2022-04-04_14.22.06.png" class=""><p>非常棒，我们看到整个屏幕都是红色了。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Renderer.swift</span><br><span class="hljs-comment">//  HelloMetal</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by lxz on 2022/4/4.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Colors</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> wenderlichGreen <span class="hljs-operator">=</span> <span class="hljs-type">MTLClearColor</span>(red: <span class="hljs-number">0.0</span>,<br>                                               green: <span class="hljs-number">0.4</span>,<br>                                               blue: <span class="hljs-number">0.21</span>,<br>                                               alpha: <span class="hljs-number">1.0</span>)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Renderer</span>: <span class="hljs-title class_">NSObject</span> &#123;<br>    <span class="hljs-keyword">let</span> device: <span class="hljs-type">MTLDevice</span><br>    <span class="hljs-keyword">let</span> commandQueue: <span class="hljs-type">MTLCommandQueue</span><br>    <span class="hljs-keyword">var</span> vertices: [<span class="hljs-type">Float</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-operator">-</span><span class="hljs-number">1</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 左上角</span><br>        <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 左下角</span><br>         <span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 右下角</span><br>         <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">// 右上角</span><br>    ]<br>    <span class="hljs-keyword">let</span> indices: [<span class="hljs-type">UInt16</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-comment">// 左边的三角形</span><br>        <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>  <span class="hljs-comment">// 右边的三角形</span><br>    ]<br>    <span class="hljs-keyword">var</span> pipelineState: <span class="hljs-type">MTLRenderPipelineState</span>?<br>    <span class="hljs-keyword">var</span> vertexBuffer: <span class="hljs-type">MTLBuffer</span>?<br>    <span class="hljs-keyword">var</span> indexBuffer: <span class="hljs-type">MTLBuffer</span>?<br><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">device</span>: <span class="hljs-type">MTLDevice</span>) &#123;<br>        <span class="hljs-keyword">self</span>.device <span class="hljs-operator">=</span> device<br>        commandQueue <span class="hljs-operator">=</span> device.makeCommandQueue()<span class="hljs-operator">!</span><br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>()<br>        buildModel()<br>        buildPipelineState()<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildModel</span>() &#123;<br>        vertexBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: vertices,<br>                                         length: vertices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">Float</span>&gt;.size,<br>                                         options: [])<br>        indexBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: indices,<br>                                        length: indices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">UInt16</span>&gt;.size,<br>                                        options: [])<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildPipelineState</span>() &#123;<br>        <span class="hljs-keyword">let</span> library <span class="hljs-operator">=</span> device.makeDefaultLibrary()<br>        <span class="hljs-keyword">let</span> vertexFunction <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;vertex_shader&quot;</span>)<br>        <span class="hljs-keyword">let</span> fragmentFunction <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;fragment_shader&quot;</span>)<br><br>        <span class="hljs-keyword">let</span> pipelineDescriptor <span class="hljs-operator">=</span> <span class="hljs-type">MTLRenderPipelineDescriptor</span>()<br>        pipelineDescriptor.vertexFunction <span class="hljs-operator">=</span> vertexFunction<br>        pipelineDescriptor.fragmentFunction <span class="hljs-operator">=</span> fragmentFunction<br>        pipelineDescriptor.colorAttachments[<span class="hljs-number">0</span>].pixelFormat <span class="hljs-operator">=</span> .bgra8Unorm<br><br>        <span class="hljs-keyword">do</span> &#123;<br>            pipelineState <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> device.makeRenderPipelineState(descriptor: pipelineDescriptor)<br>        &#125; <span class="hljs-keyword">catch</span> <span class="hljs-keyword">let</span> error <span class="hljs-keyword">as</span> <span class="hljs-type">NSError</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: <span class="hljs-subst">\(error.localizedDescription)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Renderer</span>: <span class="hljs-title class_">MTKViewDelegate</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">mtkView</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">view</span>: <span class="hljs-type">MTKView</span>, <span class="hljs-params">drawableSizeWillChange</span> <span class="hljs-params">size</span>: <span class="hljs-type">CGSize</span>) &#123;<br>    &#125;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">in</span> <span class="hljs-params">view</span>: <span class="hljs-type">MTKView</span>) &#123;<br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> drawable <span class="hljs-operator">=</span> view.currentDrawable,<br>              <span class="hljs-keyword">let</span> pipelineState <span class="hljs-operator">=</span> pipelineState,<br>              <span class="hljs-keyword">let</span> indexBuffer <span class="hljs-operator">=</span> indexBuffer,<br>              <span class="hljs-keyword">let</span> descriptor <span class="hljs-operator">=</span> view.currentRenderPassDescriptor<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>        <span class="hljs-keyword">let</span> commandBuffer <span class="hljs-operator">=</span> commandQueue.makeCommandBuffer()<br>        <span class="hljs-keyword">let</span> commandEncoder <span class="hljs-operator">=</span> commandBuffer<span class="hljs-operator">?</span>.makeRenderCommandEncoder(descriptor: view.currentRenderPassDescriptor<span class="hljs-operator">!</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.setRenderPipelineState(pipelineState)<br>        commandEncoder<span class="hljs-operator">?</span>.setVertexBuffer(vertexBuffer,<br>                                        offset: <span class="hljs-number">0</span>,<br>                                        index: <span class="hljs-number">0</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.drawIndexedPrimitives(type: .triangle,<br>                                              indexCount: indices.count,<br>                                              indexType: .uint16,<br>                                              indexBuffer: indexBuffer,<br>                                              indexBufferOffset: <span class="hljs-number">0</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.endEncoding()<br>        commandBuffer<span class="hljs-operator">?</span>.present(view.currentDrawable<span class="hljs-operator">!</span>)<br>        commandBuffer<span class="hljs-operator">?</span>.commit()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Shader.metal</span><br><span class="hljs-comment">//  HelloMetal</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by lxz on 2022/4/4.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;metal_stdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> metal;<br><br><span class="hljs-function">vertex float4 <span class="hljs-title">vertex_shader</span><span class="hljs-params">(<span class="hljs-type">const</span> device packed_float3 *vertices [[ buffer(<span class="hljs-number">0</span>) ]],</span></span><br><span class="hljs-params"><span class="hljs-function">                            uint vertexId [[ vertex_id ]])</span> </span>&#123;<br>    float4 position = <span class="hljs-built_in">float4</span>(vertices[vertexId], <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> position;<br>&#125;<br><br><span class="hljs-function">fragment half4 <span class="hljs-title">fragment_shader</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">half4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  ViewController.swift</span><br><span class="hljs-comment">//  HelloMetal</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by lxz on 2022/4/4.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <span class="hljs-keyword">var</span> metalView: <span class="hljs-type">MTKView</span> &#123;<br>        <span class="hljs-keyword">return</span> view <span class="hljs-keyword">as!</span> <span class="hljs-type">MTKView</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> renderer: <span class="hljs-type">Renderer</span>!<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        metalView.device <span class="hljs-operator">=</span> <span class="hljs-type">MTLCreateSystemDefaultDevice</span>()<br>        metalView.clearColor <span class="hljs-operator">=</span> <span class="hljs-type">Colors</span>.wenderlichGreen<br>        renderer <span class="hljs-operator">=</span> <span class="hljs-type">Renderer</span>(device: metalView.device<span class="hljs-operator">!</span>)<br>        metalView.delegate <span class="hljs-operator">=</span> renderer<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。&lt;/p&gt;
&lt;p&gt;目前系列有:&lt;/p&gt;
&lt;a href=&quot;/2022/04/04/hello-metal-1/&quot; title=&quot;hello-metal.1 看到了绿色&quot;&gt;</summary>
      
    
    
    
    <category term="HelloMetal系列" scheme="https://blog.justforlxz.com/categories/HelloMetal%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Metal" scheme="https://blog.justforlxz.com/tags/Metal/"/>
    
    <category term="GameEngine" scheme="https://blog.justforlxz.com/tags/GameEngine/"/>
    
  </entry>
  
  <entry>
    <title>hello-metal.2 第一个三角形</title>
    <link href="https://blog.justforlxz.com/2022/04/04/hello-metal-2/"/>
    <id>https://blog.justforlxz.com/2022/04/04/hello-metal-2/</id>
    <published>2022-04-04T02:05:43.000Z</published>
    <updated>2023-02-01T06:35:51.178Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。</p><p>目前系列有:</p><a href="/2022/04/04/hello-metal-1/" title="hello-metal.1 看到了绿色">hello-metal.1 看到了绿色</a><br><a href="/2022/04/04/hello-metal-2/" title="hello-metal.2 第一个三角形">hello-metal.2 第一个三角形</a><br><a href="/2022/04/04/hello-metal-3/" title="hello-metal.3 四边形">hello-metal.3 四边形</a><br><a href="/2022/04/04/hello-metal-4/" title="hello-metal.4 动画">hello-metal.4 动画</a><br><a href="/2022/04/09/hello-metal-5/" title="hello-metal.5 材质贴图">hello-metal.5 材质贴图</a><hr><p>今天听到了一句话，觉得很有道(ji)理(tang):</p><blockquote><p><strong>你所谓的顿悟，可能是别人的基本功</strong></p></blockquote><p>自勉!</p><div><p>点击查看上一篇 <a href="/2022/04/04/hello-metal-1/" title="hello-metal.1 看到了绿色">hello-metal.1 看到了绿色</a></p><p></div><p>接上文，我们已经成功的提交了渲染命令到管线中，成功得到了渲染结果，所以我们需要开始写着色器代码，完成我们的第一个三角形，接下来让我们继续吧！</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>Metal 的着色器语言是基于 C++ 11 的语言，对我来说比 OpenGL 的着色器语言更加熟悉。</p><p>但是需要注意的是</p><ul><li>Metal 中不支持 C++11 的如下特性：<ul><li>Lambda 表达式</li><li>递归函数调用</li><li>动态转换操作符</li><li>类型识别</li><li>对象创建 new 和销毁 delete 操作符</li><li>操作符 noexcept</li><li>goto</li><li>变量存储修饰符 register 和 thread_local</li><li>虚函数修饰符</li><li>派生类</li><li>异常处理</li></ul></li><li>C++ 标准库在 Metal 语言中也不可使用</li><li>Metal 语言对于指针使用的限制</li><li>Metal 图形和并行计算函数用到的入参（比如指针 &#x2F; 引用），如果是指针 &#x2F; 引用必须使用地址空间修饰符（比如 device、threadgroup、constant）</li><li>不支持函数指针</li><li>函数名不能出现 main</li></ul><h2 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h2><p>在 xcode 左侧对着 ViewController.swift 右键，选择 New File，新建 Metal File，起名为 Shader 就可以创建一个着色器文件。</p><img src="/2022/04/04/hello-metal-2/2022-04-04_10.11.25.png" class=""><p>xcode 会帮助我们自动生成一部分代码，比如默认帮助我们 include 了 metal_stdlib。</p><h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><p>我们首先新建一个 vertex_shader 的函数，让顶点着色器去执行这个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs metal">vertex float4 vertex_shader(const device packed_float3 *vertices [[ buffer(0) ]],<br>                           uint vertexId [[ vertex_id ]]) &#123;<br>    float4 position = float4(vertices[vertexId], 1);<br>    return position;<br>&#125;<br></code></pre></td></tr></table></figure><p>熟悉 OpenGL 或者其他 GPU 编程的人应该很熟悉，float4 就是一个向量。在参数中的 <code>[[ buffer(0) ]]</code>，是在代码部分设置的顶点缓冲区 id，<code>[[ vertex_id ]]</code> 顶点id 标识符。</p><h3 id="片元着色器"><a href="#片元着色器" class="headerlink" title="片元着色器"></a>片元着色器</h3><p>除了顶点着色器函数，我们还需要准备一个片元着色器函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs metal">fragment half4 fragment_shader() &#123;<br>    return half4(1, 0, 0, 1);<br>&#125;<br></code></pre></td></tr></table></figure><p>啊这，half4 是个什么玩意儿。</p><p>查了一波 Apple 的文档，发现 half 是 16位的浮点数，所以这里其实我们用 float4 也是可以的，<strong>虽说是跟着教程跑，但是也要理解一下为什么要这么用</strong>。</p><p>片元着色器代码其实就返回了一个红色，没有任何的参数，所以当我们成功运行以后，我们应该看到红色。</p><h2 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h2><p>已经完成了基本的着色器代码，那么就可以开始使用它了。回到 ViewController.swift，我们首先需要创建一个顶点数组，我们依赖这些顶点信息去构建空间中，以三角形为基本的面。</p><h3 id="顶点数组"><a href="#顶点数组" class="headerlink" title="顶点数组"></a>顶点数组</h3><p>新增一个变量，用来保存顶点数组:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> vertices: [<span class="hljs-type">Float</span>] <span class="hljs-operator">=</span> [<br>    <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>   <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>    <span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>]<br></code></pre></td></tr></table></figure><p>我们都知道，三个点可以形成一个面，形成的就是三角形，在计算机中使用顶点 vertex 来保存空间信息，并且顶点不仅仅是用来保存坐标的，还可以保存其他信息，比如某个点的颜色，某个点的法线等等。</p><p>由于空间是三维空间，所以我们将 Z 轴都设置为 0，这样三角形就只需要关心 X 轴和 Y 轴了。</p><p>但是需要注意的是，此时我们的顶点信息，还只是没有意义的点，甚至连点都算不上，因为我们还没有“规定”它是什么。</p><h3 id="顶点缓冲区"><a href="#顶点缓冲区" class="headerlink" title="顶点缓冲区"></a>顶点缓冲区</h3><p>我们需要创建一个 MTLBuffer 对象来保存顶点缓冲区，只有经过处理的顶点缓冲区才是我们需要的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> vertexBuffer: <span class="hljs-type">MTLBuffer</span>?<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildModel</span>() &#123;<br>  vertexBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: vertices,<br>                                    length: vertices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">Float</span>&gt;.size,<br>                                    options: [])<br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便使用 device 对象，增加一个变量来保存初始化的 device。在 viewDidLoad 函数中调用 buildModel，初始化顶点缓冲区。</p><h3 id="PipelineState"><a href="#PipelineState" class="headerlink" title="PipelineState"></a>PipelineState</h3><p>为了使用 MTLRenderCommandEncoder 对象来编码渲染指令，必须先设置一个 MTLRenderPipelineState 对象来定义每个绘制命令的图形状态。</p><p>一个渲染管线 state 对象是一个拥有长生命周期的对象，它可以在 render command encoder 对象生效范围外被创建，最后可以被缓存起来，然后被重用于多个 render command encoder 对象。当描述相同的图形状态，重用先前创建的渲染管线 state 对象，这样可以避免高成本的重新评估和转换操作（将特定状态转换成 GPU 指令）。</p><p>渲染管线 state 对象是一个不可变对象。要创建一个渲染管线 state 对象，首先创建一个可变的 MTLRenderPipelineDescriptor 对象，它描述了渲染管线 state 的属性。然后你可以使用这个 descriptor 来创建一个 MTLRenderPipelineState 对象。</p><p>我们新增一个函数用来初始化 MTLRenderPipelineState。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> pipelineState: <span class="hljs-type">MTLRenderPipelineState</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildPipelineState</span>() &#123;<br>    <span class="hljs-keyword">let</span> library            <span class="hljs-operator">=</span> device.makeDefaultLibrary()<br>    <span class="hljs-keyword">let</span> vertexFunction     <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;vertex_shader&quot;</span>)<br>    <span class="hljs-keyword">let</span> fragmentFunction   <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;fragment_shader&quot;</span>)<br>    <span class="hljs-keyword">let</span> pipelineDescriptor <span class="hljs-operator">=</span> <span class="hljs-type">MTLRenderPipelineDescriptor</span>()<br><br>    pipelineDescriptor.vertexFunction                  <span class="hljs-operator">=</span> vertexFunction<br>    pipelineDescriptor.fragmentFunction                <span class="hljs-operator">=</span> fragmentFunction<br>    pipelineDescriptor.colorAttachments[<span class="hljs-number">0</span>].pixelFormat <span class="hljs-operator">=</span> .bgra8Unorm<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        pipelineState <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> device.makeRenderPipelineState(descriptor: pipelineDescriptor)<br>    &#125; <span class="hljs-keyword">catch</span> <span class="hljs-keyword">let</span> error <span class="hljs-keyword">as</span> <span class="hljs-type">NSError</span> &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: <span class="hljs-subst">\(error.localizedDescription)</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 device.makeDefaultLibrary() 可以创建一个 library 对象，用来获取上面创建的着色器函数，Metal 会在项目编译时就完成着色器编译，这点和 OpenGL 是不同的。</p><p>我们只需要为 MTLRenderPipelineDescriptor 设置顶点着色器函数、片元着色器函数和颜色格式就行了。</p><p>最后在 viewDidLoad 中调用该函数即可。</p><h3 id="绘制三角形"><a href="#绘制三角形" class="headerlink" title="绘制三角形"></a>绘制三角形</h3><p>准备工作已经接近尾声了，我们现在可以向 commandEncoder 中编码命令了。</p><ul><li>为 commandEncoder 设置 pipelineState</li><li>为 commandEncoder 设置 vertexBuffer</li><li>为 commandEncoder 设置 绘制三角形命令</li></ul><p>在 commandEncoder?.endEncoding() 前插入代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">commandEncoder<span class="hljs-operator">?</span>.setRenderPipelineState(pipelineState)<br>commandEncoder<span class="hljs-operator">?</span>.setVertexBuffer(vertexBuffer,<br>                                offset: <span class="hljs-number">0</span>,<br>                                index: <span class="hljs-number">0</span>)<br>commandEncoder<span class="hljs-operator">?</span>.drawPrimitives(type: .triangle,<br>                                vertexStart: <span class="hljs-number">0</span>,<br>                                vertexCount: vertices.count)<br></code></pre></td></tr></table></figure><p>setVertexBuffer 函数的 index 参数就是着色器中，vertex_shader 参数的 <code>[[ buffer(0) ]]</code>，我们没有设置偏移，那么坐标信息就是从 0 开始读取。</p><p>这里提一下为什么会有 offset，有时候我们会准备一份顶点信息，只需要送一次给 GPU，不同的着色器可以通过 offset 读取同一份顶点缓冲，只需要按偏移使用就可以了。</p><p>drawPrimitives 函数是告诉 GPU，嘿哥们，我给你的顶点是用来画三角形的，请你三个一组的使用。</p><p>最终我们成功的绘制了一个红色的三角形。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="ViewController"><a href="#ViewController" class="headerlink" title="ViewController"></a>ViewController</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  ViewController.swift</span><br><span class="hljs-comment">//  HelloMetal</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by lxz on 2022/4/4.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Colors</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> wenderlichGreen <span class="hljs-operator">=</span> <span class="hljs-type">MTLClearColor</span>(red: <span class="hljs-number">0.0</span>,<br>                                               green: <span class="hljs-number">0.4</span>,<br>                                               blue: <span class="hljs-number">0.21</span>,<br>                                               alpha: <span class="hljs-number">1.0</span>)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <span class="hljs-keyword">var</span> metalView: <span class="hljs-type">MTKView</span> &#123;<br>        <span class="hljs-keyword">return</span> view <span class="hljs-keyword">as!</span> <span class="hljs-type">MTKView</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> commandQueue: <span class="hljs-type">MTLCommandQueue</span>!<br>    <span class="hljs-keyword">var</span> device: <span class="hljs-type">MTLDevice</span>!<br>    <span class="hljs-keyword">var</span> vertexBuffer: <span class="hljs-type">MTLBuffer</span>?<br>    <span class="hljs-keyword">var</span> vertices: [<span class="hljs-type">Float</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>       <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>        <span class="hljs-number">1</span>, <span class="hljs-operator">-</span><span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    ]<br>    <span class="hljs-keyword">var</span> pipelineState: <span class="hljs-type">MTLRenderPipelineState</span>!<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        device <span class="hljs-operator">=</span> <span class="hljs-type">MTLCreateSystemDefaultDevice</span>()<br>        metalView.device <span class="hljs-operator">=</span> device<br>        metalView.clearColor <span class="hljs-operator">=</span> <span class="hljs-type">Colors</span>.wenderlichGreen<br>        commandQueue <span class="hljs-operator">=</span> device.makeCommandQueue()<br><br>        buildModel()<br>        buildPipelineState()<br><br>        <span class="hljs-keyword">let</span> commandBuffer <span class="hljs-operator">=</span> commandQueue.makeCommandBuffer()<br>        <span class="hljs-keyword">let</span> commandEncoder <span class="hljs-operator">=</span> commandBuffer<span class="hljs-operator">?</span>.makeRenderCommandEncoder(descriptor: metalView.currentRenderPassDescriptor<span class="hljs-operator">!</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.setRenderPipelineState(pipelineState)<br>        commandEncoder<span class="hljs-operator">?</span>.setVertexBuffer(vertexBuffer,<br>                                        offset: <span class="hljs-number">0</span>,<br>                                        index: <span class="hljs-number">0</span>)<br>        commandEncoder<span class="hljs-operator">?</span>.drawPrimitives(type: .triangle,<br>                                       vertexStart: <span class="hljs-number">0</span>,<br>                                       vertexCount: vertices.count)<br><br>        commandEncoder<span class="hljs-operator">?</span>.endEncoding()<br>        commandBuffer<span class="hljs-operator">?</span>.present(metalView.currentDrawable<span class="hljs-operator">!</span>)<br>        commandBuffer<span class="hljs-operator">?</span>.commit()<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildModel</span>() &#123;<br>      vertexBuffer <span class="hljs-operator">=</span> device.makeBuffer(bytes: vertices,<br>                                       length: vertices.count <span class="hljs-operator">*</span> <span class="hljs-type">MemoryLayout</span>&lt;<span class="hljs-type">Float</span>&gt;.size,<br>                                       options: [])<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildPipelineState</span>() &#123;<br>        <span class="hljs-keyword">let</span> library            <span class="hljs-operator">=</span> device.makeDefaultLibrary()<br>        <span class="hljs-keyword">let</span> vertexFunction     <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;vertex_shader&quot;</span>)<br>        <span class="hljs-keyword">let</span> fragmentFunction   <span class="hljs-operator">=</span> library<span class="hljs-operator">?</span>.makeFunction(name: <span class="hljs-string">&quot;fragment_shader&quot;</span>)<br>        <span class="hljs-keyword">let</span> pipelineDescriptor <span class="hljs-operator">=</span> <span class="hljs-type">MTLRenderPipelineDescriptor</span>()<br><br>        pipelineDescriptor.vertexFunction                  <span class="hljs-operator">=</span> vertexFunction<br>        pipelineDescriptor.fragmentFunction                <span class="hljs-operator">=</span> fragmentFunction<br>        pipelineDescriptor.colorAttachments[<span class="hljs-number">0</span>].pixelFormat <span class="hljs-operator">=</span> .bgra8Unorm<br><br>        <span class="hljs-keyword">do</span> &#123;<br>            pipelineState <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> device.makeRenderPipelineState(descriptor: pipelineDescriptor)<br>        &#125; <span class="hljs-keyword">catch</span> <span class="hljs-keyword">let</span> error <span class="hljs-keyword">as</span> <span class="hljs-type">NSError</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: <span class="hljs-subst">\(error.localizedDescription)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs metal">//<br>//  Shader.metal<br>//  HelloMetal<br>//<br>//  Created by lxz on 2022/4/4.<br>//<br><br>#include &lt;metal_stdlib&gt;<br>using namespace metal;<br><br>vertex float4 vertex_shader(const device packed_float3 *vertices [[ buffer(0) ]],<br>                           uint vertexId [[ vertex_id ]]) &#123;<br>    float4 position = float4(vertices[vertexId], 1);<br>    return position;<br>&#125;<br><br>fragment half4 fragment_shader() &#123;<br>    return half4(1, 0, 0, 1);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。&lt;/p&gt;
&lt;p&gt;目前系列有:&lt;/p&gt;
&lt;a href=&quot;/2022/04/04/hello-metal-1/&quot; title=&quot;hello-metal.1 看到了绿色&quot;&gt;</summary>
      
    
    
    
    <category term="HelloMetal系列" scheme="https://blog.justforlxz.com/categories/HelloMetal%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Metal" scheme="https://blog.justforlxz.com/tags/Metal/"/>
    
    <category term="GameEngine" scheme="https://blog.justforlxz.com/tags/GameEngine/"/>
    
  </entry>
  
  <entry>
    <title>hello-metal.1 看到了绿色</title>
    <link href="https://blog.justforlxz.com/2022/04/04/hello-metal-1/"/>
    <id>https://blog.justforlxz.com/2022/04/04/hello-metal-1/</id>
    <published>2022-04-04T00:59:33.000Z</published>
    <updated>2023-02-01T06:35:51.165Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。</p><p>目前系列有:</p><a href="/2022/04/04/hello-metal-1/" title="hello-metal.1 看到了绿色">hello-metal.1 看到了绿色</a><br><a href="/2022/04/04/hello-metal-2/" title="hello-metal.2 第一个三角形">hello-metal.2 第一个三角形</a><br><a href="/2022/04/04/hello-metal-3/" title="hello-metal.3 四边形">hello-metal.3 四边形</a><br><a href="/2022/04/04/hello-metal-4/" title="hello-metal.4 动画">hello-metal.4 动画</a><br><a href="/2022/04/09/hello-metal-5/" title="hello-metal.5 材质贴图">hello-metal.5 材质贴图</a><hr><p>Metal 是由苹果公司所开发的一个应用程序接口，兼顾图形与计算功能，面向底层、低开销的硬件加速。其类似于将OpenGL 与 OpenCL 的功能集成到了同一个API上。Metal也通过引入计算着色器来进一步提高GPGPU编程的能力。Metal 使用一种基于C++11的新着色语言，其实现借助了 Clang 和 LLVM。</p><p>从今天开始，我会开始写一个 Metal 的入门系列，作为我学习 Metal 的笔记和过程。我学习的平台以 <code>raywenderlich.com</code> 的视频为主，代码和流程也基本保持一致。</p><p>现在就让我们开始吧！</p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>首先打开 xcode，新建一个 iOS App，需要注意的是，interface 默认是 swiftui，需要修改成 Storyboard，应该使用 swiftui 也没有问题的，只是先按照教程一步步来吧。</p><img src="/2022/04/04/hello-metal-1/2022-04-04_09.07.40.png" class=""><h3 id="设置-MTKView"><a href="#设置-MTKView" class="headerlink" title="设置 MTKView"></a>设置 MTKView</h3><p>当项目新建完成后，打开左侧的 <code>Main.storyboard</code> 文件，在中间选择到 <code>view Controller Scene</code> -&gt; <code>View Controller</code> -&gt; <code>View</code>，展开到 <code>View</code> 节点，并单击它。</p><p>右侧面板会显示该节点的详细信息，在最右侧选择 <code>Show the Identity inspector</code> 按钮，看起来像是名片按钮的，将 Class 修改为 <code>MTKView</code>，因为我们的界面不是普通的 View，而是使用 Metal 绘制的界面。</p><img src="/2022/04/04/hello-metal-1/2022-04-04_09.54.37.png" class=""><h2 id="开启-Metal-之旅"><a href="#开启-Metal-之旅" class="headerlink" title="开启 Metal 之旅"></a>开启 Metal 之旅</h2><h3 id="导入-MetalKit"><a href="#导入-MetalKit" class="headerlink" title="导入 MetalKit"></a>导入 MetalKit</h3><p>打开 <code>ViewController.swift</code> 文件，我们可以看到 xcode 已经自动生成了一部分代码，我们首先在 <code>import UIKit</code> 下一行写入 <code>import MetalKit</code>，用来导入 Metal API 相关的文件。</p><p>首先我们需要获取到界面上的 View，在 ViewController 类中写一个变量，用来访问 View。</p><p>增加代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> metalView: <span class="hljs-type">MTKView</span> &#123;<br>    <span class="hljs-keyword">return</span> view <span class="hljs-keyword">as!</span> <span class="hljs-type">MTKView</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最终代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <span class="hljs-keyword">var</span> metalView: <span class="hljs-type">MTKView</span> &#123;<br>        <span class="hljs-keyword">return</span> view <span class="hljs-keyword">as!</span> <span class="hljs-type">MTKView</span><br>    &#125;<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问 metaView 就是访问界面上的 view。</p><h3 id="创建-Device"><a href="#创建-Device" class="headerlink" title="创建 Device"></a>创建 Device</h3><p>接下来就开始我们的 Metal 之旅，首先我们需要创建一个默认设备，这个设备是抽象的硬件资源，有了这个硬件，我们才可以去将着色器代码等各种代码发送到真正的设备上去使用。</p><p>在 metalView 中有个 device 成员，我们可以使用 <code>MTLCreateSystemDefaultDevice</code> 函数创建默认设备，我们就可以使用这个 <code>device</code> 了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <span class="hljs-keyword">var</span> metalView: <span class="hljs-type">MTKView</span> &#123;<br>        <span class="hljs-keyword">return</span> view <span class="hljs-keyword">as!</span> <span class="hljs-type">MTKView</span><br>    &#125;<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        metalView.device <span class="hljs-operator">=</span> <span class="hljs-type">MTLCreateSystemDefaultDevice</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设置背景清除色"><a href="#设置背景清除色" class="headerlink" title="设置背景清除色"></a>设置背景清除色</h3><p>有了设备以后呢？</p><p>我们可以先给屏幕来一个清除色，或者叫背景色。</p><p>在 <code>ViewController.swift</code> 中新增一个枚举，使用 <code>MTLClearColor</code> 函数可以创建出所需的值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Colors</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> wenderlichGreen <span class="hljs-operator">=</span> <span class="hljs-type">MTLClearColor</span>(red: <span class="hljs-number">0.0</span>,<br>                                               green: <span class="hljs-number">0.4</span>,<br>                                               blue: <span class="hljs-number">0.21</span>,<br>                                               alpha: <span class="hljs-number">1.0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在 viewDidLoad 中我们为 metalView 设置 clear color。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">metalView.clearColor <span class="hljs-operator">=</span> <span class="hljs-type">Colors</span>.wenderlichGreen<br></code></pre></td></tr></table></figure><p>这时候运行一下例子，然后就会发现屏幕是黑的，这是为啥捏？不是设置了背景色了吗？</p><img src="/2022/04/04/hello-metal-1/2022-04-04_09.55.44.png" class=""><p>哦吼吼，别忘了，和 OpenGL 一样，想要利用 GPU 去绘制画面，需要有顶点信息，由各种着色器处理过后，才能得到一幅画面，而我们还没有开始写着色器代码，也没有写绘制命令。</p><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><h4 id="命令队列"><a href="#命令队列" class="headerlink" title="命令队列"></a>命令队列</h4><p>我们需要新建一个命令队列 MTLCommandQueue，用来缓冲我们的操作命令。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> commandQueue: <span class="hljs-type">MTLCommandQueue</span><br></code></pre></td></tr></table></figure><p>在 viewDidLoad 函数中使用 <code>metalView.device.makeCommandQueue()!</code> 初始化 commandQueue。</p><p>还需要创建一个 MTLCommandBuffer 来缓冲命令，这里可能就有疑惑了，MTLCommandQueue 自己就是个队列，怎么还需要一个 buffer 呢？MTLCommandBuffer 是从 MTLCommandQueue 中创建出来的，用于本次绘制所需的全部状态，例如顶点信息、颜色、顶点连接顺序等等，当完成所有设置以后，就可以使用 commandBuffer.commit() 提交到队列中。</p><h4 id="命令编码"><a href="#命令编码" class="headerlink" title="命令编码"></a>命令编码</h4><p>我们还需要一个 MTLRenderCommandEncoder，MTLRenderCommandEncoder 对象表示一个单独的图形渲染 command encoder。MTLParallelRenderCommandEncoder 对象使得一个单独的渲染 pass 被分成若干个独立的 MTLRenderCommandEncoder 对象，每一个都可以被分配到不同的线程。这些 command encoders 中的指令随后将串行起来，并以一致的可预测的顺序被执行。</p><p>这里是一张 Metal 渲染管线图。</p><img src="/2022/04/04/hello-metal-1/gfx-pipeline_2x.png" class=""><h4 id="提交绘制"><a href="#提交绘制" class="headerlink" title="提交绘制"></a>提交绘制</h4><p>最终我们新增的代码是这样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">commandQueue <span class="hljs-operator">=</span> metalView.device<span class="hljs-operator">?</span>.makeCommandQueue()<br><span class="hljs-keyword">let</span> commandBuffer <span class="hljs-operator">=</span> commandQueue.makeCommandBuffer()<br><span class="hljs-keyword">let</span> commandEncoder <span class="hljs-operator">=</span> commandBuffer<span class="hljs-operator">?</span>.makeRenderCommandEncoder(descriptor: metalView.currentRenderPassDescriptor<span class="hljs-operator">!</span>)<br><br>commandEncoder<span class="hljs-operator">?</span>.endEncoding()<br>commandBuffer<span class="hljs-operator">?</span>.present(metalView.currentDrawable<span class="hljs-operator">!</span>)<br>commandBuffer<span class="hljs-operator">?</span>.commit()<br></code></pre></td></tr></table></figure><p>可以看到有些变量后面跟了一个!，它的意思是这里绝对不为空，是一种断言，同样还有?，它的意思是如果不为空就执行。</p><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>我们已经完成了最终的代码，整个 ViewController.swift 的代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> MetalKit<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Colors</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> wenderlichGreen <span class="hljs-operator">=</span> <span class="hljs-type">MTLClearColor</span>(red: <span class="hljs-number">0.0</span>,<br>                                               green: <span class="hljs-number">0.4</span>,<br>                                               blue: <span class="hljs-number">0.21</span>,<br>                                               alpha: <span class="hljs-number">1.0</span>)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <span class="hljs-keyword">var</span> metalView: <span class="hljs-type">MTKView</span> &#123;<br>        <span class="hljs-keyword">return</span> view <span class="hljs-keyword">as!</span> <span class="hljs-type">MTKView</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> commandQueue: <span class="hljs-type">MTLCommandQueue</span>!<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        metalView.device <span class="hljs-operator">=</span> <span class="hljs-type">MTLCreateSystemDefaultDevice</span>()<br>        metalView.clearColor <span class="hljs-operator">=</span> <span class="hljs-type">Colors</span>.wenderlichGreen<br>        commandQueue <span class="hljs-operator">=</span> metalView.device<span class="hljs-operator">?</span>.makeCommandQueue()<br>        <span class="hljs-keyword">let</span> commandBuffer <span class="hljs-operator">=</span> commandQueue.makeCommandBuffer()<br>        <span class="hljs-keyword">let</span> commandEncoder <span class="hljs-operator">=</span> commandBuffer<span class="hljs-operator">?</span>.makeRenderCommandEncoder(descriptor: metalView.currentRenderPassDescriptor<span class="hljs-operator">!</span>)<br><br>        commandEncoder<span class="hljs-operator">?</span>.endEncoding()<br>        commandBuffer<span class="hljs-operator">?</span>.present(metalView.currentDrawable<span class="hljs-operator">!</span>)<br>        commandBuffer<span class="hljs-operator">?</span>.commit()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/04/04/hello-metal-1/2022-04-04_11.44.40.png" class=""><p>这时候就可以看到屏幕出现了绿色，这是我们设置的 clearColor。</p><p>本篇先讲了一个基本的 Metal 项目的使用，下一篇会开始讲顶点和着色器的用法，完成我们的第一个三角形。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。&lt;/p&gt;
&lt;p&gt;目前系列有:&lt;/p&gt;
&lt;a href=&quot;/2022/04/04/hello-metal-1/&quot; title=&quot;hello-metal.1 看到了绿色&quot;&gt;</summary>
      
    
    
    
    <category term="HelloMetal系列" scheme="https://blog.justforlxz.com/categories/HelloMetal%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Metal" scheme="https://blog.justforlxz.com/tags/Metal/"/>
    
    <category term="GameEngine" scheme="https://blog.justforlxz.com/tags/GameEngine/"/>
    
  </entry>
  
  <entry>
    <title>vim简单配置</title>
    <link href="https://blog.justforlxz.com/2022/03/22/vim%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.justforlxz.com/2022/03/22/vim%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</id>
    <published>2022-03-22T12:36:51.000Z</published>
    <updated>2023-02-01T06:35:51.281Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个爱折腾的同学，折腾几个编辑器不过分吧。</p><p>我折腾编辑器的历史还算跟得上潮流，最开始用 sublime，后来 atom 出来了，吊打 sublime，我就去用 atom了。<br>再后来宇宙第一编辑器 vscode 出来了，吊打了(我认为)所有的编辑器，我就又去用 vscode。 <del>(怎么感觉我一直在追新?喵?)</del></p><p>工作以后，坐我左边的是一个 emacs 用户，右边是一个 vim 用户，然后他俩偶尔会拉我看他们搞的新插件，或者是他们互相在自己的编辑器上实现了对方的插件的功能。<br>说实话我也不是没用过 vim 或者 emacs，但是最大的问题其实是，对我来说学习成本非常大，遇到一点小问题，我就会不由自主的回想起 vscode 的好，然后就不想折腾了。<br>这对我其实是不好的，毕竟我是一个爱折腾的人。</p><p>所以我又一次折腾起了 emacs，每一次折腾都会让我学习到新的内容，从最开始的懵逼，到现在已经会简单的用 lisp 写一些插件。每一次都有提升，不过就是无用功比较多。</p><p>但是本篇先不折腾 emacs，这次我想先写一下我学习到的 vim 的配置。</p><h2 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a>neovim</h2><p>vim 阵营其实可以简单的分为 vim 和 neovim，为什么会有两个阵营呢？简单来说就是 neovim 的作者受不了 vim 的作者，所以 fork 出来增加自己的功能，结果从原版那里拉来了很多的用户，<br>vim 作者一看阵势不对，赶紧又反向增加功能，现在两者的区别已经不是很大了。</p><p>使用 neovim 作为我的主 vim 编辑器是因为它支持 lua 脚本作为配置文件，lua 脚本比较好上手一些。</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>neovim 的配置文件在 <code>~/.config/nvim/</code>。</p><p>入口文件是 <code>init.vim</code>，里面写的内容很简单，就是加载 lua 脚本。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">&quot; 基础设置</span><br><span class="hljs-string">lua require(&#x27;basic&#x27;)</span><br></code></pre></td></tr></table></figure><p>需要注意的是，lua 脚本必须都放在 init.vim 同级的 lua 目录里。</p><p>我使用 packer 作为 vim 的插件管理系统，vim 有很多插件系统，我选择它没有啥理由，就是随手用了一个。</p><p>安装 picker 需要手动下载，但是这样可能会在更换环境的时候忘记，所以我写在了脚本里，检测并自动下载。</p><p>在 <code>~/.config/nvim/lua/basic.lua</code> 里就可以写 lua 脚本去执行更复杂的指令，比如加载插件。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- utf8</span><br><span class="hljs-comment">-- 高亮所在行</span><br>vim.wo.cursorline = <span class="hljs-literal">true</span><br><span class="hljs-comment">-- 右侧参考线，超过表示代码太长了，考虑换行</span><br>vim.wo.colorcolumn = <span class="hljs-string">&quot;80&quot;</span><br><span class="hljs-comment">-- 缩进2个空格等于一个Tab</span><br>vim.o.tabstop = <span class="hljs-number">2</span><br><br><span class="hljs-keyword">local</span> fn = vim.fn<br><span class="hljs-comment">-- 下载 packer</span><br><span class="hljs-keyword">local</span> install_path = fn.stdpath(<span class="hljs-string">&#x27;data&#x27;</span>)..<span class="hljs-string">&#x27;/site/pack/packer/start/packer.nvim&#x27;</span><br><span class="hljs-keyword">local</span> is_startup = <span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> fn.empty(fn.glob(install_path)) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>  fn.system(&#123;<span class="hljs-string">&#x27;git&#x27;</span>, <span class="hljs-string">&#x27;clone&#x27;</span>, <span class="hljs-string">&#x27;--depth&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;https://github.com/wbthomason/packer.nvim&#x27;</span>, install_path&#125;)<br>  vim.cmd<span class="hljs-string">[[packadd packer.nvim]]</span><br>  is_startup = <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 初始化 packer</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;packer&#x27;</span>).startup(<br>  <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">local</span> use = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;packer&#x27;</span>).use<br>    <span class="hljs-keyword">local</span> home = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">getenv</span>(<span class="hljs-string">&quot;HOME&quot;</span>)<br>    <span class="hljs-comment">-- 使用 ~/.config/nvim/lua/plugins-d 作为插件的目录</span><br>    <span class="hljs-keyword">local</span> plugins = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;find &quot;&#x27;</span>.. home .. <span class="hljs-string">&#x27;/.config/nvim/lua/plugins-d/&#x27;</span>..<span class="hljs-string">&#x27;&quot; -type f&#x27;</span>)<br>    <span class="hljs-keyword">for</span> plugin <span class="hljs-keyword">in</span> plugins:<span class="hljs-built_in">lines</span>() <span class="hljs-keyword">do</span><br>      <span class="hljs-comment">-- 插件的标准文件名是这种形式 _lsp.lua</span><br>      <span class="hljs-keyword">local</span> part1, part2 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">match</span>(plugin,home .. <span class="hljs-string">&quot;/[.]config/nvim/lua/(.*)_(.*)[.]lua&quot;</span>)<br>      <span class="hljs-keyword">if</span> part1 ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">and</span> part2 ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br>        plugin = part1 .. <span class="hljs-string">&#x27;_&#x27;</span> .. part2<br>      <span class="hljs-keyword">else</span><br>        plugin = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">if</span> plugin ~= <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">then</span><br>        use(<span class="hljs-built_in">require</span>(plugin))<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> is_startup <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;packer&#x27;</span>).sync()<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br>)<br></code></pre></td></tr></table></figure><p>新建一个 plugins-d 目录，就可以写插件了，使用 vim 作为开发工具，第一件事肯定是先配置好语言服务器。</p><p>新建 <code>~/.config/nvim/lua/plugins-d/_lsp.lua</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- https://github.com/neovim/nvim-lspconfig</span><br><br><span class="hljs-comment">-- Description:</span><br><span class="hljs-comment">-- lsp configs for neovim builtin lsp</span><br><br>Capabilities = vim.lsp.protocol.make_client_capabilities()<br><br><span class="hljs-comment">-- Use an on_attach function to only map the following keys</span><br><span class="hljs-comment">-- after the language server attaches to the current buffer</span><br>On_Attach_hooks = &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">On_Attach</span> <span class="hljs-params">(client, bufnr)</span></span><br>  <span class="hljs-keyword">local</span> wk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;which-key&quot;</span>)<br>  <span class="hljs-keyword">local</span> key_opts = &#123;<br>    <span class="hljs-comment">-- mode   Help        Affected                              Equivalent</span><br>    <span class="hljs-comment">-- &#x27;&#x27;     mapmode-nvo Normal/Visual/Select/Operator-pending :map</span><br>    <span class="hljs-comment">-- &#x27;n&#x27;    mapmode-n  Normal                                :nmap</span><br>    <span class="hljs-comment">-- &#x27;v&#x27;    mapmode-v   Visual/Select                         :vmap</span><br>    <span class="hljs-comment">-- &#x27;s&#x27;    mapmode-s  Select                                :smap</span><br>    <span class="hljs-comment">-- &#x27;x&#x27;    mapmode-x  Visual                                :xmap</span><br>    <span class="hljs-comment">-- &#x27;o&#x27;    mapmode-o   Operator-pending                      :omap</span><br>    <span class="hljs-comment">-- &#x27;!&#x27;    mapmode-ic  Insert/Command-line                   :map!</span><br>    <span class="hljs-comment">-- &#x27;i&#x27;    mapmode-i   Insert                                :imap</span><br>    <span class="hljs-comment">-- &#x27;l&#x27;    mapmode-l   Insert/Command-line/Lang-Arg          :lmap</span><br>    <span class="hljs-comment">-- &#x27;c&#x27;    mapmode-c   Command-line                          :cmap</span><br>    <span class="hljs-comment">-- &#x27;t&#x27;    mapmode-t   Terminal                              :tmap</span><br>    mode    = <span class="hljs-string">&quot;n&quot;</span>,<br>    buffer  = <span class="hljs-number">0</span>, <span class="hljs-comment">-- local mappings</span><br>    silent  = <span class="hljs-literal">true</span>, <span class="hljs-comment">-- use `silent ` when creating keymaps</span><br>    noremap = <span class="hljs-literal">true</span>, <span class="hljs-comment">-- use `noremap` when creating keymaps</span><br>  &#125;<br><br>  wk.register(<br>    &#123;<br>      [<span class="hljs-string">&quot;K&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;LSP:: hover&quot;</span> &#125;,<br>      [<span class="hljs-string">&quot;&lt;C-k&gt;&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;LSP:: signature help&quot;</span> &#125;,<br>      [<span class="hljs-string">&quot;&lt;space&gt;rn&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;LSP:: rename&quot;</span> &#125;,<br>      [<span class="hljs-string">&quot;&lt;space&gt;f&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;&lt;cmd&gt;lua vim.lsp.buf.formatting()&lt;CR&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;LSP:: format&quot;</span> &#125;,<br>      [<span class="hljs-string">&quot;&lt;space&gt;E&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;LSP:: float diagnostic&quot;</span> &#125;,<br>    &#125;,<br>    key_opts<br>  )<br><br>  key_opts = &#123;<br>    mode    = <span class="hljs-string">&quot;n&quot;</span>,<br>    buffer  = <span class="hljs-number">0</span>, <span class="hljs-comment">-- local mappings</span><br>    silent  = <span class="hljs-literal">true</span>, <span class="hljs-comment">-- use `silent ` when creating keymaps</span><br>    noremap = <span class="hljs-literal">false</span>, <span class="hljs-comment">-- not use `noremap` when creating keymaps</span><br>  &#125;<br><br>  wk.register(<br>    &#123;<br>      [<span class="hljs-string">&quot;gd&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;cr&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;LSP:: definition&quot;</span> &#125;,<br>      [<span class="hljs-string">&quot;gr&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;&lt;cmd&gt;lua vim.lsp.buf.references()&lt;cr&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;LSP:: reference&quot;</span> &#125;,<br>      [<span class="hljs-string">&quot;gi&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;cr&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;LSP:: implementation&quot;</span> &#125;,<br>      [<span class="hljs-string">&quot;gy&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;cr&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;LSP:: type definition&quot;</span> &#125;,<br>    &#125;,<br>    key_opts<br>  )<br><br>  <span class="hljs-keyword">for</span> _, hook <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(On_Attach_hooks) <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> hook ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br>      hook(client, bufnr)<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">config</span><span class="hljs-params">()</span></span><br>  <span class="hljs-keyword">local</span> nvim_lsp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lspconfig&#x27;</span>)<br><br>  <span class="hljs-comment">-- Use a loop to conveniently call &#x27;setup&#x27; on multiple servers and</span><br>  <span class="hljs-comment">-- map buffer local keybindings when the language server attaches</span><br>  <span class="hljs-keyword">local</span> servers =&#123;<br>    <span class="hljs-string">&#x27;ccls&#x27;</span>,<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> _, lsp <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(servers) <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">local</span> default = &#123;<br>      flags = &#123;<br>        debounce_text_changes = <span class="hljs-number">150</span>,<br>      &#125;,<br>      on_attach = On_Attach,<br>      capabilities = Capabilities<br>    &#125;<br><br>    <span class="hljs-keyword">local</span> cfg = vim.tbl_deep_extend(<span class="hljs-string">&#x27;force&#x27;</span>, default, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lsp-d/&#x27;</span>..lsp..<span class="hljs-string">&#x27;_&#x27;</span>))<br>    nvim_lsp[lsp].setup(cfg)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-string">&#x27;neovim/nvim-lspconfig&#x27;</span>,<br>  <span class="hljs-built_in">config</span> = <span class="hljs-built_in">config</span>,<br>  after = &#123;<br>    <span class="hljs-string">&#x27;nvim-cmp&#x27;</span>,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不要看文件很长，其实大部分都是 nvim 的默认 lsp-config 配置，而且大部分配置一眼就能看得懂，最开始 On_Attach 函数是在处理快捷键相关的，即使不了解 vim 如何定义快捷键，也不影响看这个配置文件。</p><p>在 config 函数中，有一个数组，包含了 ccls，这里的意思是去加载 ccls 语言服务器，nvim 给了一分列表，可以查找自己使用的<a href="https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md">语言服务器</a>的名称。</p><p>在 config 函数里，local cfg 这里是定义查找文件的，我这里是听从了 <a href="https://github.com/black_desk">black_desk</a> 的建议，如果文件名是 _ 开头的，就屏蔽这个文件，可以快速进行调试。</p><p>在 <code>~/.config/nvim/lua/lsp-d/ccls_.lua</code> 里写入配置内容，就可以启用 ccls 语言服务器了。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> home = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">getenv</span>(<span class="hljs-string">&#x27;HOME&#x27;</span>)<br><span class="hljs-keyword">return</span> &#123;<br>  init_options = &#123;<br>    cache = &#123;<br>      directory = home .. <span class="hljs-string">&quot;/.ccls-cache&quot;</span>,<br>      retainInMemory = <span class="hljs-number">0</span>,<br>    &#125;,<br>    <span class="hljs-comment">-- highlight = &#123;</span><br>      <span class="hljs-comment">-- lsRanges = true,</span><br>    <span class="hljs-comment">-- &#125;</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>默认 nvim 是定义了很多值，并不是每一个语言服务器都需要定义，但是需要注意的是，即使没有使用配置文件，也需要创建相应的文件，并返回一个空对象。</p><p>基本配置已经完成了，只差最后一步了，还记得一开始我说的使用了 packer 作为插件管理器了么，现在就需要编译一遍配置文件，让 packer 能加载我们的插件。</p><p>执行命令 <code>nvim +PackerCompile</code>，然后退出 vim。如果改动了配置文件，都需要重新执行一次这样的命令，否则配置将不会生效。</p><p>下面是我的使用截图。</p><img src="/2022/03/22/vim%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/ts.png" class="" title="ts"><img src="/2022/03/22/vim%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/ts-lsp.png" class="" title="ts-lsp"><img src="/2022/03/22/vim%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/cpp.png" class="" title="cpp"><img src="/2022/03/22/vim%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/cpp-lsp.png" class="" title="cpp">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作为一个爱折腾的同学，折腾几个编辑器不过分吧。&lt;/p&gt;
&lt;p&gt;我折腾编辑器的历史还算跟得上潮流，最开始用 sublime，后来 atom 出来了，吊打 sublime，我就去用 atom了。&lt;br&gt;再后来宇宙第一编辑器 vscode 出来了，吊打了(我认为)所有的编辑器，我</summary>
      
    
    
    
    
    <category term="vim" scheme="https://blog.justforlxz.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>CSS 外边距折叠问题</title>
    <link href="https://blog.justforlxz.com/2022/03/16/css-mastering-margin-collapsing/"/>
    <id>https://blog.justforlxz.com/2022/03/16/css-mastering-margin-collapsing/</id>
    <published>2022-03-16T07:35:56.000Z</published>
    <updated>2023-02-01T06:35:51.161Z</updated>
    
    <content type="html"><![CDATA[<p>在学习 CSS 练习元素浮动的时候，我发现了一个奇怪的现象，就是上下两个块元素似乎距离太近了，无论我怎么增加上下 margins，始终都不会按照我预期的那样显示。</p><p>查阅了一些资料发现这是一个 CSS 的特定，叫 <code>外边距折叠</code>，在CSS中，两个或多个相邻的普通流中的盒子（可能是父子元素，也可能是兄弟元素）在垂直方向上的外边距会发生叠加，这种形成的外边距称之为外边距叠加。</p><p>W3C 对于外边距叠加的定义：</p><blockquote><p>In CSS, the adjoining margins of two or more boxes (which might or might not be siblings) can combine to form a single margin. Margins that combine this way are said to collapse, and the resulting combined margin is called a collapsed margin.</p></blockquote><p>在 W3C 中，对相邻也有定义:</p><blockquote><p>Two margins are adjoining if and only if:</p><ul><li><p>both belong to in-flow block-level boxes that participate in the same block formatting context</p></li><li><p>no line boxes, no clearance, no padding and no border separate them</p></li><li><p>both belong to vertically-adjacent box edges, i.e. form one of the following pairs:</p><ul><li>top margin of a box and top margin of its first in-flow child</li><li>bottom margin of box and top margin of its next in-flow following sibling</li><li>bottom margin of a last in-flow child and bottom margin of its parent if the &gt; parent has “auto” computed height</li><li>top and bottom margins of a box that does not establish a new block formatting context and that has zero computed “min-height”, zero or “auto” computed “height”, and no in-flow children</li></ul></li></ul></blockquote><p>翻译：</p><blockquote><p>两个边距相邻当且仅当：</p><ul><li><p>都属于普通流的块级盒子且参与到相同的块级格式上下文中</p></li><li><p>没有被padding、border、clear和line box分隔开</p></li><li><p>都属于垂直相邻盒子边缘：</p><ul><li>盒子的top margin和它第一个普通流子元素的top margin</li><li>盒子的bottom margin和它下一个普通流兄弟的top margin</li><li>盒子的bottom margin和它父元素的bottom margin</li><li>盒子的top margin和bottom margin，且没有创建一个新的块级格式上下文，且有被计算为0的min-height，被计算为0或auto的height，且没有普通流子元素</li></ul></li></ul></blockquote><p>下面来写一个小例子:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container1</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background</span>: green;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container2</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.container3</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">background</span>: blue;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.child</span> &#123;<br>    <span class="hljs-attribute">background</span>: red;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br>&#125;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;container1&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;container2&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;child&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;child&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;child&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;container3&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><p>显示效果如下:</p><center><img src="/2022/03/16/css-mastering-margin-collapsing/tg_image_1874748614.jpg" class="" width="1"></center><center><img src="/2022/03/16/css-mastering-margin-collapsing/tg_image_3289103855.jpg" class="" width="2"></center><p>可以看到，上一个元素的范围已经到了下一个元素的顶部，而下一个元素的上外边缘，已经被折叠在了一起。</p><p>这样的话我们就无法按照期望去布局了，那么有什么办法可以解决吗？</p><p>既然外边距的折叠是有条件的，只要想办法破坏条件，就可以避免这个问题了。</p><p>而且 W3C 也给出了解决办法:</p><blockquote><ul><li>Margins between a floated box and any other box do not collapse (not even between a float and its in-flow children).</li><li>Margins of elements that establish new block formatting contexts (such as floats and elements with “overflow” other than “visible”) do not collapse with their in-flow children.</li><li>Margins of absolutely positioned boxes do not collapse (not even with their in-flow children).</li><li>Margins of inline-block boxes do not collapse (not even with their in-flow children).</li><li>The bottom margin of an in-flow block-level element always collapses with the top margin of its next in-flow block-level sibling, unless that sibling has clearance.</li><li>The top margin of an in-flow block element collapses with its first in-flow block-level child”s top margin if the element has no top border, no top padding, and the child has no clearance.</li><li>The bottom margin of an in-flow block box with a “height” of “auto” and a “min-height” of zero collapses with its last in-flow block-level child”s bottom margin if the box has no bottom padding and no bottom border and the child”s bottom margin does not collapse with a top margin that has clearance.</li><li>A box”s own margins collapse if the “min-height” property is zero, and it has neither top or bottom borders nor top or bottom padding, and it has a “height” of either 0 or “auto”, and it does not contain a line box, and all of its in-flow children”s margins (if any) collapse.</li></ul></blockquote><p>翻译下就是:</p><blockquote><ul><li>浮动元素不会与任何元素发生叠加，也包括它的子元素</li><li>创建了 BFC 的元素不会和它的子元素发生外边距叠加</li><li>绝对定位元素和其他任何元素之间不发生外边距叠加，也包括它的子元素</li><li>inline-block 元素和其他任何元素之间不发生外边距叠加，也包括它的子元素</li><li>普通流中的块级元素的 margin-bottom 永远和它相邻的下一个块级元素的 margin-top 叠加，除非相邻的兄弟元素 clear</li><li>普通流中的块级元素（没有 border-top、没有 padding-top）的 margin-top 和它的第一个普通流中的子元素（没有clear）发生 margin-top 叠加</li><li>普通流中的块级元素（height为 auto、min-height为0、没有 border-bottom、没有 padding-bottom）和它的最后一个普通流中的子元素（没有自身发生margin叠加或clear）发生 margin-bottom叠加</li><li>如果一个元素的 min-height 为0、没有 border、没有padding、高度为0或者auto、不包含子元素，那么它自身的外边距会发生叠加</li></ul></blockquote><p>还好以前写了一个浮动的笔记，可以拿来用。</p><p>跳转查看 <a href="/2021/08/07/CSS%E6%B5%AE%E5%8A%A8%E7%AC%94%E8%AE%B0/" title="CSS浮动笔记">CSS浮动笔记</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在学习 CSS 练习元素浮动的时候，我发现了一个奇怪的现象，就是上下两个块元素似乎距离太近了，无论我怎么增加上下 margins，始终都不会按照我预期的那样显示。&lt;/p&gt;
&lt;p&gt;查阅了一些资料发现这是一个 CSS 的特定，叫 &lt;code&gt;外边距折叠&lt;/code&gt;，在CSS中</summary>
      
    
    
    
    
    <category term="CSS" scheme="https://blog.justforlxz.com/tags/CSS/"/>
    
    <category term="Web" scheme="https://blog.justforlxz.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>使用 if constexpr 实现条件编译</title>
    <link href="https://blog.justforlxz.com/2022/03/10/if-constexpr/"/>
    <id>https://blog.justforlxz.com/2022/03/10/if-constexpr/</id>
    <published>2022-03-10T05:03:27.000Z</published>
    <updated>2023-02-01T06:35:51.210Z</updated>
    
    <content type="html"><![CDATA[<p>在项目开发中，我们通常会使用条件编译对代码进行裁剪，选择性地排除不需要的代码，比如在某个平台下完全不支持某个功能，那么这个功能就不应该被编译。</p><p>一般我们使用宏来判断代码，选择性的挑选需要编译的部分，并在构建系统中开启这样的条件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> XXXXXXXXXX</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hello world!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;good bye!&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>在 C 语言的项目中，这样的行为是很正常的，甚至在 C++ 项目中，我们也会选择使用宏进行条件判断。</p><p>但是如果定义的宏多了，则很容易导致代码碎片化，并且无法直观地看到工作流程。</p><p>例如这样的代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> KWIN_VERSION_CHECK(major, minor, patch, build) ((major&lt;&lt;24)|(minor&lt;&lt;16)|(patch&lt;&lt;8)|build)</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> KWIN_VERSION_STR</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KWIN_VERSION KWIN_VERSION_CHECK(KWIN_VERSION_MAJ, KWIN_VERSION_MIN, KWIN_VERSION_PAT, KWIN_VERSION_BUI)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(KWIN_VERSION) &amp;&amp; KWIN_VERSION &lt; KWIN_VERSION_CHECK(5, 21, 3, 0)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> TimeArgType;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> std::chrono::milliseconds TimeArgType;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(Q_OS_LINUX) &amp;&amp; !defined(QT_NO_DYNAMIC_LIBRARY) &amp;&amp; !defined(QT_NO_LIBRARY)</span><br><span class="hljs-function">QT_BEGIN_NAMESPACE</span><br><span class="hljs-function">QFunctionPointer <span class="hljs-title">qt_linux_find_symbol_sys</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *symbol)</span></span>;<br><span class="hljs-function">QT_END_NAMESPACE</span><br><span class="hljs-function">QFunctionPointer <span class="hljs-title">KWinUtils::resolve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *symbol)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">QT_PREPEND_NAMESPACE</span>(qt_linux_find_symbol_sys)(symbol);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-function">QFunctionPointer <span class="hljs-title">KWinUtils::resolve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *symbol)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> QString lib_name = <span class="hljs-string">&quot;kwin.so.&quot;</span> + qApp-&gt;<span class="hljs-built_in">applicationVersion</span>();<br><br>    <span class="hljs-keyword">return</span> QLibrary::<span class="hljs-built_in">resolve</span>(lib_name, symbol);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的例子中可以看到，代码中一旦出现大量重复的判断条件，代码非常不直观，而且被宏分割成了很多部分。</p><p>在一次偶然的机会，我看到了一篇介绍 C++ 17 中的 if constexpr 的用法，可以在编译期进行一些计算，虽然我很早就知道了 constexpr 的用法，但是大家举的例子基本上都是数值计算，让编译器在编译期间将数值进行计算，从而减轻运行时的消耗，我也从来想到其他用法，所以一直没有在项目中使用到。</p><p>constexpr 的作用并不是编译期计算数值，而是编译期进行的代码分析，如果代码较小且非常直观，比如大家经常举的例子，在编译期间计算斐波那契数列，这种例子即使不使用 constexpr 显式要求，编译器也会帮助我们开启优化，直接给出结果。</p><p>但是如果代码非常复杂，编译器就不一定会为我们做这样的优化，就需要我们手动标记可以计算的位置，要求编译器在编译期间进行求值和优化。</p><p>我设想的是，使用 cmake 在构建时，先生成一份文件，将开关的值记录下来，在需要进行判断的地方，就可以直接使用 if constexpr 进行条件判断，在编译期间，编译器会发现有一个分支确定不会被执行（相当于  <code>if(false) &#123;&#125;</code>），那么这个分支就不会进行编译，直接剔除。</p><p>CMakeLists.txt 中需要做一些工作，将编译参数加入构建系统。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">option</span> (ENABLE_MODULE <span class="hljs-string">&quot;Enable Module&quot;</span> <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">if</span>(ENABLE_MODULE)<br>    <span class="hljs-keyword">set</span>(ENABLE_MODULE <span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">set</span>(ENABLE_MODULE <span class="hljs-string">&quot;0&quot;</span>)<br><span class="hljs-keyword">endif</span>(ENABLE_MODULE)<br><br><span class="hljs-keyword">configure_file</span> (<br>  <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/options/options.h.in&quot;</span><br>  <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/options/options.h&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>在 options&#x2F;options.h.in 文件里，按照 cmake 的要求将变量导入进文件中，进行内容替换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br>#cmakedefine01 ENABLE_MODULE<br></code></pre></td></tr></table></figure><p>这里我仍然使用的是宏定义，也可以直接写成如下形式:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">option</span> (ENABLE_MODULE <span class="hljs-string">&quot;Enable Module&quot;</span> <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">if</span>(ENABLE_MODULE)<br>    <span class="hljs-keyword">set</span>(ENABLE_MODULE <span class="hljs-string">&quot;true&quot;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">set</span>(ENABLE_MODULE <span class="hljs-string">&quot;false&quot;</span>)<br><span class="hljs-keyword">endif</span>(ENABLE_MODULE)<br><br><span class="hljs-keyword">configure_file</span> (<br>  <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/options/options.h.in&quot;</span><br>  <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/options/options.h&quot;</span><br>)<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">bool</span> ENABLE_MODULE&#123;@ENABLE_MODULE@&#125;;<br></code></pre></td></tr></table></figure><p>在 main.cpp 中写一段测试代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;options/options.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(ENABLE_MODULE)</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Now Enable Module&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(!ENABLE_MODULE)</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Now Disable Module&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果是符合预期的。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs txt"># lxz @ lxz-MacBook-Pro in ~/Develop/constexpr-demo/build on git:master o [13:28:39]<br>$ cmake ../ -G Ninja -DENABLE_MODULE=ON<br>-- The CXX compiler identification is AppleClang 13.0.0.13000029<br>-- Detecting CXX compiler ABI info<br>-- Detecting CXX compiler ABI info - done<br>-- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ - skipped<br>-- Detecting CXX compile features<br>-- Detecting CXX compile features - done<br>-- Configuring done<br>-- Generating done<br>-- Build files have been written to: /Users/lxz/Develop/constexpr-demo/build<br><br># lxz @ lxz-MacBook-Pro in ~/Develop/constexpr-demo/build on git:master o [13:28:45]<br>$ ninja<br>[2/2] Linking CXX executable src/constexpr<br><br># lxz @ lxz-MacBook-Pro in ~/Develop/constexpr-demo/build on git:master o [13:28:48]<br>$ ./src/constexpr<br>Now Enable Module<br><br># lxz @ lxz-MacBook-Pro in ~/Develop/constexpr-demo/build on git:master o [13:28:52]<br>$ cmake ../ -G Ninja -DENABLE_MODULE=OFF<br>-- Configuring done<br>-- Generating done<br>-- Build files have been written to: /Users/lxz/Develop/constexpr-demo/build<br><br># lxz @ lxz-MacBook-Pro in ~/Develop/constexpr-demo/build on git:master o [13:28:58]<br>$ ninja<br>[2/2] Linking CXX executable src/constexpr<br><br># lxz @ lxz-MacBook-Pro in ~/Develop/constexpr-demo/build on git:master o [13:29:00]<br>$ ./src/constexpr<br>Now Disable Module<br></code></pre></td></tr></table></figure><p>虽然结果是符合的，但是我们其实不确定是否真的在编译期间就完成了代码剔除，所以使用命令进行汇编，查看汇编中是否包含了判断指令和两段输出的字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clang -S main.cpp -o main.s -I./<br></code></pre></td></tr></table></figure><p>main.s</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs txt">.text<br>.file&quot;main.cpp&quot;<br>.globlmain                            // -- Begin function main<br>.p2align2<br>.typemain,@function<br>main:                                   // @main<br>.cfi_startproc<br>// %bb.0:<br>stpx29, x30, [sp, #-32]!           // 16-byte Folded Spill<br>strx19, [sp, #16]                  // 8-byte Folded Spill<br>movx29, sp<br>.cfi_def_cfa w29, 32<br>.cfi_offset w19, -16<br>.cfi_offset w30, -24<br>.cfi_offset w29, -32<br>adrpx19, :got:_ZSt4cout<br>ldrx19, [x19, :got_lo12:_ZSt4cout]<br>adrpx1, .L.str<br>addx1, x1, :lo12:.L.str<br>movw2, #18<br>movx0, x19<br>bl_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l<br>ldrx8, [x19]<br>ldurx8, [x8, #-24]<br>addx8, x8, x19<br>ldrx19, [x8, #240]<br>cbzx19, .LBB0_5<br>// %bb.1:<br>ldrbw8, [x19, #56]<br>cbzw8, .LBB0_3<br>// %bb.2:<br>ldrbw1, [x19, #67]<br>b.LBB0_4<br>.LBB0_3:<br>movx0, x19<br>bl_ZNKSt5ctypeIcE13_M_widen_initEv<br>ldrx8, [x19]<br>movw1, #10<br>movx0, x19<br>ldrx8, [x8, #48]<br>blrx8<br>movw1, w0<br>.LBB0_4:<br>adrpx0, :got:_ZSt4cout<br>ldrx0, [x0, :got_lo12:_ZSt4cout]<br>bl_ZNSo3putEc<br>bl_ZNSo5flushEv<br>ldrx19, [sp, #16]                  // 8-byte Folded Reload<br>movw0, wzr<br>ldpx29, x30, [sp], #32             // 16-byte Folded Reload<br>ret<br>.LBB0_5:<br>bl_ZSt16__throw_bad_castv<br>.Lfunc_end0:<br>.sizemain, .Lfunc_end0-main<br>.cfi_endproc<br>                                        // -- End function<br>.section.text.startup,&quot;ax&quot;,@progbits<br>.p2align2                               // -- Begin function _GLOBAL__sub_I_main.cpp<br>.type_GLOBAL__sub_I_main.cpp,@function<br>_GLOBAL__sub_I_main.cpp:                // @_GLOBAL__sub_I_main.cpp<br>.cfi_startproc<br>// %bb.0:<br>stpx29, x30, [sp, #-32]!           // 16-byte Folded Spill<br>strx19, [sp, #16]                  // 8-byte Folded Spill<br>movx29, sp<br>.cfi_def_cfa w29, 32<br>.cfi_offset w19, -16<br>.cfi_offset w30, -24<br>.cfi_offset w29, -32<br>adrpx19, _ZStL8__ioinit<br>addx19, x19, :lo12:_ZStL8__ioinit<br>movx0, x19<br>bl_ZNSt8ios_base4InitC1Ev<br>adrpx0, :got:_ZNSt8ios_base4InitD1Ev<br>ldrx0, [x0, :got_lo12:_ZNSt8ios_base4InitD1Ev]<br>movx1, x19<br>ldrx19, [sp, #16]                  // 8-byte Folded Reload<br>adrpx2, __dso_handle<br>addx2, x2, :lo12:__dso_handle<br>ldpx29, x30, [sp], #32             // 16-byte Folded Reload<br>b__cxa_atexit<br>.Lfunc_end1:<br>.size_GLOBAL__sub_I_main.cpp, .Lfunc_end1-_GLOBAL__sub_I_main.cpp<br>.cfi_endproc<br>                                        // -- End function<br>.type_ZStL8__ioinit,@object          // @_ZStL8__ioinit<br>.local_ZStL8__ioinit<br>.comm_ZStL8__ioinit,1,1<br>.hidden__dso_handle<br>.type.L.str,@object                  // @.str<br>.section.rodata.str1.1,&quot;aMS&quot;,@progbits,1<br>.L.str:<br>.asciz&quot;Now Disable Module&quot; // 关键在这里<br>.size.L.str, 19<br><br>.section.init_array,&quot;aw&quot;,@init_array<br>.p2align3<br>.xword_GLOBAL__sub_I_main.cpp<br>.ident&quot;clang version 13.0.1&quot;<br>.section&quot;.note.GNU-stack&quot;,&quot;&quot;,@progbits<br>.addrsig<br>.addrsig_sym _GLOBAL__sub_I_main.cpp<br>.addrsig_sym _ZStL8__ioinit<br>.addrsig_sym __dso_handle<br>.addrsig_sym _ZSt4cout<br></code></pre></td></tr></table></figure><p>查看整个 main.s 汇编，发现只在 .L.str 段中有预期的文本字符串，可以得出结论，代码是在编译期间完成了剔除，符合我们的要求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在项目开发中，我们通常会使用条件编译对代码进行裁剪，选择性地排除不需要的代码，比如在某个平台下完全不支持某个功能，那么这个功能就不应该被编译。&lt;/p&gt;
&lt;p&gt;一般我们使用宏来判断代码，选择性的挑选需要编译的部分，并在构建系统中开启这样的条件。&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
    <category term="C++" scheme="https://blog.justforlxz.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>latex 环境配置</title>
    <link href="https://blog.justforlxz.com/2022/03/08/latex-environment-config/"/>
    <id>https://blog.justforlxz.com/2022/03/08/latex-environment-config/</id>
    <published>2022-03-08T09:55:49.000Z</published>
    <updated>2023-02-01T06:35:51.210Z</updated>
    
    <content type="html"><![CDATA[<p>在我刚开始学习使用 Linux 的时候，经常能看到一些人在鼓吹 tex、markdown、org-mode 之类的文档编写方式的好处，甚至分化出不同的阵营，互相拉拢（<del>忽悠</del>）其他刚入门的人。</p><p>后来我渐渐喜欢上了 markdown，因为它写起来足够简单，上手难度较低，而且我的博客是用 hexo 搭建的，它需要 markdown 作为博客文章，所以我逐渐就使用起来了 markdown。</p><p>在公司里，虽然 markdown 写起来非常简单，但是公司内部的文档是有格式要求的，排版被提上了日程，而排版恰恰是 markdown 的硬伤，markdown 可以说几乎没有排版的功能，它是轻量的标记语言，没有人给它提供复杂的排版，所以我们的目标变成了需要一种方便进行文本 diff 又不是 word 这类软件，最终我们的目标落在了 latex 上。</p><p>在 20 世纪，计算机教授高德纳（Donald Ervin Knuth）编写了一个排版软件，它可以处理非常复杂的数学公式，后来发展出了非常多的语言排版，它在学术界特别是数学、物理学和计算机科学界十分流行。tex 被普遍认为是一个优秀的排版工具，尤其是对于复杂数学公式的处理。利用 latex 等终端软件，tex 就能够排版出精美的文本以帮助人们辨认和查找。</p><p>latex 是一种基于 tex 的排版系统，利用这种格式系统的处理，即使用户没有排版和程序设计的知识也可以充分发挥由 tex 所提供的强大功能，不必一一亲自去设计或校对，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。</p><p>目前来看，我们使用 latex 写文档，进行 git 提交，在使用的时候编译成 pdf，发送给其他人使用，其他人更新文档我们也可以非常方便进行 review。</p><p>所以我就需要在本地配置一下 latex 的环境，以及使用 vscode 进行 latex 文档的编写。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于我在使用 macOS，所以我需要进行的步骤要比使用 deepin 多一些。</p><p>在 deepin 上，只需要安装 texlive-lang-cjk 和 texlive-xetex 两个包就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install texlive-lang-cjk texlive-xetex<br></code></pre></td></tr></table></figure><p>在 macOS 上，需要使用 homebrew 安装 mactex，这是专门针对 mac 系统优化的 tex 发行版。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install mactex<br></code></pre></td></tr></table></figure><p>安装完 mactex 以后，需要打开 TeX Live Utility，然后选择更新，将所有包更新到最新。如果觉得网速慢，可以使用国内的镜像加速下载。</p><p>阅读 <a href="https://mirrors.bfsu.edu.cn/help/CTAN/">https://mirrors.bfsu.edu.cn/help/CTAN/</a> 使用镜像。</p><p>以上安装工作就结束了。</p><h2 id="配置模板"><a href="#配置模板" class="headerlink" title="配置模板"></a>配置模板</h2><p>为了方便每个人写的文档都满足公司的要求，所以我们准备了一份公司的 latex 模板，latex 的模板规定了一些目录，只要放在模板目录即可使用。</p><p>Linux: <code>/usr/share/texlive/texmf-dist/tex/latex/</code></p><p>macOS: <code>~/Library/texmf/tex/latex/</code></p><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><p>以上准备工作做好以后，打开 vscode，安装 <code>LaTeX Workshop</code> 插件，其他插件可以不用安装，这个插件会帮助我们自动补全语法、高亮和格式化。</p><p>准备完毕以后，就可以愉快写 latex 了，本篇文章并不会教大家如何写 latex，只是介绍一下 latex，以及我使用的配置。</p><p>首先给 vscode 配置以下的工作区配置:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%DIR%/build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.view.pdf.viewer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tab&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.autoBuild.cleanAndRetry.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.autoClean.run&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;onFailed&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.clean.subfolder.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;*.aux&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-synctex=1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-interaction=nonstopmode&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-file-line-error&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;--shell-escape&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-pdf&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;--output-directory=%OUTDIR%&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;%DOCFILE%&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pdflatex&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pdflatex&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-synctex=1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-interaction=nonstopmode&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-file-line-error&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;--output-directory=%OUTDIR%&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;%DOCFILE%&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;%OUTDIR%/%DOCFILE%&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;TEXMFOUTPUT&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%OUTDIR%&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.recipes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;xelatex&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pdflatex&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;pdflatex&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xe-&gt;bib-&gt;xe-&gt;xe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;xelatex&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pdf-&gt;bib-&gt;pdf-&gt;pdf&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;pdflatex&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;pdflatex&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;pdflatex&quot;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在配置中，这段的作用是控制输出目录、自动构建和清理。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%DIR%/build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.view.pdf.viewer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tab&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.autoBuild.cleanAndRetry.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.autoClean.run&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;onFailed&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.clean.subfolder.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;*.aux&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接下来的步骤是控制编译的，为什么需要写这么长呢，因为 latex 其实不支持中文的，支持中文的是 xelatex，我们需要重写编译参数，否则输出的 pdf 是不会显示中文的。</p><p>在 <code>latex-workshop.latex.tools</code> 中，我们增加了三个新的构建指令，用于处理我们的 latex 文档。</p><p>在 <code>latex-workshop.latex.recipes</code> 中，第一个 recipe 为默认的编译工具，所以默认我们会使用 xelatex 进行编译，从而使用我们自定义的编译命令。</p><p>保存工作区配置到 <code>.vscode/settings.json</code> 中，就可以愉快的写 latex 啦。</p><p>放几张演示图片：</p><img src="/2022/03/08/latex-environment-config/2022-03-09-09.46.35.png" class="" title="演示1"><img src="/2022/03/08/latex-environment-config/2022-03-09-09.46.44.png" class="" title="演示2">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在我刚开始学习使用 Linux 的时候，经常能看到一些人在鼓吹 tex、markdown、org-mode 之类的文档编写方式的好处，甚至分化出不同的阵营，互相拉拢（&lt;del&gt;忽悠&lt;/del&gt;）其他刚入门的人。&lt;/p&gt;
&lt;p&gt;后来我渐渐喜欢上了 markdown，因为它写起</summary>
      
    
    
    
    
    <category term="latex" scheme="https://blog.justforlxz.com/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>QDir 和 std::filesystem 的简单对比</title>
    <link href="https://blog.justforlxz.com/2022/03/04/qdir-stdfilesystem/"/>
    <id>https://blog.justforlxz.com/2022/03/04/qdir-stdfilesystem/</id>
    <published>2022-03-04T02:11:45.000Z</published>
    <updated>2023-02-01T06:35:51.228Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名使用 Qt 的开发人员，Qt 为我提供了大量好用的基础设施，例如广受好评的 QString、QNetwork之类的，这是 Qt 平台为我提供的帮助，我只需要在这个平台上开发就足够了。</p><p>同样作为一名 C++ 开发人员，C++ 标准库也是我需要用的基础设施，但是标准库提供的功能就不如 Qt 了，最令人诟病的就是 C++ 的 std::string，业内充斥着对 std::string 的不屑与谩骂。</p><p>但是这一情况将会在 C++ 20 标准后改善，这里不具体展开，将来我会准备写一份 C++ 20 的功能介绍。</p><p>今天在开发项目的时候，为了节省资源，我仅使用标准库完成开发，缺少了 Qt 平台为我提供的有利帮助，项目开发的难度瞬间增加，在此期间，我发现了 C++ 的目录操作似乎能比的上 Qt 提供的 QDir封装，我打算在本篇文章中介绍一下这两者的不同。</p><h2 id="QDir"><a href="#QDir" class="headerlink" title="QDir"></a>QDir</h2><p>Qt 的基本思路是继承大于组合，所以 Qt 为我们提供的都是各种继承的类，在 Qt 中，我们使用 QDir 类进行目录操作。</p><p>QDir 类使用相对或绝对文件路径来指向一个文件或目录。如果总是使用 “&#x2F;” 作为目录分隔符，Qt 将会把你的路径转化为符合底层的操作系统的。</p><p>QDir 类由于不涉及 IO 的具体操作，所以没有继承自 QObject 或者其他 QIO 的类。</p><p>QDir 提供了非常多的方法，可以方便的获取目录的名称、绝对路径、相对路径、设置目录过滤器等。</p><p>一个基本的用法如下:</p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Qt">QDir dir(<span class="hljs-string">&quot;/tmp&quot;</span>);<br><span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> QFileInfo&amp; <span class="hljs-attribute">item</span> : dir.entryInfoList()) &#123;<br>    <span class="hljs-keyword">if</span> (item.isDir()) &#123;<br>        <span class="hljs-comment">// ...</span><br>      &#125;<br>&#125;<br><br>dir.setFilter(<span class="hljs-attribute">QDir</span>::Files | <span class="hljs-attribute">QDir</span>::Hidden | <span class="hljs-attribute">QDir</span>::NoSymLinks);<br>dir.setSorting(<span class="hljs-attribute">QDir</span>::Size | <span class="hljs-attribute">QDir</span>::Reversed);<br><br><span class="hljs-keyword">const</span> QFileInfoList&amp; <span class="hljs-built_in">list</span> = dir.entryInfoList();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> QFileInfo&amp; <span class="hljs-attribute">item</span> : <span class="hljs-built_in">list</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例代码中可以看到，QDir 整体是非常符合面向对象的，我们使用 QDir 对象，对目录执行各种操作，涉及到具体的文件（目录是特殊的文件），我们可以使用 QFileInfo 类获取具体文件的信息。</p><p>除了以上演示涉及到的方法，QDir 还有很多其他方法，使用 <code>count()</code> 方法统计目录内文件和目录的数量，使用 <code>remove()</code> 方法删除指定的目录，这里就不一一列举了。</p><p>QDir 支持设置多种过滤，过滤(Filter) 和 排序(Sorting) 都会影响到 entryInfoList 方法返回的内容。</p><p>QDir 接受的过滤器枚举:</p><table><thead><tr><th>枚举</th><th>枚举值</th><th>描述</th></tr></thead><tbody><tr><td>QDir::Dirs</td><td>0x001</td><td>列出与过滤器匹配的目录。</td></tr><tr><td>QDir::AllDirs</td><td>0x400</td><td>列出所有目录；即不要将过滤器应用于目录名称。</td></tr><tr><td>QDir::Files</td><td>0x002</td><td>列出文件。</td></tr><tr><td>QDir::Drives</td><td>0x004</td><td>列出磁盘驱动器（在Unix下忽略）。</td></tr><tr><td>QDir::NoSymLinks</td><td>0x008</td><td>不要列出符号链接（不支持符号链接的操作系统忽略）。</td></tr><tr><td>QDir::NoDotAndDotDot</td><td>NoDot</td><td>NoDotDot</td></tr><tr><td>QDir::NoDot</td><td>0x2000</td><td>不要列出特殊条目“.”。</td></tr><tr><td>QDir::NoDotDot</td><td>0x4000</td><td>不要列出特殊条目“..”。</td></tr><tr><td>QDir::AllEntries</td><td>Dirs</td><td>Files</td></tr><tr><td>QDir::Readable</td><td>0x010</td><td>列出应用程序具有读取访问权限的文件。可读值需要与Dirs或Files合并。</td></tr><tr><td>QDir::Writable</td><td>0x020</td><td>列出应用程序具有写入访问权限的文件。可写值需要与Dirs或Files合并。</td></tr><tr><td>QDir::Executable</td><td>0x040</td><td>列出应用程序具有执行访问权限的文件。可执行值需要与Dirs或Files合并。</td></tr><tr><td>QDir::Modified</td><td>0x080</td><td>仅列出已修改的文件（在Unix上忽略）。</td></tr><tr><td>QDir::Hidden</td><td>0x100</td><td>列出隐藏的文件（在Unix上，以“.”开头的文件）。</td></tr><tr><td>QDir::System</td><td>0x200</td><td>列出系统文件（包括Unix、FIFO、套接字和设备文件；在Windows上，包括.lnk文件）</td></tr><tr><td>QDir::CaseSensitive</td><td>0x800</td><td>过滤器应该区分大小写。</td></tr></tbody></table><p>QDir 接受的排序枚举:</p><table><thead><tr><th>枚举</th><th>枚举值</th><th>描述</th></tr></thead><tbody><tr><td>QDir::Name</td><td>0x00</td><td>按名称排序。</td></tr><tr><td>QDir::Time</td><td>0x01</td><td>按时间（修改时间）排序。</td></tr><tr><td>QDir::Size</td><td>0x02</td><td>按文件大小排序。</td></tr><tr><td>QDir::Type</td><td>0x80</td><td>按文件类型（扩展名）排序。</td></tr><tr><td>QDir::Unsorted</td><td>0x03</td><td>不要排序。</td></tr><tr><td>QDir::NoSort</td><td>-1</td><td>默认情况下未排序。</td></tr><tr><td>QDir::DirsFirst</td><td>0x04</td><td>先放目录，然后放文件。</td></tr><tr><td>QDir::DirsLast</td><td>0x20</td><td>先放文件，然后放目录。</td></tr><tr><td>QDir::Reversed</td><td>0x08</td><td>颠倒排序顺序。</td></tr><tr><td>QDir::IgnoreCase</td><td>0x10</td><td>不区分大小写的排序。</td></tr><tr><td>QDir::LocaleAware</td><td>0x40</td><td>使用当前区域设置对项目进行适当排序。</td></tr></tbody></table><h2 id="std-filesystem"><a href="#std-filesystem" class="headerlink" title="std::filesystem"></a>std::filesystem</h2><p>上面介绍了 Qt 的设计风格，而标准库的设计风格是组合大于继承，标准库提供各种非常具体的类或者函数，将一个系列的操作拆分为各个子项，最终完成任务。</p><p>这里使用一个小例子来说明一下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::filesystem::path tmp&#123;<span class="hljs-string">&quot;/tmp&quot;</span>&#125;;<br><span class="hljs-keyword">if</span> (!std::filesystem::<span class="hljs-built_in">exists</span>(tmp)) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;目录不存在&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">bool</span> result = std::filesystem::<span class="hljs-built_in">create_directories</span>(tmp);<br><span class="hljs-keyword">if</span> (!result) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;目录创建失败，也许是已经存在。&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> <span class="hljs-type">const</span>&amp; dir_entry : std::filesystem::<span class="hljs-built_in">directory_iterator</span>(tmp)) &#123;<br>    <span class="hljs-keyword">if</span> (dir_entry.<span class="hljs-built_in">is_directory</span>()) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (std::filesystem::<span class="hljs-built_in">is_directory</span>(tmp)) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，C++ 标准库使用多个类共同完成了对目录的检查和遍历，这种基于组合的方式可以带来更多的灵活性，如果需要对某个部分进行修改，只需要继承特定类就可以完成，如果是 Qt 的 QDir，则不是很轻松。</p><p>在使用标准库的时候需要注意的是，标准库通常不会约束使用者，使用当前的例子举例，QDir 提供了过滤器枚举，可以帮助开发者简单的实现文件过滤功能，但是 std::filesystem 则不提供这种接口，标准库提供了机制，但是不提供策略，开发者需要使用标准库提供的各种接口，<strong>组合</strong> 出自己的业务，所以如果想要使用标准库的时候也能实现过滤和排序，就只能自己提供相应的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::filesystem::path tmp&#123; <span class="hljs-string">&quot;/tmp&quot;</span> &#125;;<br>std::vector&lt;std::filesystem::directory_entry&gt; list;<br>std::vector&lt;std::string&gt; filter&#123; <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;.txt&quot;</span> &#125;;<br>std::filesystem::directory_iterator iter&#123; tmp &#125;;<br>std::<span class="hljs-built_in">copy_if</span>(iter.<span class="hljs-built_in">begin</span>(),<br>             iter.<span class="hljs-built_in">end</span>(),<br>             std::<span class="hljs-built_in">back_inserter</span>(list),<br>             [filter](std::filesystem::directory_entry entry) &#123;<br>                <span class="hljs-keyword">return</span> !entry.<span class="hljs-built_in">is_directory</span>() &amp;&amp; <br>                       std::<span class="hljs-built_in">find_if</span>(filter.<span class="hljs-built_in">begin</span>(),<br>                                    filter.<span class="hljs-built_in">end</span>(),<br>                                    [entry](std::string s) &#123;<br>                                      <span class="hljs-keyword">return</span> entry.<span class="hljs-built_in">path</span>().<span class="hljs-built_in">extension</span>() == s;<br>                                    &#125;<br>                       );<br>              &#125;<br>);<br></code></pre></td></tr></table></figure><p><del>可以看到，代码变得异常丑陋（逃</del></p><p>标准库提供了一些比较方便的函数，例如 std::copy_if、 std::back_inserter 和 std::find_if 等，还有一个较为常用的 std::transform。标准库提供了迭代器抽象，这样我们可以使用迭代器对象和迭代器算法，方便的进行各种遍历、复制和转换。</p><p>从上面的例子可以看出，Qt 确实为开发者提供了很好的帮助，这是 Qt 作为一个平台力所能及的工作，当然，即使我们使用 Qt，也还是可以写出上面一样的代码。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是简单的 QDir 和 std::filesystem 的不同，综合来看，Qt 库和标准库其实各有优缺，他们的目标和面向的开发者是不同的，Qt 最近一直在尝试使用标准库的内容来代替自己的一部分组件，最新的Qt6 就已经升级到了 C++ 17 标准，将 qSort 宏改为了使用 std::sort，也许在不久的将来，我们再也不用为使用 Qt 还是标准库而争论或者站队。</p><blockquote><p><strong>引用资料</strong><br><a href="https://en.cppreference.com/w/cpp/filesystem">std::filesystem https://en.cppreference.com/w/cpp/filesystem</a><br><a href="https://doc.qt.io/qt-5/qdir.html">QDir https://doc.qt.io/qt-5/qdir.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作为一名使用 Qt 的开发人员，Qt 为我提供了大量好用的基础设施，例如广受好评的 QString、QNetwork之类的，这是 Qt 平台为我提供的帮助，我只需要在这个平台上开发就足够了。&lt;/p&gt;
&lt;p&gt;同样作为一名 C++ 开发人员，C++ 标准库也是我需要用的基础设施</summary>
      
    
    
    
    
    <category term="C++" scheme="https://blog.justforlxz.com/tags/C/"/>
    
    <category term="Qt" scheme="https://blog.justforlxz.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>How to use cuda with deepin</title>
    <link href="https://blog.justforlxz.com/2022/02/25/How-to-use-cuda-with-deepin/"/>
    <id>https://blog.justforlxz.com/2022/02/25/How-to-use-cuda-with-deepin/</id>
    <published>2022-02-25T02:06:05.000Z</published>
    <updated>2023-04-11T05:16:53.737Z</updated>
    
    <content type="html"><![CDATA[<p>CUDA（Compute Unified Device Architecture，统一计算架构）是由NVIDIA所推出的一种集成技术，是该公司对于GPGPU的正式名称。通过这个技术，用户可利用NVIDIA的GeForce 8以后的GPU和较新的Quadro GPU进行计算。亦是首次可以利用GPU作为C-编译器的开发环境。NVIDIA营销的时候，往往将编译器与架构混合推广，造成混乱。实际上，CUDA可以兼容OpenCL或者自家的C-编译器。无论是CUDA C-语言或是OpenCL，指令最终都会被驱动程序转换成PTX代码，交由显示核心计算。</p><p>在论坛上看到有些用户希望在 deepin 下使用 CUDA，但是他们采取的做法往往是手动下载nvidia的二进制文件，直接进行安装。</p><p>但是这样会破坏一部分的 glx 链接，导致卸载的时候无法彻底恢复，结果就是系统因为卸载nvidia驱动而废掉，所以我强烈推荐使用包管理器的方式安装 nvidia 驱动和 CUDA 相关的东西，尽量不要手动修改。</p><p>在其他发行版，例如 arch，安装 NVIDIA 包会提供一个配置文件自动加载对应的内核模块，而 deepin 的包是来自 debian，debian 并没有做这个事情，这就导致在 deepin 上安装 NVIDIA 驱动后，<br>显示相关的内核模块会被 X 加载，而 CUDA 相关的内核模块并不会被加载，所以我们对包进行了修改，添加了自动加载内核模块的配置文件。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>如果想要直接使用 CUDA 的开发头文件，那么需要安装以下的包，不过会依赖很多nvidia的库，总量还是有一些的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install nvidia-cuda-dev nvidia-cuda-toolkit<br></code></pre></td></tr></table></figure><p>现在，重启一下系统就可以正常使用了。如果不想重启系统，可以手动执行命令加载内核模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo modprobe nvidia_uvm<br></code></pre></td></tr></table></figure><h2 id="CUDA-小例子"><a href="#CUDA-小例子" class="headerlink" title="CUDA 小例子"></a>CUDA 小例子</h2><p><a href="https://bingliu221.gitbooks.io/learn-cuda-the-simple-way/content/chapter2.html/">这里有个小栗子，可以用来测试 CUDA 是否能够成功编译和运行</a></p><p><strong>将以下代码保存为 main.cu</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">vector_add</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">int</span> *b, <span class="hljs-type">int</span> *c)</span> </span>&#123;<br>    *c = *a + *b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> a = <span class="hljs-number">2</span>, b = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> *dev_a, *dev_b, *dev_c;<br><br>    <span class="hljs-built_in">cudaMalloc</span>((<span class="hljs-type">void</span> **)&amp;dev_a, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">cudaMalloc</span>((<span class="hljs-type">void</span> **)&amp;dev_b, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">cudaMalloc</span>((<span class="hljs-type">void</span> **)&amp;dev_c, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br><br>    <span class="hljs-built_in">cudaMemcpy</span>(dev_a, &amp;a, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br>    <span class="hljs-built_in">cudaMemcpy</span>(dev_b, &amp;b, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br><br>    vector_add&lt;&lt;&lt;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&gt;&gt;&gt;(dev_a, dev_b, dev_c);<br><br>    <span class="hljs-built_in">cudaMemcpy</span>(&amp;c, dev_c, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyDeviceToHost);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d + %d = %d, Is that right?\n&quot;</span>, a, b, c);<br><br>    <span class="hljs-built_in">cudaFree</span>(dev_a);<br>    <span class="hljs-built_in">cudaFree</span>(dev_b);<br>    <span class="hljs-built_in">cudaFree</span>(dev_c);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nvcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.cu</span><br></code></pre></td></tr></table></figure><p>运行:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">./a.<span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p>如果一切顺利，在编译的时候就不会有报错，不过在我的环境下nvcc会有架构被弃用的警告，本着只要不error就算没事的原则，我们无视这条警告即可。</p><p>输出结果:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span>+ <span class="hljs-number">5</span> = <span class="hljs-number">0</span>, Is that right?<br></code></pre></td></tr></table></figure><h2 id="Machine-Learning-测试"><a href="#Machine-Learning-测试" class="headerlink" title="Machine Learning 测试"></a>Machine Learning 测试</h2><p>既然都用上 Nvidia 显卡和 CUDA 驱动了，那肯定是要炼一个丹呀。</p><p>先安装 Anaconda，这是一个 python 的发行版，提供了一个完整的科学计算环境，包括 NumPy、SciPy 等常用科学计算库。当然，你有权选择自己喜欢的 Python 环境。</p><p>可以根据 anaconda 官方教程来安装 <a href="https://docs.conda.io/en/latest/miniconda.html#linux-installers">https://docs.conda.io/en/latest/miniconda.html#linux-installers</a></p><p>创建一个存放 tensorflow demo 的目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir tensorflow<br></code></pre></td></tr></table></figure><p>使用 conda 创建一个新的环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd tensorflow<br>conda create --name tf2 python=3.7      # “tf2”是你建立的conda虚拟环境的名字<br>conda activate tf2                      # 进入名为“tf2”的conda虚拟环境<br></code></pre></td></tr></table></figure><p>这时候我们就会看到shell中会提示一个 <code>(tf2)</code>，说明当前 shell 使用的是 conda venv 环境，我们可以在当前环境中安装各种依赖包。</p><p>为了能正常使用 tensorflow，我们还需要安装 cudnn，可以通过 anaconda 来安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">(tf2) $ conda install -c anaconda cudnn tensorflow-gpu<br></code></pre></td></tr></table></figure><p>当环境准备就绪，我们创建一个 tf.py 文件，将测试代码写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><br>mnist = tf.keras.datasets.mnist<br><br>(x_train, y_train),(x_test, y_test) = mnist.load_data()<br>x_train, x_test = x_train / <span class="hljs-number">255.0</span>, x_test / <span class="hljs-number">255.0</span><br><br>model = tf.keras.models.Sequential([<br>  tf.keras.layers.Flatten(input_shape=(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)),<br>  tf.keras.layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>  tf.keras.layers.Dropout(<span class="hljs-number">0.2</span>),<br>  tf.keras.layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br><br>model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>,<br>              loss=<span class="hljs-string">&#x27;sparse_categorical_crossentropy&#x27;</span>,<br>              metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br><br>model.fit(x_train, y_train, epochs=<span class="hljs-number">5</span>)<br>model.evaluate(x_test, y_test)<br></code></pre></td></tr></table></figure><p>执行这个 py 文件，就可以看到开始自动炼丹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell">(tf2) ~/tensorflow$ python tf.py<br>2022-01-06 22:12:31.752249: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1<br>2022-01-06 22:12:31.787298: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero<br>2022-01-06 22:12:31.787645: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties:<br>pciBusID: 0000:01:00.0 name: NVIDIA GeForce RTX 3070 computeCapability: 8.6<br>coreClock: 1.815GHz coreCount: 46 deviceMemorySize: 7.79GiB deviceMemoryBandwidth: 417.29GiB/s<br>2022-01-06 22:12:31.788616: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.1<br>2022-01-06 22:12:31.802163: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10<br>2022-01-06 22:12:31.811230: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10<br>2022-01-06 22:12:31.813348: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10<br>2022-01-06 22:12:31.832304: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10<br>2022-01-06 22:12:31.837966: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10<br>2022-01-06 22:12:31.874633: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7<br>2022-01-06 22:12:31.874864: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero<br>2022-01-06 22:12:31.875707: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero<br>2022-01-06 22:12:31.876401: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1703] Adding visible gpu devices: 0<br>2022-01-06 22:12:31.877075: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA<br>2022-01-06 22:12:31.903636: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 3609600000 Hz<br>2022-01-06 22:12:31.906524: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x559ed2e8b830 initialized for platform Host (this does not guarantee that XLA will be used). Devices:<br>2022-01-06 22:12:31.906581: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version<br>2022-01-06 22:12:31.907492: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero<br>2022-01-06 22:12:31.908582: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties:<br>pciBusID: 0000:01:00.0 name: NVIDIA GeForce RTX 3070 computeCapability: 8.6<br>coreClock: 1.815GHz coreCount: 46 deviceMemorySize: 7.79GiB deviceMemoryBandwidth: 417.29GiB/s<br>2022-01-06 22:12:31.908632: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.1<br>2022-01-06 22:12:31.908655: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10<br>2022-01-06 22:12:31.908674: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10<br>2022-01-06 22:12:31.908695: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10<br>2022-01-06 22:12:31.908714: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10<br>2022-01-06 22:12:31.908732: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10<br>2022-01-06 22:12:31.908751: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7<br>2022-01-06 22:12:31.908855: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero<br>2022-01-06 22:12:31.909548: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero<br>2022-01-06 22:12:31.910177: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1703] Adding visible gpu devices: 0<br>2022-01-06 22:12:31.910430: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.1<br>2022-01-06 22:12:31.964445: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1102] Device interconnect StreamExecutor with strength 1 edge matrix:<br>2022-01-06 22:12:31.964465: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1108]      0<br>2022-01-06 22:12:31.964468: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1121] 0:   N<br>2022-01-06 22:12:31.964586: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero<br>2022-01-06 22:12:31.964866: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero<br>2022-01-06 22:12:31.965060: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero<br>2022-01-06 22:12:31.965367: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1247] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 4626 MB memory) -&gt; physical GPU (device: 0, name: NVIDIA GeForce RTX 3070, pci bus id: 0000:01:00.0, compute capability: 8.6)<br>2022-01-06 22:12:31.966801: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x559ed4798980 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:<br>2022-01-06 22:12:31.966811: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): NVIDIA GeForce RTX 3070, Compute Capability 8.6<br>2022-01-06 22:15:23.414471: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 188160000 exceeds 10% of free system memory.<br>Epoch 1/5<br>2022-01-06 22:15:23.672182: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10<br>1875/1875 [==============================] - 3s 2ms/step - loss: 0.2967 - accuracy: 0.9131<br>Epoch 2/5<br>1875/1875 [==============================] - 3s 2ms/step - loss: 0.1440 - accuracy: 0.9578<br>Epoch 3/5<br>1875/1875 [==============================] - 3s 2ms/step - loss: 0.1097 - accuracy: 0.9670<br>Epoch 4/5<br>1875/1875 [==============================] - 2s 1ms/step - loss: 0.0881 - accuracy: 0.9732<br>Epoch 5/5<br>1875/1875 [==============================] - 2s 966us/step - loss: 0.0751 - accuracy: 0.9768<br>2022-01-06 22:16:32.382922: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 31360000 exceeds 10% of free system memory.<br>313/313 [==============================] - 1s 2ms/step - loss: 0.0716 - accuracy: 0.9781<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CUDA（Compute Unified Device Architecture，统一计算架构）是由NVIDIA所推出的一种集成技术，是该公司对于GPGPU的正式名称。通过这个技术，用户可利用NVIDIA的GeForce 8以后的GPU和较新的Quadro GPU进行计算。</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="Linux" scheme="https://blog.justforlxz.com/tags/Linux/"/>
    
  </entry>
  
</feed>
