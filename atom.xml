<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小竹&#39;s blog</title>
  
  <subtitle>永远不要停止思考</subtitle>
  <link href="https://blog.justforlxz.com/atom.xml" rel="self"/>
  
  <link href="https://blog.justforlxz.com/"/>
  <updated>2024-12-31T07:12:35.112Z</updated>
  <id>https://blog.justforlxz.com/</id>
  
  <author>
    <name>小竹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 VK-GL-CTS 对 wayland 执行一致性测试</title>
    <link href="https://blog.justforlxz.com/2024/12/27/vk-gl-cts-test-wayland/"/>
    <id>https://blog.justforlxz.com/2024/12/27/vk-gl-cts-test-wayland/</id>
    <published>2024-12-26T16:00:00.000Z</published>
    <updated>2024-12-31T07:12:35.112Z</updated>
    
    <content type="html"><![CDATA[<aside>😭 华为那边使用 deqp-vk 作为测试项，结果 kwin_wayland 有个测试没通过，沟通了一星期才知道是公开的测试套件，但是在 uos 1070 上构建遇到了点问题，我把坑记录一下。</aside><p>uos 1070 里的 gcc 太旧了，需要安装 clang-13，然后更新软链。还需要安装 libc++abi-13，不能碰任何 gcc 的东西。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install libwayland-dev wayland-protocols cmake ninja-build clang-13 libc++1-13 libc++-13-dev libc++abi1-13 libc++abi-13-dev </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/clang clang /usr/bin/clang-13 100</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-13 100</span><br></pre></td></tr></table></figure><p>拉取代码 <a href="https://github.com/KhronosGroup/VK-GL-CTS/">https://github.com/KhronosGroup/VK-GL-CTS/</a> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/KhronosGroup/VK-GL-CTS/</span><br></pre></td></tr></table></figure><p>拉完代码以后，还需要执行脚本把依赖项都拉去了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 external/fetch_sources.py</span><br></pre></td></tr></table></figure><p>同时还需要在系统里安装 python3-lxml。</p><p>更新完所有依赖后，我只需要 deqp-vk 这一个 target，而 khronosGroup 给 VK-GL-CTS 提供了 SELECTED_BUILD_TARGETS 变量。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -B build -GNinja \</span><br><span class="line">      -DSELECTED_BUILD_TARGETS=deqp-vk \</span><br><span class="line">      -DCMAKE_BUILD_TYPE=Debug \</span><br><span class="line">      -DCMAKE_CXX_STANDARD=17 \</span><br><span class="line">      -DCMAKE_CXX_STANDARD_REQUIRED=ON \</span><br><span class="line">      -DCMAKE_CXX_EXTENSIONS=OFF \</span><br><span class="line">      -DCMAKE_CXX_FLAGS=<span class="string">&quot;-stdlib=libc++&quot;</span> \</span><br><span class="line">      -DCMAKE_EXE_LINKER_FLAGS=<span class="string">&quot;-lstdc++fs&quot;</span> \</span><br><span class="line">      -DCMAKE_SHARED_LINKER_FLAGS=<span class="string">&quot;-lstdc++fs&quot;</span> \</span><br><span class="line">      -DCMAKE_C_COMPILER=clang \</span><br><span class="line">      -DCMAKE_CXX_COMPILER=clang++</span><br></pre></td></tr></table></figure><p>就可以完成构建系统的准备。之后就可以正常构建了，大概需要编译 1331 个单元，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake --build build --target deqp-vk</span><br></pre></td></tr></table></figure><p>等构建完成后，使用华为提供的测试命令执行测试。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./build/external/vulkancts/modules/vulkan/deqp-vk --deqp-case=dEQP-VK.wsi.wayland.swapchain.render.10swapchains</span><br></pre></td></tr></table></figure><p>运行前最好使用 vulkaninfo 测试一下 vulkan 信息。如果没有成功运行，安装一下 mesa-vulkan-drivers。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install mesa-vulkan-drivers</span><br></pre></td></tr></table></figure><p>会看到通过了 case。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ ./build/external/vulkancts/modules/vulkan/deqp-vk --deqp-case=dEQP-VK.wsi.wayland.swapchain.render.10swapchains</span><br><span class="line">Writing <span class="built_in">test</span> <span class="built_in">log</span> into TestResults.qpa</span><br><span class="line">dEQP Core vulkan-cts-1.4.1.0-93-g7655439d7333848a59d3114ee6227a26259b2b4b (0x7655439d) starting..</span><br><span class="line">  target implementation = <span class="string">&#x27;Default&#x27;</span></span><br><span class="line">B%&lt;-------- Process name: deqp-vk. Logging ended at: Fri Dec 27 15:52:34 2024</span><br><span class="line"></span><br><span class="line">Test <span class="keyword">case</span> <span class="string">&#x27;dEQP-VK.wsi.wayland.swapchain.render.10swapchains&#x27;</span>..</span><br><span class="line">?%&lt;-------- Process name: deqp-vk. Logging ended at: Fri Dec 27 15:52:37 2024</span><br><span class="line"></span><br><span class="line">  Pass (Rendering tests succeeded)</span><br><span class="line">&lt;-------- Process name: deqp-vk. Logging ended at: Fri Dec 27 15:52:37 2024</span><br><span class="line"></span><br><span class="line">DONE!</span><br><span class="line"></span><br><span class="line">Test run totals:</span><br><span class="line">  Passed:        1/1 (100.0%)</span><br><span class="line">  Failed:        0/1 (0.0%)</span><br><span class="line">  Not supported: 0/1 (0.0%)</span><br><span class="line">  Warnings:      0/1 (0.0%)</span><br><span class="line">  Waived:        0/1 (0.0%)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;aside&gt;
😭 华为那边使用 deqp-vk 作为测试项，结果 kwin_wayland 有个测试没通过，沟通了一星期才知道是公开的测试套件，但是在 uos 1070 上构建遇到了点问题，我把坑记录一下。

&lt;/aside&gt;

&lt;p&gt;uos 1070 里的 gcc 太旧了，</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.justforlxz.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="UOS, Vulkan, 图形学, 开发" scheme="https://blog.justforlxz.com/tags/UOS-Vulkan-%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Nix home-manager 使用笔记</title>
    <link href="https://blog.justforlxz.com/2024/12/25/nix-home-manager/"/>
    <id>https://blog.justforlxz.com/2024/12/25/nix-home-manager/</id>
    <published>2024-12-24T16:00:00.000Z</published>
    <updated>2024-12-31T07:11:18.575Z</updated>
    
    <content type="html"><![CDATA[<aside>😵‍💫 每次都忘了要运行啥</aside><h2 id="安装-nix"><a href="#安装-nix" class="headerlink" title="安装 nix"></a>安装 nix</h2><p><code>sh &lt;(curl -L https://nixos.org/nix/install) --no-daemon</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>创建文件 <code>~/.config/nix/nix.conf</code>,写入以下内容：</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">e<span class="attr">xperimental-features</span> <span class="operator">=</span> nix-command flakes</span><br></pre></td></tr></table></figure><p>创建目录 <code>~/.config/home-manager/</code>,需要两个文件，我的配置里使用 flake 作为辅助，所以先创建 <code>flake.nix</code> 文件，写入以下内容：</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">description</span> <span class="operator">=</span> <span class="string">&quot;Home Manager configuration for Me QwQ&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">inputs</span> <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="attr">nixpkgs.url</span> <span class="operator">=</span> <span class="string">&quot;github:nixos/nixpkgs/nixos-unstable&quot;</span>;</span><br><span class="line">    <span class="attr">home-manager</span> <span class="operator">=</span> &#123;</span><br><span class="line">      <span class="attr">url</span> <span class="operator">=</span> <span class="string">&quot;github:nix-community/home-manager&quot;</span>;</span><br><span class="line">      <span class="attr">inputs.nixpkgs.follows</span> <span class="operator">=</span> <span class="string">&quot;nixpkgs&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="attr">flake-utils.url</span> <span class="operator">=</span> <span class="string">&quot;github:numtide/flake-utils&quot;</span>;</span><br><span class="line">    <span class="attr">neovim-nightly-overlay</span> <span class="operator">=</span> &#123;</span><br><span class="line">      <span class="attr">url</span> <span class="operator">=</span> <span class="string">&quot;github:nix-community/neovim-nightly-overlay&quot;</span>;</span><br><span class="line">      <span class="attr">inputs.nixpkgs.follows</span> <span class="operator">=</span> <span class="string">&quot;nixpkgs&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="attr">outputs</span> <span class="operator">=</span> &#123; self, flake-utils, nixpkgs, home-manager, neovim-nightly-overlay, ... &#125;@<span class="params">inputs:</span></span><br><span class="line">    flake-utils.lib.eachDefaultSystemPassThrough (<span class="params">system:</span></span><br><span class="line">      <span class="keyword">let</span></span><br><span class="line">        <span class="attr">pkgs</span> <span class="operator">=</span> nixpkgs.legacyPackages.$&#123;system&#125;;</span><br><span class="line">      <span class="keyword">in</span> &#123;</span><br><span class="line">        <span class="attr">homeConfigurations.lxz</span> <span class="operator">=</span> home-manager.lib.homeManagerConfiguration &#123;</span><br><span class="line">          <span class="keyword">inherit</span> pkgs;</span><br><span class="line"></span><br><span class="line">          <span class="comment"># Specify your home configuration modules here, for example,</span></span><br><span class="line">          <span class="comment"># the path to your home.nix.</span></span><br><span class="line">          <span class="attr">modules</span> <span class="operator">=</span> [</span><br><span class="line">            <span class="symbol">./home.nix</span></span><br><span class="line">          ];</span><br><span class="line"></span><br><span class="line">          <span class="comment"># Optionally use extraSpecialArgs</span></span><br><span class="line">          <span class="comment"># to pass through arguments to home.nix</span></span><br><span class="line">          <span class="attr">extraSpecialArgs</span> <span class="operator">=</span> &#123; <span class="keyword">inherit</span> inputs; &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nix 的语法就不在这里介绍了，还需要创建一个 <code>home.nix</code>，写入以下内容：</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&#123; inputs, config, pkgs, ... &#125;:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"># Home Manager needs a bit of information about you and the</span></span><br><span class="line">  <span class="comment"># paths it should manage.</span></span><br><span class="line">  <span class="attr">home.username</span> <span class="operator">=</span> <span class="string">&quot;lxz&quot;</span>;</span><br><span class="line">  <span class="attr">home.homeDirectory</span> <span class="operator">=</span> <span class="string">&quot;/home/lxz&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">home.packages</span> <span class="operator">=</span> <span class="keyword">with</span> pkgs; [</span><br><span class="line">    git-lfs</span><br><span class="line">    neofetch</span><br><span class="line">    htop</span><br><span class="line">    ripgrep</span><br><span class="line">    lazygit</span><br><span class="line">    gh</span><br><span class="line">    go</span><br><span class="line">    cargo</span><br><span class="line">    lemonade</span><br><span class="line">    nix-index</span><br><span class="line">    nix-update</span><br><span class="line"></span><br><span class="line">    <span class="comment"># font</span></span><br><span class="line">    noto-fonts</span><br><span class="line">    noto-fonts-cjk</span><br><span class="line">    noto-fonts-emoji</span><br><span class="line">    liberation_ttf</span><br><span class="line">    fira-code</span><br><span class="line">    fira-code-symbols</span><br><span class="line">    fira-code-nerdfont</span><br><span class="line">    sarasa-gothic</span><br><span class="line">    (nerdfonts.override &#123; <span class="attr">fonts</span> <span class="operator">=</span> [ <span class="string">&quot;FiraCode&quot;</span> <span class="string">&quot;DroidSansMono&quot;</span> ]; &#125;)</span><br><span class="line"></span><br><span class="line">    nodejs</span><br><span class="line"></span><br><span class="line">    <span class="comment"># neovim nightly</span></span><br><span class="line">    neovim</span><br><span class="line">    <span class="comment"># neovim-nightly</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="attr">nixpkgs.overlays</span> <span class="operator">=</span> [</span><br><span class="line">    inputs.neovim-nightly-overlay.overlays.default</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="attr">fonts.fontconfig.enable</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment"># Allow fontconfig to discover fonts in home.packages</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">programs.fzf</span> <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="attr">enable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="attr">enableBashIntegration</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="attr">enableZshIntegration</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="attr">services.gpg-agent</span> <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="attr">enable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="attr">defaultCacheTtl</span> <span class="operator">=</span> <span class="number">1800</span>;</span><br><span class="line">    <span class="attr">enableSshSupport</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="attr">home.shellAliases</span> <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="string">&quot;...&quot;</span> <span class="operator">=</span> <span class="string">&quot;cd ../..&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="attr">home.stateVersion</span> <span class="operator">=</span> <span class="string">&quot;24.05&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Let Home Manager install and manage itself.</span></span><br><span class="line">  <span class="attr">programs.home-manager.enable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件的配置就是安装和配置软件了，可以看到我定义了一些路径和软件包，以及字体的 override 等，可以按需修改。</p><h2 id="安装和更新"><a href="#安装和更新" class="headerlink" title="安装和更新"></a>安装和更新</h2><p><code>nix flake update</code> 更新下仓库</p><p><code>nix-shell -p home-manager</code> 安装一个 home-manager。</p><p><code>home-manager switch --flake .</code> 使用当前配置安装 nix 软件包，其中包括了 home-manager。</p>]]></content>
    
    
    <summary type="html">每次都忘了要运行啥，记下来</summary>
    
    
    
    <category term="技术分享" scheme="https://blog.justforlxz.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="dotfile" scheme="https://blog.justforlxz.com/tags/dotfile/"/>
    
  </entry>
  
  <entry>
    <title>异世相遇，尽享美味</title>
    <link href="https://blog.justforlxz.com/2024/11/23/have-a-nice-day/"/>
    <id>https://blog.justforlxz.com/2024/11/23/have-a-nice-day/</id>
    <published>2024-11-22T16:00:00.000Z</published>
    <updated>2024-12-31T07:21:03.715Z</updated>
    
    <content type="html"><![CDATA[<p>今天周五，下班去接老婆下班回家，快到家的时候突然有点嘴馋，想吃烧烤。</p><p>我：以前去的那家韩国烤肉店花了多少钱？</p><p>老婆：三百多。</p><p>我：三百多太贵了，不去！（拍大腿）</p><p>我：三百块都够买多少肉了。</p><p>老婆：那在家自己做？买点五花，买点泡菜，生菜，家里还有牛肉。</p><p>我：可以，自己做下也费不了多少功夫，还能吃到饱。</p><p>老婆：用电饼铛直接烤。</p><p>我：电饼铛火力不够吧。</p><p>老婆：够，不行还有小烤盘，专门烤肉的。</p><p>我：好，现在过去买肉。</p><p>最终花了不到一百块钱，两个人吃到撑，还没吃完。 😀</p><p>五花肉 23元 楼下超市</p><p>牛肉 10元   永旺夜间打折</p><p>生菜 2元    楼下菜市场送的</p><p>锅圈 40元   只能自己花钱了</p><p>😭 想想以前四五百去外边吃，还吃不饱。</p><img src="/2024/11/23/have-a-nice-day/image.png" class="" title="image.png"><img src="/2024/11/23/have-a-nice-day/IMG_5439.jpeg" class="" title="IMG_5439.jpeg"><img src="/2024/11/23/have-a-nice-day/IMG_5437.jpeg" class="" title="IMG_5437.jpeg"><img src="/2024/11/23/have-a-nice-day/IMG_5441.jpeg" class="" title="IMG_5441.jpeg"><img src="/2024/11/23/have-a-nice-day/IMG_5440.jpeg" class="" title="IMG_5440.jpeg"><img src="/2024/11/23/have-a-nice-day/IMG_5434.jpeg" class="" title="IMG_5434.jpeg"><img src="/2024/11/23/have-a-nice-day/IMG_5442.jpeg" class="" title="IMG_5442.jpeg"><img src="/2024/11/23/have-a-nice-day/IMG_5435.jpeg" class="" title="IMG_5435.jpeg"><img src="/2024/11/23/have-a-nice-day/IMG_5438.jpeg" class="" title="IMG_5438.jpeg">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天周五，下班去接老婆下班回家，快到家的时候突然有点嘴馋，想吃烧烤。&lt;/p&gt;
&lt;p&gt;我：以前去的那家韩国烤肉店花了多少钱？&lt;/p&gt;
&lt;p&gt;老婆：三百多。&lt;/p&gt;
&lt;p&gt;我：三百多太贵了，不去！（拍大腿）&lt;/p&gt;
&lt;p&gt;我：三百块都够买多少肉了。&lt;/p&gt;
&lt;p&gt;老婆：那在家自</summary>
      
    
    
    
    <category term="心情随笔" scheme="https://blog.justforlxz.com/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="健康, 思考" scheme="https://blog.justforlxz.com/tags/%E5%81%A5%E5%BA%B7-%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Treeland Part.1 如何实现一个基于 wlroots 的合成器</title>
    <link href="https://blog.justforlxz.com/2024/11/09/treeland-part1-how-to-implement-a-wlroots-based-compositor/"/>
    <id>https://blog.justforlxz.com/2024/11/09/treeland-part1-how-to-implement-a-wlroots-based-compositor/</id>
    <published>2024-11-08T16:00:00.000Z</published>
    <updated>2024-12-31T07:15:08.125Z</updated>
    
    <content type="html"><![CDATA[<aside>😀 Treeland 是一个基于 wlroots 和 Qt 的 Wayland 合成器并且支持多用户共用合成器。</aside><h2 id="名词概念"><a href="#名词概念" class="headerlink" title="名词概念"></a>名词概念</h2><h3 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h3><p>Qt（&#x2F;ˈkjuːt&#x2F;，发音同“cute”）是一个跨平台的C++应用程序开发框架。广泛用于开发GUI程序，这种情况下又被称为部件工具箱。也可用于开发非GUI程序，例如控制台工具和服务器。</p><h3 id="wlroots"><a href="#wlroots" class="headerlink" title="wlroots"></a>wlroots</h3><p>用于构建 <a href="https://wayland.freedesktop.org/">Wayland</a> 合成器的模块化工具集，简化了约 60,000 行代码的开发工作。</p><ul><li>提供抽象底层显示和输入的后端，支持 KMS&#x2F;DRM、libinput、Wayland、X11 等，可动态创建和销毁。</li><li>实现多种 Wayland 接口，支持协议扩展，促进合成器标准化。</li><li>提供通用合成器组件，如物理空间输出管理。</li><li>集成 Xwayland 抽象，简化 X11 窗口管理。</li><li>提供渲染器抽象，支持简单和自定义渲染需求。</li></ul><h3 id="seat"><a href="#seat" class="headerlink" title="seat"></a>seat</h3><p>由分配给特定工作场景的所有硬件设备组成。它至少包含一个图形设备，通常还有键盘和鼠标。此外，它可能包括摄像头、声卡等设备。座位由座位名称标识，这是一个短字符串（不超过64个字符），以”seat”四个字符开头，后跟至少一个a-zA-Z0-9范围内的字符，或”_”和”-“。这种命名方式适合用于文件名。座位名称可能是稳定的，也可能不稳定，如果座位再次可用，其名称可以重复使用。</p><h3 id="RHI"><a href="#RHI" class="headerlink" title="RHI"></a>RHI</h3><p>RHI 是 <code>Renderer Hardware Interface</code>（渲染硬件接口）的缩写，是一套对硬件的抽象，在上层只需要设置参数，底层具体使用的是 OpenGL、Vulkan、DX12 还是 Metal 哪套接口，我们是不必关心的。</p><p>Qt6 提供了 QRHI，为 Qt 程序提供了底层的硬件抽象，这样上层的 QtQuick 组件在执行 GPU 渲染时，就可以自动调用对应的驱动接口。</p><h3 id="QPA"><a href="#QPA" class="headerlink" title="QPA"></a>QPA</h3><p>Qt 平台抽象（QPA）是 Qt 中的核心平台抽象层。</p><p>QPA 的 API 可通过类前缀”QPlatform*”识别，用于实现 <a href="https://doc.qt.io/qt-6/qtgui-index.html">Qt GUI</a> 中的高级类。例如，<code>QPlatformWindow</code> 用于窗口系统集成，而 <code>QPlatformTheme</code> 和 <code>QStyleHint</code> 则用于深层次的平台主题和集成。</p><h2 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h2><p><code>Treeland</code> 使用 <code>QQuickWindow</code> 作为渲染的根，这样在 <code>Treeland</code> 里开发时，就如同开发一个普通 Qt 程序一样，先创建一个 Window，在 Window 内创建 Qt 控件，使用 QEvent 处理各种事件。</p><p>那么 Treeland 是如何实现这件事的呢？</p><p><code>QQuickWindow</code> 的私有类提供了自定义 <code>QQuickGraphicsDevice</code> 对象的接口，而 <code>QQuickGraphicsDevice</code> 可以使用 <code>fromOpenGLContext</code> 和 <code>fromPhyicalDevice</code> 创建新的对象，那么 <code>Treeland</code> 只需要继承 <code>QQuickWindow</code>，并从 <code>wlroots</code> 获取 OpenGL context 和 phyical device，就可以将 Qt QuickWindow 的渲染，嫁接到 <code>wlroots</code> 上。</p><p>通过将 <code>wlroots</code> 的渲染上下文与 Qt 的渲染上下文进行结合，可以将 <code>wlroots</code> 渲染的图形结果嵌入到 Qt 应用程序的渲染流程中，可以直接使用 <code>wlroots</code> 提供的图形资源和设备对象，如物理设备（<code>phdev</code>）、逻辑设备（<code>dev</code>）和队列族（<code>queue_family</code>），以减少不必要的上下文切换和资源拷贝。这样，Qt 就可以利用 <code>wlroots</code> 提供的渲染能力，同时能够继续使用 Qt 的渲染框架和 API。</p><p>之后在 Qt QPA 中将屏幕信息，以及输入信息转换成 Qt 内部对象，从而利用 Qt 自身的事件循环等机制继续处理。</p><h2 id="Qt-QPA"><a href="#Qt-QPA" class="headerlink" title="Qt QPA"></a>Qt QPA</h2><p>QPA 为 Qt 提供了跨平台的接口抽象能力，我们可以提供自己的 QPA 插件来为 Qt 程序提供新的能力，例如将 <code>wlroots</code> 的输入事件转换成 Qt 内部事件。</p><h3 id="输入事件处理"><a href="#输入事件处理" class="headerlink" title="输入事件处理"></a>输入事件处理</h3><img src="/2024/11/09/treeland-part1-how-to-implement-a-wlroots-based-compositor/waylib.png" class="" title="Treeland 处理底层事件与上层事件的流程"><p>Treeland 处理底层事件与上层事件的流程</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">WOutputRenderWindow::event</span><span class="params">(QEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_D</span>(WOutputRenderWindow);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">type</span>() == doRenderEventType) &#123;</span><br><span class="line">        QCoreApplication::<span class="built_in">removePostedEvents</span>(<span class="keyword">this</span>, doRenderEventType);</span><br><span class="line">        <span class="built_in">d_func</span>()-&gt;<span class="built_in">doRender</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (QW::RenderWindow::<span class="built_in">beforeDisposeEventFilter</span>(<span class="keyword">this</span>, event)) &#123;</span><br><span class="line">        event-&gt;<span class="built_in">accept</span>();</span><br><span class="line">        QW::RenderWindow::<span class="built_in">afterDisposeEventFilter</span>(<span class="keyword">this</span>, event);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> isAccepted = QQuickWindow::<span class="built_in">event</span>(event);</span><br><span class="line">    <span class="keyword">if</span> (QW::RenderWindow::<span class="built_in">afterDisposeEventFilter</span>(<span class="keyword">this</span>, event))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isAccepted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>WOutputRenderWindow</code> 的事件处理中，会额外调用下 seat 的事件过滤器，确保合成器可以拦截掉一部分事件，例如将一部分按键拦截下来，不发送给客户端。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QWlrootsRenderWindow::beforeDisposeEventFilter</span><span class="params">(QEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">isInputEvent</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> ie = <span class="built_in">static_cast</span>&lt;QInputEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">auto</span> device = WInputDevice::<span class="built_in">from</span>(ie-&gt;<span class="built_in">device</span>());</span><br><span class="line">        <span class="built_in">Q_ASSERT</span>(device);</span><br><span class="line">        <span class="built_in">Q_ASSERT</span>(device-&gt;<span class="built_in">seat</span>());</span><br><span class="line">        lastActiveCursor = device-&gt;<span class="built_in">seat</span>()-&gt;<span class="built_in">cursor</span>();</span><br><span class="line">        <span class="keyword">return</span> device-&gt;<span class="built_in">seat</span>()-&gt;<span class="built_in">filterEventBeforeDisposeStage</span>(<span class="built_in">window</span>(), ie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码展示了转换输入设备的功能，判断输入设备的类型，创建对应的 <code>QInputDevice</code> 对象。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QPointer&lt;QInputDevice&gt; <span class="title">QWlrootsIntegration::addInputDevice</span><span class="params">(WInputDevice *device, <span class="type">const</span> QString &amp;seatName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QPointer&lt;QInputDevice&gt; qtdev;</span><br><span class="line">    <span class="keyword">auto</span> qwDevice = device-&gt;<span class="built_in">handle</span>();</span><br><span class="line">    <span class="type">const</span> QString name = QString::<span class="built_in">fromUtf8</span>(qwDevice-&gt;<span class="built_in">handle</span>()-&gt;name);</span><br><span class="line">    qint64 systemId = <span class="built_in">reinterpret_cast</span>&lt;qint64&gt;(device);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (qwDevice-&gt;<span class="built_in">handle</span>()-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> WLR_INPUT_DEVICE_KEYBOARD: &#123;</span><br><span class="line">        qtdev = <span class="keyword">new</span> <span class="built_in">QInputDevice</span>(name, systemId, QInputDevice::DeviceType::Keyboard, seatName);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WLR_INPUT_DEVICE_POINTER: &#123;</span><br><span class="line">        qtdev = <span class="keyword">new</span> <span class="built_in">QPointingDevice</span>(name, systemId, QInputDevice::DeviceType::TouchPad, QPointingDevice::PointerType::Generic,</span><br><span class="line">                                    QInputDevice::Capability::Position | QInputDevice::Capability::Hover</span><br><span class="line">                                        | QInputDevice::Capability::Scroll | QInputDevice::Capability::MouseEmulation,</span><br><span class="line">                                    <span class="number">10</span>, <span class="number">32</span>, seatName, <span class="built_in">QPointingDeviceUniqueId</span>());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WLR_INPUT_DEVICE_TOUCH: &#123;</span><br><span class="line">        qtdev = <span class="keyword">new</span> <span class="built_in">QPointingDevice</span>(name, systemId, QInputDevice::DeviceType::TouchScreen, QPointingDevice::PointerType::Finger,</span><br><span class="line">                                    QInputDevice::Capability::Position | QInputDevice::Capability::Area | QInputDevice::Capability::MouseEmulation,</span><br><span class="line">                                    <span class="number">10</span>, <span class="number">32</span>, seatName, <span class="built_in">QPointingDeviceUniqueId</span>());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WLR_INPUT_DEVICE_TABLET_TOOL: &#123;</span><br><span class="line">        qtdev = <span class="keyword">new</span> <span class="built_in">QPointingDevice</span>(name, systemId, QInputDevice::DeviceType::Stylus, QPointingDevice::PointerType::Pen,</span><br><span class="line">                                    QInputDevice::Capability::XTilt | QInputDevice::Capability::YTilt | QInputDevice::Capability::Pressure,</span><br><span class="line">                                    <span class="number">1</span>, <span class="number">32</span>, seatName, <span class="built_in">QPointingDeviceUniqueId</span>());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WLR_INPUT_DEVICE_TABLET_PAD: &#123;</span><br><span class="line">        <span class="keyword">auto</span> pad = <span class="built_in">wlr_tablet_pad_from_input_device</span>(qwDevice-&gt;<span class="built_in">handle</span>());</span><br><span class="line">        qtdev = <span class="keyword">new</span> <span class="built_in">QPointingDevice</span>(name, systemId, QInputDevice::DeviceType::TouchPad, QPointingDevice::PointerType::Pen,</span><br><span class="line">                                    QInputDevice::Capability::Position | QInputDevice::Capability::Hover | QInputDevice::Capability::Pressure,</span><br><span class="line">                                    <span class="number">1</span>, pad-&gt;button_count, seatName, <span class="built_in">QPointingDeviceUniqueId</span>());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WLR_INPUT_DEVICE_SWITCH: &#123;</span><br><span class="line">        qtdev = <span class="keyword">new</span> <span class="built_in">QInputDevice</span>(name, systemId, QInputDevice::DeviceType::Keyboard, seatName);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (qtdev) &#123;</span><br><span class="line">        device-&gt;<span class="built_in">setQtDevice</span>(qtdev);</span><br><span class="line">        QWindowSystemInterface::<span class="built_in">registerInputDevice</span>(qtdev);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qtdev-&gt;<span class="built_in">type</span>() == QInputDevice::DeviceType::Mouse || qtdev-&gt;<span class="built_in">type</span>() == QInputDevice::DeviceType::TouchPad) &#123;</span><br><span class="line">            <span class="keyword">auto</span> primaryQtDevice = QPointingDevice::<span class="built_in">primaryPointingDevice</span>();</span><br><span class="line">            <span class="keyword">if</span> (!WInputDevice::<span class="built_in">from</span>(primaryQtDevice)) &#123;</span><br><span class="line">                <span class="comment">// Ensure the primary pointing device is the WInputDevice</span></span><br><span class="line">                <span class="keyword">auto</span> pd = <span class="built_in">const_cast</span>&lt;QPointingDevice*&gt;(primaryQtDevice);</span><br><span class="line">                pd-&gt;<span class="built_in">setParent</span>(<span class="literal">nullptr</span>);</span><br><span class="line">                <span class="keyword">delete</span> pd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Q_ASSERT</span>(WInputDevice::<span class="built_in">from</span>(QPointingDevice::<span class="built_in">primaryPointingDevice</span>()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qtdev-&gt;<span class="built_in">type</span>() == QInputDevice::DeviceType::Keyboard) &#123;</span><br><span class="line">            <span class="keyword">auto</span> primaryQtDevice = QInputDevice::<span class="built_in">primaryKeyboard</span>();</span><br><span class="line">            <span class="keyword">if</span> (!WInputDevice::<span class="built_in">from</span>(primaryQtDevice)) &#123;</span><br><span class="line">                <span class="comment">// Ensure the primary keyboard device is the WInputDevice</span></span><br><span class="line">                <span class="keyword">auto</span> pd = <span class="built_in">const_cast</span>&lt;QInputDevice*&gt;(primaryQtDevice);</span><br><span class="line">                pd-&gt;<span class="built_in">setParent</span>(<span class="literal">nullptr</span>);</span><br><span class="line">                <span class="keyword">delete</span> pd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Q_ASSERT</span>(WInputDevice::<span class="built_in">from</span>(QInputDevice::<span class="built_in">primaryKeyboard</span>()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> qtdev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端事件"><a href="#客户端事件" class="headerlink" title="客户端事件"></a>客户端事件</h3><p>在 Treeland 还有一种事件需要处理，当用户点击一个窗口，合成器需要告知客户端哪个坐标点击了。或者使用键盘进行输入时，需要告知客户端输入的内容。</p><p>首先，Treeland 会标记一个窗口成为激活窗口，设置给 seat，这样 <code>wlroots</code> 就知道哪个窗口此时拥有焦点。</p><p>之后当键盘发生输入事件时，Treeland 没有过滤掉按键事件，或者是放行某些按键，这些剩余的输入事件就会在 wseat 的 sendEvent 中，发送给激活的客户端。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for keyboard event</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">doNotifyKey</span><span class="params">(WInputDevice *device, <span class="type">uint32_t</span> keycode, <span class="type">uint32_t</span> state, <span class="type">uint32_t</span> timestamp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">keyboardFocusSurface</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">q_func</span>()-&gt;<span class="built_in">setKeyboard</span>(device);</span><br><span class="line">    <span class="comment">/* Send modifiers to the client. */</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">handle</span>()-&gt;<span class="built_in">keyboard_notify_key</span>(timestamp, keycode, state);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏幕信息"><a href="#屏幕信息" class="headerlink" title="屏幕信息"></a>屏幕信息</h3><p>在 QPA 中还对 <code>WOutput</code> 进行了封装 <code>QWlrootsScreen</code>。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QWlrootsScreen *<span class="title">QWlrootsIntegration::addScreen</span><span class="params">(WOutput *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_screens &lt;&lt; <span class="keyword">new</span> <span class="built_in">QWlrootsScreen</span>(output);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isMaster</span>()) &#123;</span><br><span class="line">        QWindowSystemInterface::<span class="built_in">handleScreenAdded</span>(m_screens.<span class="built_in">last</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_placeholderScreen) &#123;</span><br><span class="line">            QWindowSystemInterface::<span class="built_in">handleScreenRemoved</span>(m_placeholderScreen.<span class="built_in">release</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Q_UNUSED</span>(<span class="keyword">new</span> <span class="built_in">QScreen</span>(m_screens.<span class="built_in">last</span>()))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_screens.<span class="built_in">last</span>()-&gt;<span class="built_in">initialize</span>();</span><br><span class="line">    output-&gt;<span class="built_in">setScreen</span>(m_screens.<span class="built_in">last</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m_screens.<span class="built_in">last</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>QWlrootsScreen</code> 继承自 <code>QPlatformScreen</code>，做的事情是将部分参数进行转换，例如physicalSize、devicePixelRatio、DPI等，之后通过 <code>QWindowSystemInterface::handleScreenAdded</code> 将创建好的 <code>QWlrootsScreen</code> 添加进 Qt 内。</p><h2 id="Qt-RHI"><a href="#Qt-RHI" class="headerlink" title="Qt RHI"></a>Qt RHI</h2><p>摘抄一段来自 waylib 中初始化 Qt RHI 的代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">WOutputRenderWindowPrivate::initRCWithRhi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">W_Q</span>(WOutputRenderWindow);</span><br><span class="line"></span><br><span class="line">    QQuickRenderControlPrivate *rcd = QQuickRenderControlPrivate::<span class="built_in">get</span>(<span class="built_in">rc</span>());</span><br><span class="line">    QSGRhiSupport *rhiSupport = QSGRhiSupport::<span class="built_in">instance</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// sanity check for Vulkan</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ENABLE_VULKAN_RENDER</span></span><br><span class="line">    <span class="keyword">if</span> (rhiSupport-&gt;<span class="built_in">rhiBackend</span>() == QRhi::Vulkan) &#123;</span><br><span class="line">        vkInstance.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">QVulkanInstance</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> phdev = <span class="built_in">wlr_vk_renderer_get_physical_device</span>(m_renderer-&gt;<span class="built_in">handle</span>());</span><br><span class="line">        <span class="keyword">auto</span> dev = <span class="built_in">wlr_vk_renderer_get_device</span>(m_renderer-&gt;<span class="built_in">handle</span>());</span><br><span class="line">        <span class="keyword">auto</span> queue_family = <span class="built_in">wlr_vk_renderer_get_queue_family</span>(m_renderer-&gt;<span class="built_in">handle</span>());</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> QT_VERSION &gt; QT_VERSION_CHECK(6, 6, 0)</span></span><br><span class="line">        <span class="keyword">auto</span> instance = <span class="built_in">wlr_vk_renderer_get_instance</span>(m_renderer-&gt;<span class="built_in">handle</span>());</span><br><span class="line">        vkInstance-&gt;<span class="built_in">setVkInstance</span>(instance);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="comment">//        vkInstance-&gt;setExtensions(fromCStyleList(vkRendererAttribs.extension_count, vkRendererAttribs.extensions));</span></span><br><span class="line">        <span class="comment">//        vkInstance-&gt;setLayers(fromCStyleList(vkRendererAttribs.layer_count, vkRendererAttribs.layers));</span></span><br><span class="line">        vkInstance-&gt;<span class="built_in">setApiVersion</span>(&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        vkInstance-&gt;<span class="built_in">create</span>();</span><br><span class="line">        q-&gt;<span class="built_in">setVulkanInstance</span>(vkInstance.<span class="built_in">data</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> gd = QQuickGraphicsDevice::<span class="built_in">fromDeviceObjects</span>(phdev, dev, queue_family);</span><br><span class="line">        q-&gt;<span class="built_in">setGraphicsDevice</span>(gd);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (rhiSupport-&gt;<span class="built_in">rhiBackend</span>() == QRhi::OpenGLES2) &#123;</span><br><span class="line">        <span class="built_in">Q_ASSERT</span>(<span class="built_in">wlr_renderer_is_gles2</span>(m_renderer-&gt;<span class="built_in">handle</span>()));</span><br><span class="line">        <span class="keyword">auto</span> egl = <span class="built_in">wlr_gles2_renderer_get_egl</span>(m_renderer-&gt;<span class="built_in">handle</span>());</span><br><span class="line">        <span class="keyword">auto</span> display = <span class="built_in">wlr_egl_get_display</span>(egl);</span><br><span class="line">        <span class="keyword">auto</span> context = <span class="built_in">wlr_egl_get_context</span>(egl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;glContext = <span class="keyword">new</span> QW::<span class="built_in">OpenGLContext</span>(display, context, <span class="built_in">rc</span>());</span><br><span class="line">        <span class="type">bool</span> ok = <span class="keyword">this</span>-&gt;glContext-&gt;<span class="built_in">create</span>();</span><br><span class="line">        <span class="keyword">if</span> (!ok)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        q-&gt;<span class="built_in">setGraphicsDevice</span>(QQuickGraphicsDevice::<span class="built_in">fromOpenGLContext</span>(<span class="keyword">this</span>-&gt;glContext));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QOffscreenSurface *offscreenSurface = <span class="keyword">new</span> QW::<span class="built_in">OffscreenSurface</span>(<span class="literal">nullptr</span>, q);</span><br><span class="line">    offscreenSurface-&gt;<span class="built_in">create</span>();</span><br><span class="line"></span><br><span class="line">    QSGRhiSupport::RhiCreateResult result = rhiSupport-&gt;<span class="built_in">createRhi</span>(q, offscreenSurface);</span><br><span class="line">    <span class="keyword">if</span> (!result.rhi) &#123;</span><br><span class="line">        <span class="built_in">qWarning</span>(<span class="string">&quot;WOutput::initRhi: Failed to initialize QRhi&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rcd-&gt;rhi = result.rhi;</span><br><span class="line">    <span class="comment">// Ensure the QQuickRenderControl don&#x27;t reinit the RHI</span></span><br><span class="line">    rcd-&gt;ownRhi = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">rc</span>()-&gt;<span class="built_in">initialize</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    rcd-&gt;ownRhi = result.own;</span><br><span class="line">    <span class="built_in">Q_ASSERT</span>(rcd-&gt;rhi == result.rhi);</span><br><span class="line">    <span class="built_in">Q_ASSERT</span>(!swapchain);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先获取 <code>QSGRhiSupport</code> 及相关控制对象。</p><p>判断 RHI backend 的类型，需要适配 <code>vulkan</code>、<code>gles</code>等。</p><p>从 <code>wlroots</code> 获取物理设备等参数，使用 <code>QQuickGraphicsDevice::fromDeviceObjects</code> 创建 Qt 的 <code>QQuickGraphicsDevice</code>。</p><p>render window的私有类是继承自 <code>QQuickWindowPrivate</code>，只需要将获取到的 <code>QQuickGraphicsDevice</code> 设置给 <code>QQuickWindowPrivate::setGraphicsDevice</code> 即可。</p><p>之后创建一个离屏渲染表面，用于 RHI 的初始化。</p><h2 id="Qt-Viewport"><a href="#Qt-Viewport" class="headerlink" title="Qt Viewport"></a>Qt Viewport</h2><p>在 Qt 中，想要查看或者渲染一个组件，需要使用 Viewport 组件，俗称照相机。</p><p>视口（Viewport）是一个可观察的多边形区域，只有 Viewport 范围内的画面才能显示到屏幕上。</p><p><code>wlroots</code> 中的 <strong>Viewport</strong> 是一个与 <code>Wayland</code> 显示协议相关的概念，主要用于定义渲染输出在屏幕上的显示区域。它允许在渲染时对显示内容进行缩放、裁剪或平移，以适应不同的分辨率和显示需求。</p><p>Treeland 使用 <code>WOutputViewport</code> 提供 Viewport 功能，使用 <code>wlroots</code> 的 <code>wlr_output</code> 中的屏幕信息，对画面进行矩阵变换，这里会涉及到屏幕的缩放、DPI等参数。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QMatrix4x4 <span class="title">WOutputViewport::renderMatrix</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QMatrix4x4 renderMatrix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> customTransform = <span class="built_in">viewportTransform</span>()) &#123;</span><br><span class="line">        customTransform-&gt;<span class="built_in">applyTo</span>(&amp;renderMatrix);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">parentItem</span>() &amp;&amp; !<span class="built_in">ignoreViewport</span>() &amp;&amp; <span class="built_in">input</span>() != <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> d = QQuickItemPrivate::<span class="built_in">get</span>(<span class="built_in">const_cast</span>&lt;WOutputViewport*&gt;(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">auto</span> viewportMatrix = d-&gt;<span class="built_in">itemNode</span>()-&gt;<span class="built_in">matrix</span>().<span class="built_in">inverted</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">auto</span> inputItem = <span class="built_in">input</span>()) &#123;</span><br><span class="line">            QMatrix4x4 matrix = QQuickItemPrivate::<span class="built_in">get</span>(<span class="built_in">parentItem</span>())-&gt;<span class="built_in">itemToWindowTransform</span>();</span><br><span class="line">            matrix *= QQuickItemPrivate::<span class="built_in">get</span>(inputItem)-&gt;<span class="built_in">windowToItemTransform</span>();</span><br><span class="line">            renderMatrix = viewportMatrix * matrix.<span class="built_in">inverted</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// the input item is window&#x27;s contentItem</span></span><br><span class="line">            <span class="keyword">auto</span> pd = QQuickItemPrivate::<span class="built_in">get</span>(<span class="built_in">parentItem</span>());</span><br><span class="line">            QMatrix4x4 parentMatrix = pd-&gt;<span class="built_in">itemToWindowTransform</span>().<span class="built_in">inverted</span>();</span><br><span class="line">            renderMatrix = viewportMatrix * parentMatrix;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> renderMatrix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WOutputViewport</code> 提供了 Viewport 所需的所有参数，变换矩阵、源几何大小、目标几何大小等信息。</p><p>在 <code>WOutputRenderWindow</code> 的事件中，判断如果是渲染的事件，就执行渲染。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">WOutputRenderWindow::event</span><span class="params">(QEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_D</span>(WOutputRenderWindow);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">type</span>() == doRenderEventType) &#123;</span><br><span class="line">        QCoreApplication::<span class="built_in">removePostedEvents</span>(<span class="keyword">this</span>, doRenderEventType);</span><br><span class="line">        <span class="built_in">d_func</span>()-&gt;<span class="built_in">doRender</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (QW::RenderWindow::<span class="built_in">beforeDisposeEventFilter</span>(<span class="keyword">this</span>, event)) &#123;</span><br><span class="line">        event-&gt;<span class="built_in">accept</span>();</span><br><span class="line">        QW::RenderWindow::<span class="built_in">afterDisposeEventFilter</span>(<span class="keyword">this</span>, event);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> isAccepted = QQuickWindow::<span class="built_in">event</span>(event);</span><br><span class="line">    <span class="keyword">if</span> (QW::RenderWindow::<span class="built_in">afterDisposeEventFilter</span>(<span class="keyword">this</span>, event))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isAccepted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 doRender 中，遍历所有的 Output，执行 beginRender，然后执行 Output 的渲染。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WOutputRenderWindowPrivate::doRender</span><span class="params">(<span class="type">const</span> QList&lt;OutputHelper *&gt; &amp;outputs,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          <span class="type">bool</span> forceRender, <span class="type">bool</span> doCommit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_ASSERT</span>(rendererList.<span class="built_in">isEmpty</span>());</span><br><span class="line">    <span class="built_in">Q_ASSERT</span>(!inRendering);</span><br><span class="line">    inRendering = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">W_Q</span>(WOutputRenderWindow);</span><br><span class="line">    <span class="keyword">for</span> (OutputLayer *layer : std::<span class="built_in">as_const</span>(layers)) &#123;</span><br><span class="line">        layer-&gt;<span class="built_in">beforeRender</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">rc</span>()-&gt;<span class="built_in">polishItems</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (QSGRendererInterface::<span class="built_in">isApiRhiBased</span>(WRenderHelper::<span class="built_in">getGraphicsApi</span>()))</span><br><span class="line">        <span class="built_in">rc</span>()-&gt;<span class="built_in">beginFrame</span>();</span><br><span class="line">    <span class="built_in">rc</span>()-&gt;<span class="built_in">sync</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">QQuickAnimatorController_advance</span>(animationController.<span class="built_in">get</span>());</span><br><span class="line">    Q_EMIT q-&gt;<span class="built_in">beforeRendering</span>();</span><br><span class="line">    <span class="built_in">runAndClearJobs</span>(&amp;beforeRenderingJobs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> needsCommit = <span class="built_in">doRenderOutputs</span>(outputs, forceRender);</span><br><span class="line"></span><br><span class="line">    Q_EMIT q-&gt;<span class="built_in">afterRendering</span>();</span><br><span class="line">    <span class="built_in">runAndClearJobs</span>(&amp;afterRenderingJobs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (QSGRendererInterface::<span class="built_in">isApiRhiBased</span>(WRenderHelper::<span class="built_in">getGraphicsApi</span>()))</span><br><span class="line">        <span class="built_in">rc</span>()-&gt;<span class="built_in">endFrame</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (doCommit) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : std::<span class="built_in">as_const</span>(needsCommit)) &#123;</span><br><span class="line">            <span class="type">bool</span> ok = i.first-&gt;<span class="built_in">commit</span>(i.second);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i.second-&gt;<span class="built_in">currentBuffer</span>()) &#123;</span><br><span class="line">                i.second-&gt;<span class="built_in">endRender</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            i.first-&gt;<span class="built_in">resetState</span>(ok);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">resetGlState</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// On Intel&amp;Nvidia multi-GPU environment, wlroots using Intel card do render for all</span></span><br><span class="line">    <span class="comment">// outputs, and blit nvidia&#x27;s output buffer in drm_connector_state_update_primary_fb,</span></span><br><span class="line">    <span class="comment">// the &#x27;blit&#x27; behavior will make EGL context to Nvidia renderer. So must done current</span></span><br><span class="line">    <span class="comment">// OpenGL context here in order to ensure QtQuick always make EGL context to Intel</span></span><br><span class="line">    <span class="comment">// renderer before next frame.</span></span><br><span class="line">    <span class="keyword">if</span> (glContext)</span><br><span class="line">        glContext-&gt;<span class="built_in">doneCurrent</span>();</span><br><span class="line"></span><br><span class="line">    inRendering = <span class="literal">false</span>;</span><br><span class="line">    Q_EMIT q-&gt;<span class="built_in">renderEnd</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">qw_buffer *<span class="title">WBufferRenderer::beginRender</span><span class="params">(<span class="type">const</span> QSize &amp;pixelSize, qreal devicePixelRatio,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">uint32_t</span> format, RenderFlags flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_ASSERT</span>(!state.buffer);</span><br><span class="line">    <span class="built_in">Q_ASSERT</span>(m_output);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pixelSize.<span class="built_in">isEmpty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_EMIT <span class="title">beforeRendering</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    m_damageRing.<span class="built_in">set_bounds</span>(pixelSize.<span class="built_in">width</span>(), pixelSize.<span class="built_in">height</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// configure swapchain</span></span><br><span class="line">    <span class="keyword">if</span> (flags.<span class="built_in">testFlag</span>(RenderFlag::DontConfigureSwapchain)) &#123;</span><br><span class="line">        <span class="keyword">auto</span> renderFormat = <span class="built_in">pickFormat</span>(m_output-&gt;<span class="built_in">renderer</span>(), format);</span><br><span class="line">        <span class="keyword">if</span> (!renderFormat) &#123;</span><br><span class="line">            <span class="built_in">qWarning</span>(<span class="string">&quot;wlr_renderer doesn&#x27;t support format 0x%s&quot;</span>, <span class="built_in">drmGetFormatName</span>(format));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!m_swapchain || <span class="built_in">QSize</span>(m_swapchain-&gt;<span class="built_in">handle</span>()-&gt;width, m_swapchain-&gt;<span class="built_in">handle</span>()-&gt;height) != pixelSize</span><br><span class="line">            || m_swapchain-&gt;<span class="built_in">handle</span>()-&gt;format.format != renderFormat-&gt;format) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_swapchain)</span><br><span class="line">                <span class="keyword">delete</span> m_swapchain;</span><br><span class="line">            m_swapchain = qw_swapchain::<span class="built_in">create</span>(m_output-&gt;<span class="built_in">allocator</span>()-&gt;<span class="built_in">handle</span>(), pixelSize.<span class="built_in">width</span>(), pixelSize.<span class="built_in">height</span>(), renderFormat);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flags.<span class="built_in">testFlag</span>(RenderFlag::UseCursorFormats)) &#123;</span><br><span class="line">        <span class="type">bool</span> ok = m_output-&gt;<span class="built_in">configureCursorSwapchain</span>(pixelSize, format, &amp;m_swapchain);</span><br><span class="line">        <span class="keyword">if</span> (!ok)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">bool</span> ok = m_output-&gt;<span class="built_in">configurePrimarySwapchain</span>(pixelSize, format, &amp;m_swapchain,</span><br><span class="line">                                                      !flags.<span class="built_in">testFlag</span>(DontTestSwapchain));</span><br><span class="line">        <span class="keyword">if</span> (!ok)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Support scanout buffer of wlr_surface(from WSurfaceItem)</span></span><br><span class="line">    <span class="type">int</span> bufferAge;</span><br><span class="line">    <span class="keyword">auto</span> wbuffer = m_swapchain-&gt;<span class="built_in">acquire</span>(&amp;bufferAge);</span><br><span class="line">    <span class="keyword">if</span> (!wbuffer)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">auto</span> buffer = qw_buffer::<span class="built_in">from</span>(wbuffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_renderHelper)</span><br><span class="line">        m_renderHelper = <span class="keyword">new</span> <span class="built_in">WRenderHelper</span>(m_output-&gt;<span class="built_in">renderer</span>());</span><br><span class="line">    m_renderHelper-&gt;<span class="built_in">setSize</span>(pixelSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> wd = QQuickWindowPrivate::<span class="built_in">get</span>(<span class="built_in">window</span>());</span><br><span class="line">    <span class="built_in">Q_ASSERT</span>(wd-&gt;renderControl);</span><br><span class="line">    <span class="keyword">auto</span> lastRT = m_renderHelper-&gt;<span class="built_in">lastRenderTarget</span>();</span><br><span class="line">    <span class="keyword">auto</span> rt = m_renderHelper-&gt;<span class="built_in">acquireRenderTarget</span>(wd-&gt;renderControl, buffer);</span><br><span class="line">    <span class="keyword">if</span> (rt.<span class="built_in">isNull</span>()) &#123;</span><br><span class="line">        buffer-&gt;<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> rtd = QQuickRenderTargetPrivate::<span class="built_in">get</span>(&amp;rt);</span><br><span class="line">    QSGRenderTarget sgRT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rtd-&gt;type == QQuickRenderTargetPrivate::Type::PaintDevice) &#123;</span><br><span class="line">        sgRT.paintDevice = rtd-&gt;u.paintDevice;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Q_ASSERT</span>(rtd-&gt;type == QQuickRenderTargetPrivate::Type::RhiRenderTarget);</span><br><span class="line">        sgRT.rt = rtd-&gt;u.rhiRt;</span><br><span class="line">        sgRT.cb = wd-&gt;redirect.commandBuffer;</span><br><span class="line">        <span class="built_in">Q_ASSERT</span>(sgRT.cb);</span><br><span class="line">        sgRT.rpDesc = rtd-&gt;u.rhiRt-&gt;<span class="built_in">renderPassDescriptor</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> QT_NO_OPENGL</span></span><br><span class="line">        <span class="keyword">if</span> (wd-&gt;rhi-&gt;<span class="built_in">backend</span>() == QRhi::OpenGLES2) &#123;</span><br><span class="line">            <span class="keyword">auto</span> glRT = <span class="built_in">QRHI_RES</span>(QGles2TextureRenderTarget, rtd-&gt;u.rhiRt);</span><br><span class="line">            <span class="built_in">Q_ASSERT</span>(glRT-&gt;framebuffer &gt;= <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">auto</span> glContext = QOpenGLContext::<span class="built_in">currentContext</span>();</span><br><span class="line">            <span class="built_in">Q_ASSERT</span>(glContext);</span><br><span class="line">            QOpenGLContextPrivate::<span class="built_in">get</span>(glContext)-&gt;defaultFboRedirect = glRT-&gt;framebuffer;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    state.flags = flags;</span><br><span class="line">    state.context = wd-&gt;context;</span><br><span class="line">    state.pixelSize = pixelSize;</span><br><span class="line">    state.devicePixelRatio = devicePixelRatio;</span><br><span class="line">    state.bufferAge = bufferAge;</span><br><span class="line">    state.lastRT = lastRT;</span><br><span class="line">    state.buffer = buffer;</span><br><span class="line">    state.renderTarget = rt;</span><br><span class="line">    state.sgRenderTarget = sgRT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QVector&lt;std::pair&lt;OutputHelper*, WBufferRenderer*&gt;&gt;</span><br><span class="line">WOutputRenderWindowPrivate::<span class="built_in">doRenderOutputs</span>(<span class="type">const</span> QList&lt;OutputHelper*&gt; &amp;outputs, <span class="type">bool</span> forceRender)</span><br><span class="line">&#123;</span><br><span class="line">    QVector&lt;OutputHelper*&gt; renderResults;</span><br><span class="line">    renderResults.<span class="built_in">reserve</span>(outputs.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (OutputHelper *helper : std::<span class="built_in">as_const</span>(outputs)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Q_LIKELY</span>(!forceRender)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!helper-&gt;<span class="built_in">renderable</span>()</span><br><span class="line">                || <span class="built_in">Q_UNLIKELY</span>(!WOutputViewportPrivate::<span class="built_in">get</span>(helper-&gt;<span class="built_in">output</span>())-&gt;<span class="built_in">renderable</span>())</span><br><span class="line">                || !helper-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">isEnabled</span>())</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!helper-&gt;<span class="built_in">contentIsDirty</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (helper-&gt;<span class="built_in">needsFrame</span>())</span><br><span class="line">                    renderResults.<span class="built_in">append</span>(helper);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Q_ASSERT</span>(helper-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">scale</span>() &lt;= helper-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">devicePixelRatio</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> &amp;format = helper-&gt;<span class="built_in">qwoutput</span>()-&gt;<span class="built_in">handle</span>()-&gt;render_format;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> renderMatrix = helper-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">renderMatrix</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// maybe using the other WOutputViewport&#x27;s QSGTextureProvider</span></span><br><span class="line">        <span class="keyword">if</span> (!helper-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">depends</span>().<span class="built_in">isEmpty</span>())</span><br><span class="line">            <span class="built_in">updateDirtyNodes</span>();</span><br><span class="line"></span><br><span class="line">        qw_buffer *buffer = helper-&gt;<span class="built_in">beginRender</span>(helper-&gt;<span class="built_in">bufferRenderer</span>(), helper-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">size</span>(), format,</span><br><span class="line">                                                WBufferRenderer::RedirectOpenGLContextDefaultFrameBufferObject);</span><br><span class="line">        <span class="built_in">Q_ASSERT</span>(buffer == helper-&gt;<span class="built_in">bufferRenderer</span>()-&gt;<span class="built_in">currentBuffer</span>());</span><br><span class="line">        <span class="keyword">if</span> (buffer) &#123;</span><br><span class="line">            helper-&gt;<span class="built_in">render</span>(helper-&gt;<span class="built_in">bufferRenderer</span>(), <span class="number">0</span>, renderMatrix,</span><br><span class="line">                           helper-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">effectiveSourceRect</span>(),</span><br><span class="line">                           helper-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">targetRect</span>(),</span><br><span class="line">                           helper-&gt;<span class="built_in">output</span>()-&gt;<span class="built_in">preserveColorContents</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        renderResults.<span class="built_in">append</span>(helper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QVector&lt;std::pair&lt;OutputHelper*, WBufferRenderer*&gt;&gt; needsCommit;</span><br><span class="line">    needsCommit.<span class="built_in">reserve</span>(renderResults.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> helper : std::<span class="built_in">as_const</span>(renderResults)) &#123;</span><br><span class="line">        <span class="keyword">auto</span> bufferRenderer = helper-&gt;<span class="built_in">afterRender</span>();</span><br><span class="line">        <span class="keyword">if</span> (bufferRenderer)</span><br><span class="line">            needsCommit.<span class="built_in">append</span>(&#123;helper, bufferRenderer&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rendererList.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> needsCommit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WBufferRenderer::render</span><span class="params">(<span class="type">int</span> sourceIndex, <span class="type">const</span> QMatrix4x4 &amp;renderMatrix,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="type">const</span> QRectF &amp;sourceRect, <span class="type">const</span> QRectF &amp;targetRect,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="type">bool</span> preserveColorContents)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_ASSERT</span>(state.buffer);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> &amp;source = m_sourceList.<span class="built_in">at</span>(sourceIndex);</span><br><span class="line">    QSGRenderer *renderer = <span class="built_in">ensureRenderer</span>(sourceIndex, state.context);</span><br><span class="line">    <span class="keyword">auto</span> wd = QQuickWindowPrivate::<span class="built_in">get</span>(<span class="built_in">window</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> qreal devicePixelRatio = state.devicePixelRatio;</span><br><span class="line">    state.renderer = renderer;</span><br><span class="line">    state.worldTransform = renderMatrix;</span><br><span class="line">    renderer-&gt;<span class="built_in">setDevicePixelRatio</span>(devicePixelRatio);</span><br><span class="line">    renderer-&gt;<span class="built_in">setDeviceRect</span>(<span class="built_in">QRect</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>, <span class="number">0</span>), state.pixelSize));</span><br><span class="line">    renderer-&gt;<span class="built_in">setRenderTarget</span>(state.sgRenderTarget);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> viewportRect = <span class="built_in">scaleToRect</span>(targetRect, devicePixelRatio);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> softwareRenderer = <span class="built_in">dynamic_cast</span>&lt;QSGSoftwareRenderer*&gt;(renderer);</span><br><span class="line">    &#123; <span class="comment">// before render</span></span><br><span class="line">        <span class="keyword">if</span> (softwareRenderer) &#123;</span><br><span class="line">            <span class="comment">// because software renderer don&#x27;t supports viewportRect,</span></span><br><span class="line">            <span class="comment">// so use transform to simulation.</span></span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> mapTransform = <span class="built_in">inputMapToOutput</span>(sourceRect, targetRect,</span><br><span class="line">                                                       state.pixelSize, state.devicePixelRatio);</span><br><span class="line">            <span class="keyword">if</span> (!mapTransform.<span class="built_in">isIdentity</span>())</span><br><span class="line">                state.worldTransform = mapTransform * state.worldTransform;</span><br><span class="line">            state.worldTransform.<span class="built_in">optimize</span>();</span><br><span class="line">            <span class="keyword">auto</span> image = <span class="built_in">getImageFrom</span>(state.renderTarget);</span><br><span class="line">            image-&gt;<span class="built_in">setDevicePixelRatio</span>(devicePixelRatio);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Should set to QSGSoftwareRenderer, but it&#x27;s not support specify matrix.</span></span><br><span class="line">            <span class="comment">// If transform is changed, it will full repaint.</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isRootItem</span>(source.source)) &#123;</span><br><span class="line">                <span class="keyword">auto</span> rootTransform = QQuickItemPrivate::<span class="built_in">get</span>(wd-&gt;contentItem)-&gt;<span class="built_in">itemNode</span>();</span><br><span class="line">                <span class="keyword">if</span> (rootTransform-&gt;<span class="built_in">matrix</span>() != state.worldTransform)</span><br><span class="line">                    rootTransform-&gt;<span class="built_in">setMatrix</span>(state.worldTransform);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">auto</span> t = state.worldTransform.<span class="built_in">toTransform</span>();</span><br><span class="line">                <span class="keyword">if</span> (t.<span class="built_in">type</span>() &gt; QTransform::TxTranslate) &#123;</span><br><span class="line">                    (image-&gt;<span class="keyword">operator</span> QImage &amp;()).<span class="built_in">fill</span>(renderer-&gt;<span class="built_in">clearColor</span>());</span><br><span class="line">                    softwareRenderer-&gt;<span class="built_in">markDirty</span>();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">applyTransform</span>(softwareRenderer, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            state.worldTransform.<span class="built_in">optimize</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">bool</span> flipY = wd-&gt;rhi ? !wd-&gt;rhi-&gt;<span class="built_in">isYUpInNDC</span>() : <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (state.renderTarget.<span class="built_in">mirrorVertically</span>())</span><br><span class="line">                flipY = !flipY;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (viewportRect.<span class="built_in">isValid</span>()) &#123;</span><br><span class="line">                QRect vr = viewportRect;</span><br><span class="line">                <span class="keyword">if</span> (flipY)</span><br><span class="line">                    vr.<span class="built_in">moveTop</span>(-vr.<span class="built_in">y</span>() + state.pixelSize.<span class="built_in">height</span>() - vr.<span class="built_in">height</span>());</span><br><span class="line">                renderer-&gt;<span class="built_in">setViewportRect</span>(vr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                renderer-&gt;<span class="built_in">setViewportRect</span>(<span class="built_in">QRect</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>, <span class="number">0</span>), state.pixelSize));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            QRectF rect = sourceRect;</span><br><span class="line">            <span class="keyword">if</span> (!rect.<span class="built_in">isValid</span>())</span><br><span class="line">                rect = <span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="built_in">QSizeF</span>(state.pixelSize) / devicePixelRatio);</span><br><span class="line"></span><br><span class="line">            <span class="type">const</span> <span class="type">float</span> left = rect.<span class="built_in">x</span>();</span><br><span class="line">            <span class="type">const</span> <span class="type">float</span> right = rect.<span class="built_in">x</span>() + rect.<span class="built_in">width</span>();</span><br><span class="line">            <span class="type">float</span> bottom = rect.<span class="built_in">y</span>() + rect.<span class="built_in">height</span>();</span><br><span class="line">            <span class="type">float</span> top = rect.<span class="built_in">y</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flipY)</span><br><span class="line">                std::<span class="built_in">swap</span>(top, bottom);</span><br><span class="line"></span><br><span class="line">            QMatrix4x4 matrix;</span><br><span class="line">            matrix.<span class="built_in">ortho</span>(left, right, bottom, top, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">            QMatrix4x4 projectionMatrix, projectionMatrixWithNativeNDC;</span><br><span class="line">            projectionMatrix = matrix * state.worldTransform;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (wd-&gt;rhi &amp;&amp; !wd-&gt;rhi-&gt;<span class="built_in">isYUpInNDC</span>()) &#123;</span><br><span class="line">                std::<span class="built_in">swap</span>(top, bottom);</span><br><span class="line"></span><br><span class="line">                matrix.<span class="built_in">setToIdentity</span>();</span><br><span class="line">                matrix.<span class="built_in">ortho</span>(left, right, bottom, top, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            projectionMatrixWithNativeNDC = matrix * state.worldTransform;</span><br><span class="line"></span><br><span class="line">            renderer-&gt;<span class="built_in">setProjectionMatrix</span>(projectionMatrix);</span><br><span class="line">            renderer-&gt;<span class="built_in">setProjectionMatrixWithNativeNDC</span>(projectionMatrixWithNativeNDC);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> textureRT = <span class="built_in">static_cast</span>&lt;QRhiTextureRenderTarget*&gt;(state.sgRenderTarget.rt);</span><br><span class="line">            <span class="keyword">if</span> (preserveColorContents) &#123;</span><br><span class="line">                textureRT-&gt;<span class="built_in">setFlags</span>(textureRT-&gt;<span class="built_in">flags</span>() | QRhiTextureRenderTarget::PreserveColorContents);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                textureRT-&gt;<span class="built_in">setFlags</span>(textureRT-&gt;<span class="built_in">flags</span>() &amp; ~QRhiTextureRenderTarget::PreserveColorContents);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    state.context-&gt;<span class="built_in">renderNextFrame</span>(renderer);</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">// after render</span></span><br><span class="line">        <span class="keyword">if</span> (!softwareRenderer) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> get damage area from QRhi renderer</span></span><br><span class="line">            m_damageRing.<span class="built_in">add_whole</span>();</span><br><span class="line">            <span class="comment">// ###: maybe Qt bug? Before executing QRhi::endOffscreenFrame, we may</span></span><br><span class="line">            <span class="comment">// use the same QSGRenderer for multiple drawings. This can lead to</span></span><br><span class="line">            <span class="comment">// rendering the same content for different QSGRhiRenderTarget instances</span></span><br><span class="line">            <span class="comment">// when using the RhiGles backend. Additionally, considering that the</span></span><br><span class="line">            <span class="comment">// result of the current drawing may be needed when drawing the next</span></span><br><span class="line">            <span class="comment">// sourceIndex, we should let the RHI (Rendering Hardware Interface)</span></span><br><span class="line">            <span class="comment">// complete the results of this drawing here to ensure the current</span></span><br><span class="line">            <span class="comment">// drawing result is available for use.</span></span><br><span class="line">            wd-&gt;rhi-&gt;<span class="built_in">finish</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> currentImage = <span class="built_in">getImageFrom</span>(state.renderTarget);</span><br><span class="line">            <span class="built_in">Q_ASSERT</span>(currentImage &amp;&amp; currentImage == softwareRenderer-&gt;m_rt.paintDevice);</span><br><span class="line">            currentImage-&gt;<span class="built_in">setDevicePixelRatio</span>(<span class="number">1.0</span>);</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> scaleTF = QTransform::<span class="built_in">fromScale</span>(devicePixelRatio, devicePixelRatio);</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> scaledFlushRegion = scaleTF.<span class="built_in">map</span>(softwareRenderer-&gt;<span class="built_in">flushRegion</span>());</span><br><span class="line">            PixmanRegion scaledFlushDamage;</span><br><span class="line">            <span class="type">bool</span> ok = WTools::<span class="built_in">toPixmanRegion</span>(scaledFlushRegion, scaledFlushDamage);</span><br><span class="line">            <span class="built_in">Q_ASSERT</span>(ok);</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                PixmanRegion damage;</span><br><span class="line">                m_damageRing.<span class="built_in">get_buffer_damage</span>(state.bufferAge, damage);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (viewportRect.<span class="built_in">isValid</span>()) &#123;</span><br><span class="line">                    QRect imageRect = (currentImage-&gt;<span class="keyword">operator</span> <span class="type">const</span> QImage &amp;()).<span class="built_in">rect</span>();</span><br><span class="line">                    <span class="function">QRegion <span class="title">invalidRegion</span><span class="params">(imageRect)</span></span>;</span><br><span class="line">                    invalidRegion -= viewportRect;</span><br><span class="line">                    <span class="keyword">if</span> (!scaledFlushRegion.<span class="built_in">isEmpty</span>())</span><br><span class="line">                        invalidRegion &amp;= scaledFlushRegion;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!invalidRegion.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">                        <span class="function">QPainter <span class="title">pa</span><span class="params">(currentImage)</span></span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> r : std::<span class="built_in">as_const</span>(invalidRegion))</span><br><span class="line">                            pa.<span class="built_in">fillRect</span>(r, softwareRenderer-&gt;<span class="built_in">clearColor</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!damage.<span class="built_in">isEmpty</span>() &amp;&amp; state.lastRT.first != state.buffer &amp;&amp; !state.lastRT.second.<span class="built_in">isNull</span>()) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> image = <span class="built_in">getImageFrom</span>(state.lastRT.second);</span><br><span class="line">                    <span class="built_in">Q_ASSERT</span>(image);</span><br><span class="line">                    <span class="built_in">Q_ASSERT</span>(image-&gt;<span class="built_in">size</span>() == state.pixelSize);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> Don&#x27;t use the previous render target, we can get the damage region of QtQuick</span></span><br><span class="line">                    <span class="comment">// before QQuickRenderControl::render for qw_damage_ring, and add dirty region to</span></span><br><span class="line">                    <span class="comment">// QSGAbstractSoftwareRenderer to force repaint the damage region of current render target.</span></span><br><span class="line">                    <span class="function">QPainter <span class="title">pa</span><span class="params">(currentImage)</span></span>;</span><br><span class="line"></span><br><span class="line">                    PixmanRegion remainderDamage;</span><br><span class="line">                    ok = <span class="built_in">pixman_region32_subtract</span>(remainderDamage, damage, scaledFlushDamage);</span><br><span class="line">                    <span class="built_in">Q_ASSERT</span>(ok);</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">auto</span> rects = <span class="built_in">pixman_region32_rectangles</span>(remainderDamage, &amp;count);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> r = rects[i];</span><br><span class="line">                        pa.<span class="built_in">drawImage</span>(r.x1, r.y1, *image, r.x1, r.y1, r.x2 - r.x1, r.y2 - r.y1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">isRootItem</span>(source.source))</span><br><span class="line">                <span class="built_in">applyTransform</span>(softwareRenderer, state.worldTransform.<span class="built_in">inverted</span>().<span class="built_in">toTransform</span>());</span><br><span class="line">            m_damageRing.<span class="built_in">add</span>(scaledFlushDamage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> dr = <span class="built_in">qobject_cast</span>&lt;QSGDefaultRenderContext*&gt;(state.context)) &#123;</span><br><span class="line">        QRhiResourceUpdateBatch *resourceUpdates = wd-&gt;rhi-&gt;<span class="built_in">nextResourceUpdateBatch</span>();</span><br><span class="line">        dr-&gt;<span class="built_in">currentFrameCommandBuffer</span>()-&gt;<span class="built_in">resourceUpdate</span>(resourceUpdates);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">shouldCacheBuffer</span>())</span><br><span class="line">        <span class="built_in">wTextureProvider</span>()-&gt;<span class="built_in">setBuffer</span>(state.buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理完画面以后，如果需要上屏画面，就调用 commit 把画面送到屏幕上。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">OutputHelper::commit</span><span class="params">(WBufferRenderer *buffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">output</span>()-&gt;<span class="built_in">offscreen</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!buffer || !buffer-&gt;<span class="built_in">currentBuffer</span>()) &#123;</span><br><span class="line">        <span class="built_in">Q_ASSERT</span>(!<span class="keyword">this</span>-&gt;<span class="built_in">buffer</span>());</span><br><span class="line">        <span class="keyword">return</span> WOutputHelper::<span class="built_in">commit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setBuffer</span>(buffer-&gt;<span class="built_in">currentBuffer</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_lastCommitBuffer == buffer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pixman_region32_not_empty</span>(&amp;buffer-&gt;<span class="built_in">damageRing</span>()-&gt;<span class="built_in">handle</span>()-&gt;current))</span><br><span class="line">            <span class="built_in">setDamage</span>(&amp;buffer-&gt;<span class="built_in">damageRing</span>()-&gt;<span class="built_in">handle</span>()-&gt;current);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_lastCommitBuffer = buffer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> WOutputHelper::<span class="built_in">commit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还会判断是否有硬件加速（GPU），会优先使用硬件来加速计算过程。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    state.worldTransform.<span class="built_in">optimize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> flipY = wd-&gt;rhi ? !wd-&gt;rhi-&gt;<span class="built_in">isYUpInNDC</span>() : <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (state.renderTarget.<span class="built_in">mirrorVertically</span>())</span><br><span class="line">        flipY = !flipY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (viewportRect.<span class="built_in">isValid</span>()) &#123;</span><br><span class="line">        QRect vr = viewportRect;</span><br><span class="line">        <span class="keyword">if</span> (flipY)</span><br><span class="line">            vr.<span class="built_in">moveTop</span>(-vr.<span class="built_in">y</span>() + state.pixelSize.<span class="built_in">height</span>() - vr.<span class="built_in">height</span>());</span><br><span class="line">        renderer-&gt;<span class="built_in">setViewportRect</span>(vr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        renderer-&gt;<span class="built_in">setViewportRect</span>(<span class="built_in">QRect</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>, <span class="number">0</span>), state.pixelSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QRectF rect = sourceRect;</span><br><span class="line">    <span class="keyword">if</span> (!rect.<span class="built_in">isValid</span>())</span><br><span class="line">        rect = <span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="built_in">QSizeF</span>(state.pixelSize) / devicePixelRatio);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> left = rect.<span class="built_in">x</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> right = rect.<span class="built_in">x</span>() + rect.<span class="built_in">width</span>();</span><br><span class="line">    <span class="type">float</span> bottom = rect.<span class="built_in">y</span>() + rect.<span class="built_in">height</span>();</span><br><span class="line">    <span class="type">float</span> top = rect.<span class="built_in">y</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flipY)</span><br><span class="line">        std::<span class="built_in">swap</span>(top, bottom);</span><br><span class="line"></span><br><span class="line">    QMatrix4x4 matrix;</span><br><span class="line">    matrix.<span class="built_in">ortho</span>(left, right, bottom, top, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    QMatrix4x4 projectionMatrix, projectionMatrixWithNativeNDC;</span><br><span class="line">    projectionMatrix = matrix * state.worldTransform;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wd-&gt;rhi &amp;&amp; !wd-&gt;rhi-&gt;<span class="built_in">isYUpInNDC</span>()) &#123;</span><br><span class="line">        std::<span class="built_in">swap</span>(top, bottom);</span><br><span class="line"></span><br><span class="line">        matrix.<span class="built_in">setToIdentity</span>();</span><br><span class="line">        matrix.<span class="built_in">ortho</span>(left, right, bottom, top, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    projectionMatrixWithNativeNDC = matrix * state.worldTransform;</span><br><span class="line"></span><br><span class="line">    renderer-&gt;<span class="built_in">setProjectionMatrix</span>(projectionMatrix);</span><br><span class="line">    renderer-&gt;<span class="built_in">setProjectionMatrixWithNativeNDC</span>(projectionMatrixWithNativeNDC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> textureRT = <span class="built_in">static_cast</span>&lt;QRhiTextureRenderTarget*&gt;(state.sgRenderTarget.rt);</span><br><span class="line">    <span class="keyword">if</span> (preserveColorContents) &#123;</span><br><span class="line">        textureRT-&gt;<span class="built_in">setFlags</span>(textureRT-&gt;<span class="built_in">flags</span>() | QRhiTextureRenderTarget::PreserveColorContents);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        textureRT-&gt;<span class="built_in">setFlags</span>(textureRT-&gt;<span class="built_in">flags</span>() &amp; ~QRhiTextureRenderTarget::PreserveColorContents);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Surface-渲染"><a href="#Surface-渲染" class="headerlink" title="Surface 渲染"></a>Surface 渲染</h2><p>在 Treeland 中，为 Surface 创建了 <code>WSurfaceItem</code>，用于表示一个窗口，并创建了 <code>WSurfaceContent</code> 作为 <code>WSurfaceItem</code> 的 delegate。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WSurfaceItemPrivate::initForDelegate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_Q</span>(WSurfaceItem);</span><br><span class="line"></span><br><span class="line">    std::unique_ptr&lt;QQuickItem&gt; newContentContainer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!delegate) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getItemContent</span>()) &#123;</span><br><span class="line">            <span class="built_in">Q_ASSERT</span>(!delegateIsDirty);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delegateIsDirty = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">auto</span> contentItem = <span class="keyword">new</span> <span class="built_in">WSurfaceItemContent</span>(q);</span><br><span class="line">        <span class="keyword">if</span> (surface)</span><br><span class="line">            contentItem-&gt;<span class="built_in">setSurface</span>(surface);</span><br><span class="line">        contentItem-&gt;<span class="built_in">setCacheLastBuffer</span>(!surfaceFlags.<span class="built_in">testFlag</span>(WSurfaceItem::DontCacheLastBuffer));</span><br><span class="line">        contentItem-&gt;<span class="built_in">setSmooth</span>(q-&gt;<span class="built_in">smooth</span>());</span><br><span class="line">        contentItem-&gt;<span class="built_in">setLive</span>(!q-&gt;<span class="built_in">flags</span>().<span class="built_in">testFlag</span>(WSurfaceItem::NonLive));</span><br><span class="line">        QObject::<span class="built_in">connect</span>(q, &amp;WSurfaceItem::smoothChanged, contentItem, &amp;WSurfaceItemContent::setSmooth);</span><br><span class="line">        newContentContainer.<span class="built_in">reset</span>(contentItem);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (delegateIsDirty) &#123;</span><br><span class="line">        <span class="keyword">auto</span> obj = delegate-&gt;<span class="built_in">createWithInitialProperties</span>(&#123;&#123;<span class="string">&quot;surface&quot;</span>, QVariant::<span class="built_in">fromValue</span>(q)&#125;&#125;, <span class="built_in">qmlContext</span>(q));</span><br><span class="line">        <span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">            <span class="built_in">qWarning</span>() &lt;&lt; <span class="string">&quot;Failed on create surface item from delegate, error mssage:&quot;</span></span><br><span class="line">                       &lt;&lt; delegate-&gt;<span class="built_in">errorString</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delegateIsDirty = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">auto</span> contentItem = <span class="built_in">qobject_cast</span>&lt;QQuickItem*&gt;(obj);</span><br><span class="line">        <span class="keyword">if</span> (!contentItem)</span><br><span class="line">            <span class="built_in">qFatal</span>() &lt;&lt; <span class="string">&quot;SurfaceItem&#x27;s delegate must is Item&quot;</span>;</span><br><span class="line"></span><br><span class="line">        newContentContainer.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">QQuickItem</span>(q));</span><br><span class="line">        QQmlEngine::<span class="built_in">setObjectOwnership</span>(contentItem, QQmlEngine::CppOwnership);</span><br><span class="line">        contentItem-&gt;<span class="built_in">setParent</span>(newContentContainer.<span class="built_in">get</span>());</span><br><span class="line">        contentItem-&gt;<span class="built_in">setParentItem</span>(newContentContainer.<span class="built_in">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!newContentContainer)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    newContentContainer-&gt;<span class="built_in">setZ</span>(<span class="built_in">qreal</span>(WSurfaceItem::ZOrder::ContentItem));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (contentContainer) &#123;</span><br><span class="line">        newContentContainer-&gt;<span class="built_in">setPosition</span>(contentContainer-&gt;<span class="built_in">position</span>());</span><br><span class="line">        newContentContainer-&gt;<span class="built_in">setSize</span>(contentContainer-&gt;<span class="built_in">size</span>());</span><br><span class="line">        newContentContainer-&gt;<span class="built_in">setTransformOrigin</span>(contentContainer-&gt;<span class="built_in">transformOrigin</span>());</span><br><span class="line">        newContentContainer-&gt;<span class="built_in">setScale</span>(contentContainer-&gt;<span class="built_in">scale</span>());</span><br><span class="line"></span><br><span class="line">        contentContainer-&gt;<span class="built_in">disconnect</span>(q);</span><br><span class="line">        contentContainer-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    contentContainer = newContentContainer.<span class="built_in">release</span>();</span><br><span class="line">    <span class="built_in">updateEventItem</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">updateBoundingRect</span>();</span><br><span class="line">    <span class="keyword">if</span> (eventItem)</span><br><span class="line">        <span class="built_in">updateEventItemGeometry</span>();</span><br><span class="line"></span><br><span class="line">    Q_EMIT q-&gt;<span class="built_in">contentItemChanged</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后当 <code>WSurfaceItem</code> 需要更新画面时，就能调用 <code>updatePaintNode</code> 更新渲染。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QSGNode *<span class="title">WSurfaceItemContent::updatePaintNode</span><span class="params">(QSGNode *oldNode, UpdatePaintNodeData *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">W_D</span>(WSurfaceItemContent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> tp = <span class="built_in">wTextureProvider</span>();</span><br><span class="line">    <span class="keyword">if</span> (d-&gt;live || !tp-&gt;<span class="built_in">texture</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> texture = d-&gt;surface ? d-&gt;surface-&gt;<span class="built_in">handle</span>()-&gt;<span class="built_in">get_texture</span>() : <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (texture) &#123;</span><br><span class="line">            tp-&gt;<span class="built_in">setTexture</span>(qw_texture::<span class="built_in">from</span>(texture), d-&gt;buffer.<span class="built_in">get</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tp-&gt;<span class="built_in">setBuffer</span>(d-&gt;buffer.<span class="built_in">get</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!tp-&gt;<span class="built_in">texture</span>() || <span class="built_in">width</span>() &lt;= <span class="number">0</span> || <span class="built_in">height</span>() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> oldNode;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> node = <span class="built_in">static_cast</span>&lt;QSGImageNode*&gt;(oldNode);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Q_UNLIKELY</span>(!node)) &#123;</span><br><span class="line">        node = <span class="built_in">window</span>()-&gt;<span class="built_in">createImageNode</span>();</span><br><span class="line">        node-&gt;<span class="built_in">setOwnsTexture</span>(<span class="literal">false</span>);</span><br><span class="line">        QSGNode *fpnode = <span class="keyword">new</span> <span class="built_in">WSGRenderFootprintNode</span>(<span class="keyword">this</span>);</span><br><span class="line">        node-&gt;<span class="built_in">appendChildNode</span>(fpnode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> texture = tp-&gt;<span class="built_in">texture</span>();</span><br><span class="line">    node-&gt;<span class="built_in">setTexture</span>(texture);</span><br><span class="line">    <span class="type">const</span> QRectF textureGeometry = d-&gt;bufferSourceBox;</span><br><span class="line">    node-&gt;<span class="built_in">setSourceRect</span>(textureGeometry);</span><br><span class="line">    <span class="function"><span class="type">const</span> QRectF <span class="title">targetGeometry</span><span class="params">(d-&gt;ignoreBufferOffset ? QPointF() : d-&gt;bufferOffset, size())</span></span>;</span><br><span class="line">    node-&gt;<span class="built_in">setRect</span>(targetGeometry);</span><br><span class="line">    node-&gt;<span class="built_in">setFiltering</span>(<span class="built_in">smooth</span>() ? QSGTexture::Linear : QSGTexture::Nearest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而使用 delegate 的目的是为了能让多个 <code>WSurfaceItem</code> 使用相同的窗口画面，例如某些场景需要临时创建一个窗口的分身，窗口切换列表、多任务视图等。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QSGTextureProvider *<span class="title">WSurfaceItemContent::textureProvider</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QQuickItem::<span class="built_in">isTextureProvider</span>())</span><br><span class="line">        <span class="keyword">return</span> QQuickItem::<span class="built_in">textureProvider</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">wTextureProvider</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">WSGTextureProvider *<span class="title">WSurfaceItemContent::wTextureProvider</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">W_DC</span>(WSurfaceItemContent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> w = <span class="built_in">qobject_cast</span>&lt;WOutputRenderWindow*&gt;(d-&gt;window);</span><br><span class="line">    <span class="keyword">if</span> (!w || !d-&gt;<span class="built_in">sceneGraphRenderContext</span>() || QThread::<span class="built_in">currentThread</span>() != d-&gt;<span class="built_in">sceneGraphRenderContext</span>()-&gt;<span class="built_in">thread</span>()) &#123;</span><br><span class="line">        <span class="built_in">qWarning</span>(<span class="string">&quot;WQuickCursor::textureProvider: can only be queried on the rendering thread of an WOutputRenderWindow&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!d-&gt;textureProvider) &#123;</span><br><span class="line">        d-&gt;textureProvider = <span class="keyword">new</span> <span class="built_in">WSGTextureProvider</span>(w);</span><br><span class="line">        <span class="keyword">if</span> (d-&gt;surface) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">auto</span> texture = d-&gt;surface-&gt;<span class="built_in">handle</span>()-&gt;<span class="built_in">get_texture</span>()) &#123;</span><br><span class="line">                d-&gt;textureProvider-&gt;<span class="built_in">setTexture</span>(qw_texture::<span class="built_in">from</span>(texture), d-&gt;buffer.<span class="built_in">get</span>());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                d-&gt;textureProvider-&gt;<span class="built_in">setBuffer</span>(d-&gt;buffer.<span class="built_in">get</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d-&gt;textureProvider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Treeland 使用 <code>WQuickTextureProxy</code> 创建窗口的代理显示，而其中就是获取 <code>WSurfaceItem</code> 的 textureProvider。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QSGTextureProvider *<span class="title">WQuickTextureProxy::textureProvider</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (QQuickItem::<span class="built_in">isTextureProvider</span>())</span><br><span class="line">        <span class="keyword">return</span> QQuickItem::<span class="built_in">textureProvider</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">W_DC</span>(WQuickTextureProxy);</span><br><span class="line">    <span class="keyword">if</span> (!d-&gt;sourceItem)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d-&gt;sourceItem-&gt;<span class="built_in">textureProvider</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样多个 proxy 就可以显示同一个窗口的内容，比 QML 的 <code>ShaderEffectSource</code> 效率更高。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>上述仅仅是 Treeland 实现 Qt 和 wlroots 缝合的一部分流程，实际上对事件的处理就十分复杂，不止键盘输入，还需要处理光标、触控、触摸等其他设备。还有光标的绘制也需要区分硬光标和软光标，渲染画面时的硬件加速及软件实现等。</p><p>后续准备写一下光标相关的处理，以及还没介绍 Treeland 的画面是怎么绘制的。</p><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><aside>💡<p>Qt QPA <a href="https://doc.qt.io/qt-6/qpa.html">https://doc.qt.io/qt-6/qpa.html</a><br>QOffscreenSurface <a href="https://doc.qt.io/qt-6/qoffscreensurface.html">https://doc.qt.io/qt-6/qoffscreensurface.html</a></p></aside>]]></content>
    
    
      
      
    <summary type="html">&lt;aside&gt;
😀 Treeland 是一个基于 wlroots 和 Qt 的 Wayland 合成器
并且支持多用户共用合成器。

&lt;/aside&gt;

&lt;h2 id=&quot;名词概念&quot;&gt;&lt;a href=&quot;#名词概念&quot; class=&quot;headerlink&quot; title=&quot;名词概念&quot;&gt;</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.justforlxz.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="C++, Wayland, 图形学" scheme="https://blog.justforlxz.com/tags/C-Wayland-%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Treeland：DDE 进步的阶梯</title>
    <link href="https://blog.justforlxz.com/2024/11/01/treeland-go-go-go/"/>
    <id>https://blog.justforlxz.com/2024/11/01/treeland-go-go-go/</id>
    <published>2024-10-31T16:00:00.000Z</published>
    <updated>2024-12-31T07:10:49.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>DDE 在 v15 时期，使用 Mutter 作为带合成器的窗管，以及 Metacity 这种不带合成器的窗管，一个是在高性能设备上使用，一个是为低性能设备上使用。</p><p>在 V20 时期，DDE 更换 KWin 当窗口管理器，由于 KWin 自带有关闭合成器的模式，所以 DDE 也放弃了 Metacity 作为备用窗管的选项。</p><h2 id="Mutter"><a href="#Mutter" class="headerlink" title="Mutter"></a>Mutter</h2><p>Mutter 是 GNOME 开发的带有合成器功能的窗口管理器。</p><img src="/2024/11/01/treeland-go-go-go/image.png" class="" title="Mutter"><p>Mutter</p><h2 id="Metacity"><a href="#Metacity" class="headerlink" title="Metacity"></a>Metacity</h2><p>一个不带有合成器功能的窗口管理器。</p><img src="/2024/11/01/treeland-go-go-go/image%201.png" class="" title="Metacity"><p>Metacity</p><h2 id="KWin"><a href="#KWin" class="headerlink" title="KWin"></a>KWin</h2><p>KWin 是 KDE 开发的，具有动态切换渲染后端，动态开关合成器功能的窗口管理器。</p><img src="/2024/11/01/treeland-go-go-go/image%202.png" class="" title="KWin"><p>KWin</p><h1 id="需求和指标"><a href="#需求和指标" class="headerlink" title="需求和指标"></a>需求和指标</h1><p>在一个面向用户的产品中，拥有友好的界面是一个非常重要的事情，所以设计师给了一大堆非常好看的界面交互设计。</p><p>但更多的动画效果，以及更多的组件交互，通常就要求使用更多的资源，更多的内存，更高的功耗。</p><p>设计师说要动画华丽，要动画流畅，要优秀的用户体验。</p><p>架构师说要低资源占用，低内存，不能卡。</p><p>虽说一切目标都是为了用户体验，但两个大指标在实现上竟然是冲突的，那么如何平衡二者，就需要研发献祭一些头发了。</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>在Linux下目前有两个技术栈，一个是历史悠久的X11，另一个是较新的 Wayland。</p><p>接下来，跟随我一起来对比两个技术。</p><h2 id="X11"><a href="#X11" class="headerlink" title="X11"></a>X11</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>X11采用了比较老的客户端-服务器架构。应用程序通过X服务器与硬件设备进行通信，这种架构非常灵活，支持网络传输，使得远程显示变得可能。然而，X11协议复杂且过时，在很多方面不再符合现代的图形需求。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>由于其设计较老，X11在一些现代场景下的性能表现不佳。它需要依赖很多扩展和补丁才能实现现代图形效果，例如合成管理器（Compositor）等。这些叠加的复杂性导致了额外的性能开销。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>X11的安全性问题比较明显，因为所有应用程序都可以访问彼此的窗口信息。这意味着一个恶意程序可以读取或干扰其他程序的输入输出。虽然可以通过一些扩展和工具加强安全性，但这并不是X11的设计初衷。</p><h3 id="可扩展性和兼容性"><a href="#可扩展性和兼容性" class="headerlink" title="可扩展性和兼容性"></a><strong>可扩展性和兼容性</strong></h3><p>由于存在了几十年，X11有非常广泛的应用支持和兼容性。许多老的应用程序和桌面环境仍然依赖于X11协议，尤其是在远程桌面和某些专业领域。</p><h3 id="输入设备支持"><a href="#输入设备支持" class="headerlink" title="输入设备支持"></a><strong>输入设备支持</strong></h3><p>由于其历史悠久，X11对各种输入设备的支持相当成熟。但随着新硬件和新输入技术的出现，X11的设计显得有些不灵活，特别是在多点触控和手势支持方面。</p><h3 id="远程桌面和网络透明性"><a href="#远程桌面和网络透明性" class="headerlink" title="远程桌面和网络透明性"></a><strong>远程桌面和网络透明性</strong></h3><p>X11的一个优势是其天然的网络透明性。它支持通过网络将显示内容远程传输，这是很多专业领域（如科学计算、服务器管理）中非常有用的功能。</p><h2 id="Wayland"><a href="#Wayland" class="headerlink" title="Wayland"></a>Wayland</h2><h3 id="架构-1"><a href="#架构-1" class="headerlink" title="架构"></a>架构</h3><p>Wayland采用的是更简单的设计，去掉了X服务器的复杂层次。消除了很多中间环节，提高了效率和响应速度。Wayland专注于本地显示，不像X11那样直接支持远程显示。</p><h3 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h3><p>Wayland的设计更加现代化，它简化了渲染过程，减少了中间层，性能提升显著。特别是在动画和窗口操作方面，Wayland通常比X11更为流畅。</p><h3 id="安全性-1"><a href="#安全性-1" class="headerlink" title="安全性"></a>安全性</h3><p>Wayland在设计时考虑了安全性。应用程序之间的隔离更强，应用程序无法访问其他程序的图像或输入输出，这显著提高了系统的整体安全性。</p><h3 id="可扩展性和兼容性-1"><a href="#可扩展性和兼容性-1" class="headerlink" title="可扩展性和兼容性"></a><strong>可扩展性和兼容性</strong></h3><p>尽管Wayland逐渐被主流桌面环境（如GNOME、KDE等）支持，但其应用生态仍然不如X11广泛。在某些老旧或专业的应用场景中，可能需要通过兼容层（如XWayland）来运行基于X11的应用程序。</p><h3 id="输入设备支持-1"><a href="#输入设备支持-1" class="headerlink" title="输入设备支持"></a><strong>输入设备支持</strong></h3><p>Wayland针对现代硬件进行了优化，尤其是在多点触控、触摸板手势等方面有更好的支持。此外，它对显示器的DPI缩放、刷新率等也有更灵活的处理。</p><h3 id="远程桌面和网络透明性-1"><a href="#远程桌面和网络透明性-1" class="headerlink" title="远程桌面和网络透明性"></a><strong>远程桌面和网络透明性</strong></h3><p>Wayland默认没有X11那样的网络透明性功能。这意味着原生的远程桌面功能比较有限，尽管可以通过一些第三方工具或协议（如VNC、RDP）实现远程桌面，但这不是Wayland的核心功能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结下来，X11已经进入维护阶段，不再进行大幅更新。随着时间的推移，开发者和社区的注意力逐渐转移到Wayland上，X11可能会逐步淡出主流桌面环境。Wayland正在逐步成为Linux桌面的标准。随着越来越多的应用程序和桌面环境转向支持Wayland，其生态系统正在不断成熟和扩展。</p><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><p>从技术层面上，我们认为是时候更新技术方案了，曾经的X11+窗口管理器+合成器的模式，灵活但不满足需求，Wayland从底层就将三者融合在了一起，并且更新画面是以每幅完整的画面作为基础的，这确保了画面不会因为不同窗口更新界面的时机不一致导致画面撕裂。</p><p>更重要的一点，自研的窗口管理器，它是以实现DDE的需求为目的的，这是第三方窗口管理器不能比拟的。通常使用第三方的项目时，都要进行大量破坏性的调整，导致fork后的项目无法和上游同步，不能及时获取更新和修复，并且第三方的项目已经发展了很长时间，内部有许多DDE用不上、甚至冲突的功能，都需要进行大量调整，更加剧了维护成本。</p><p>所以 DDE 决定开发一个新的窗口管理器——Treeland。</p><p>Treeland在底层使用 wlroots 作为 Wayland 的基础库，不修改 wlroots 的代码，也就意味着可以随时同步上游进度，获得新的功能与修复。上层使用 Qt，可以充分利用公司内大量的 Qt 开发者，不再需要一直有专人负责特定项目，让DDE的技术栈更加统一。</p><img src="/2024/11/01/treeland-go-go-go/image%203.png" class="" title="image.png"><aside><p>该图描述了 Treeland 在整体上会使用哪些项目或接口完成功能。</p></aside><img src="/2024/11/01/treeland-go-go-go/v25-charter-treeland-treeland.drawio-2.png" class="" title="Treeland 结构图"><p>Treeland 结构图</p><p>简单介绍一些 Treeland 里涉及的重要项目。</p><ul><li><p>QWlroots</p><p>  wlroots 的 Qt 绑定，将 wayland 信号转换成 Qt 风格的信号。</p></li><li><p>Waylib</p><p>  将 wlroots 中的组件封装成 QtQuick 对象，使用 QPA 为 Treeland 提供事件转换与分发。</p></li><li><p>DtkDeclarative</p><p>  DTK 的 QtQuick 组件，封装了大部分 DTK style 的控件。</p></li></ul><p>在 Waylib中，会使用到 Qt 的 QPA 功能，将 wlroots 作为一个新的平台来处理一部分功能。</p><p>QPA 在 Treeland 中有着举足轻重的地位，来自系统底层的事件会先进入到 Waylib中，在 Waylib 里将事件转换成 Qt 内部事件，发送给上层。这样 Treeland 就可以在 QtQuick 中确定用户的点击位置、按键事件等行为。当用户点击的是窗口时，Treeland 还会通过 Waylib 生成一个事件，通过 seat 的接口发送给客户端，完成界面交互。</p><img src="/2024/11/01/treeland-go-go-go/waylib.png" class="" title="Treeland 处理底层事件与上层事件的流程"><p>Treeland 处理底层事件与上层事件的流程</p><h2 id="界面效果与优化"><a href="#界面效果与优化" class="headerlink" title="界面效果与优化"></a>界面效果与优化</h2><p>Treeland 作为一个窗口管理器，最重要的功能还是对窗口的管理及显示效果的控制，Treeland 所有的窗口都带有圆角和阴影，以及一些窗口模糊效果。</p><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><p>DDE及deepin社区应用都大量采用了窗口圆角的设计，由合成器提供圆角裁剪可以带来更加统一的界面设计。</p><img src="/2024/11/01/treeland-go-go-go/image%204.png" class="" title="红色为QtQuick圆角&#x2F;黄色为Treeland圆角"><p>红色为QtQuick圆角&#x2F;黄色为Treeland圆角</p><p>QtQuick 圆角是由 Rectangle 组件提供的，它只能同时对四个角进行操作（红色块）。但 DTK 程序具备异形窗口的能力，所以 Treeland 提供了自己的裁圆角控件（黄色块）。<br>新的造型算法、几何顶点数量比 QtQuick 原生的 Rectangle 减少50%，GPU顶点渲染和三角细分性能提升100%。<br>采用新的抗锯齿算法，提高了GPU片元着色器性能，相比于普通 4xMSAA 抗锯齿算法，计算量减少1&#x2F;4。</p><h3 id="模糊"><a href="#模糊" class="headerlink" title="模糊"></a>模糊</h3><img src="/2024/11/01/treeland-go-go-go/image%205.png" class="" title="QtQuick 模糊控件"><p>QtQuick 模糊控件</p><p>QtQuick 的模糊组件仅支持对控件自身进行模糊，这并不符合 Treeland 的需求。</p><img src="/2024/11/01/treeland-go-go-go/image%206.png" class="" title="Treeland 模糊控件"><p>Treeland 模糊控件</p><p>Treeland 重新实现了模糊组件，能从显存里获取组件下方图像数据，再使用融合的模糊算法优化性能。</p><h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><img src="/2024/11/01/treeland-go-go-go/image%207.png" class="" title="image.png"><p>Qt Quick 有一个 BorderImage 组件，它能以九宫格的方式，四个角保持不变，四边和中间的部分拉伸，来达到在组件底部充当装饰的效果。并通过 ImageProvider 的机制，手动控制图片资源的创建。</p><p>Treeland 使用 BorderImage 作为窗口阴影贴图，通过 ImageProvider 手动创建贴图材质，在相同大小下可复用同一份材质。</p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>Treeland 直接使用 QtQuick 提供的动画组件，来为界面提供动画效果。</p><p>使用 State 和 Transition 为组件定义属性变化，例如窗口最大化和还原，两个 State 切换会触发不同的 Transition 执行属性变化，在属性变化时，使用 QtQuick 的动画组件完成动画播放。</p><h2 id="多用户"><a href="#多用户" class="headerlink" title="多用户"></a>多用户</h2><p>Treeland 作为解决方案的一部分，目的之一就是多用户共用合成器。在经典模式下，不同用户的切换需要在 tty 层面前端程序转移控制权，每个用户独占一个 tty 进行画面上屏。但切换tty所需的工作量不小，这导致切换时屏幕的缓冲区被不同的程序覆盖，给人的观感就是屏幕闪烁了一下，甚至是黑屏一会儿。</p><h3 id="DDM"><a href="#DDM" class="headerlink" title="DDM"></a>DDM</h3><img src="/2024/11/01/treeland-go-go-go/image%208.png" class="" title="image.png"><img src="/2024/11/01/treeland-go-go-go/image%209.png" class="" title="image.png"><p>通过上图可以看出，LightDM模式下，每个用户拥有完整的一套进程组，都需要运行窗管、任务栏、文件管理器等。不同的用户会单独占用一个 tty，那么用户切换时，必然伴随着底层 DRM 以及显卡驱动等操作的切换，带来的结果就是会看到闪黑屏，而且两个用户都要跑一个锁屏界面来维持”假装是同一个界面“，也带来了跨用户进程的信息同步难题。</p><p>而 DDM 和 Treeland 重新设计了工作流程，将 Treeland 单独抽离出来，每个用户都通过相同的一套机制将窗口画面发送给 Treeland，而 Treeland 负责最终的画面合成以及上屏。</p><p>带来的好处显而易见，内存方面节省了窗管、锁屏等进程，切换用户也不会有黑屏闪烁，状态也不用想办法同步了。</p><img src="/2024/11/01/treeland-go-go-go/greeter.png" class="" title="一个简化的 DDM 与 Treeland 的多用户登录流程"><p>一个简化的 DDM 与 Treeland 的多用户登录流程</p><h3 id="与-systemd-的集成"><a href="#与-systemd-的集成" class="headerlink" title="与 systemd 的集成"></a>与 systemd 的集成</h3><p>DDE 的每一个用户会话，都已切换至 systemd 服务，而非所有进程都挂载到会话入口的服务上。这样做有很多好处，包括快速重启桌面环境，而非注销再登录。远程桌面的铺垫，会话的启动不再局限于本地会话。</p><p>在 Treeland 模式下，DDE 会加载一个单独的服务，用于为用户会话注入显示环境变量。该服务使用 systemd 提供的 socket 机制实行懒加载，当 DDE 需要显示窗口时，即时向 Treeland 注册，完成用户显示服务的初始化。当 Treeland 崩溃重启时，该服务也会等待 Treeland 启动完成，并再次连接回 Treeland，确保用户侧的窗口能正常显示。</p><img src="/2024/11/01/treeland-go-go-go/treeland.png" class="" title="多用户登录时的基本流程"><p>多用户登录时的基本流程</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了深度操作系统（DDE）在窗口管理器方面的演进，从早期使用Mutter和Metacity，到后来采用KWin，最终决定开发自己的窗口管理器Treeland。Treeland基于wlroots和Qt技术栈，实现了更好的性能和更统一的技术框架。</p><p>本文概述了 Treeland 的技术架构、界面效果优化（如圆角、模糊、阴影等），以及其在多用户场景下的优势。此外，还介绍了Treeland与systemd的集成，展示了DDE在系统架构和用户体验方面的持续创新和改进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;DDE 在 v15 时期，使用 Mutter 作为带合成器的窗管，以及 Metacity 这种不带合成器的窗管，一个是在高性能设备上使用，一</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.justforlxz.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="C++" scheme="https://blog.justforlxz.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Add macvlan net</title>
    <link href="https://blog.justforlxz.com/2024/04/15/Add-macvlan-net/"/>
    <id>https://blog.justforlxz.com/2024/04/15/Add-macvlan-net/</id>
    <published>2024-04-15T05:10:41.000Z</published>
    <updated>2024-04-15T05:11:47.503Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Script to enable macvlan on boot</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStartPre=-/usr/bin/bash -c &#x27;mount --make-rshared /&#x27; # for k3s in lxc (optional)</span><br><span class="line">ExecStartPre=-/usr/bin/bash -c &#x27;/usr/bin/ip link del mac0&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip link set eth0 up&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip link add link eth0 mac0 type macvlan mode bridge&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip addr add 192.168.1.11/24 dev mac0&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip link set mac0 up&#x27;</span><br><span class="line">ExecStartPre=-/usr/bin/bash -c &#x27;/usr/bin/ip route add 192.168.1.0/24 dev mac0&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip route add default via 192.168.1.1&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip route add 198.18.0.0/16 via 192.168.1.1&#x27; # for fake ip (optional)</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;ip rule add to 192.168.1.0/24 priority 2500 lookup main&#x27;</span><br><span class="line">ExecStart=/usr/bin/bash -c &#x27;/usr/bin/echo done&#x27;</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Unit]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Description=Script t</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://blog.justforlxz.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>solved run k8s in wsl2</title>
    <link href="https://blog.justforlxz.com/2024/03/01/solved-run-k8s-in-wsl2/"/>
    <id>https://blog.justforlxz.com/2024/03/01/solved-run-k8s-in-wsl2/</id>
    <published>2024-03-01T03:30:11.000Z</published>
    <updated>2024-04-15T05:09:55.032Z</updated>
    
    <content type="html"><![CDATA[<p>When I use wsl2 join my k8s cluster, I have some problem. It can be start, but pod is not runing.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Normal   Scheduled               95m                default-scheduler  Successfully assigned longhorn-system/longhorn-csi-plugin-bvnmk to company-wsl-1</span><br><span class="line">Warning  FailedCreatePodSandBox  4m                 kubelet            Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox &quot;a13a250444d61af44800db054a047059c66202ab9d8a47732748c7c4d380131b&quot;: plugin type=&quot;multus&quot; failed (add): Multus: [longhorn-system/longhorn-csi-plugin-bvnmk/2203cd9f-608d-42b1-82b9-dad186a9b5cb]: error waiting for pod: Get &quot;https://[10.43.0.1]:443/api/v1/namespaces/longhorn-system/pods/longhorn-csi-plugin-bvnmk?timeout=1m0s&quot;: dial tcp 10.43.0.1:443: i/o timeout</span><br><span class="line">Normal   SandboxChanged          2m (x3 over 8m1s)  kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class="line">Warning  FailedCreatePodSandBox  2m                 kubelet            Failed to create pod sandbox: rpc error: code = Unknown desc = failed to reserve sandbox name &quot;longhorn-csi-plugin-bvnmk_longhorn-system_2203cd9f-608d-42b1-82b9-dad186a9b5cb_2&quot;: name &quot;longhorn-csi-plugin-bvnmk_longhorn-system_2203cd9f-608d-42b1-82b9-dad186a9b5cb_2&quot; is reserved for &quot;a13a250444d61af44800db054a047059c66202ab9d8a47732748c7c4d380131b&quot;</span><br></pre></td></tr></table></figure><p>Looks like network problem, but when I open journal in wsl2, I see iptables-restore can not runing.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]: E0301 11:26:59.262472     223 proxier.go:1521] &quot;Failed to execute iptables-restore&quot; err=&lt;</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:         exit status 2: iptables-restore v1.8.7 (nf_tables): Couldn&#x27;t load match `recent&#x27;:No such file or directory</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:         Error occurred at line: 145</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:         Try `iptables-restore -h&#x27; or &#x27;iptables-restore --help&#x27; for more information.</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:  &gt;</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]: I0301 11:26:59.262516     223 proxier.go:801] &quot;Sync failed&quot; retryingTime=&quot;30s&quot;</span><br></pre></td></tr></table></figure><p>Now let’s fix!</p><p>build before install depends.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install -y git build-essential flex bison libssl-dev libelf-dev bc dwarves python3</span><br></pre></td></tr></table></figure><ol><li>clone wsl2 kernel code.</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/microsoft/WSL2-Linux-Kernel.git &amp;&amp; cd WSL2-Linux-Kernel</span><br></pre></td></tr></table></figure><ol start="2"><li>enable xt_recent.</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/# CONFIG_NETFILTER_XT_MATCH_RECENT is not set/CONFIG_NETFILTER_XT_MATCH_RECENT=y/&#x27; Microsoft/config-wsl</span><br></pre></td></tr></table></figure><ol start="3"><li>build kernel.</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -j2 KCONFIG_CONFIG=Microsoft/config-wsl</span><br></pre></td></tr></table></figure><ol start="4"><li>cp kernel to some path.</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp arch/x86/boot/bzImage /mnt/c/Users/&lt;your-user-name&gt;/wsl-kernel</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">5. Create a .wslconfig file in C:\Users\&lt;your-user-name&gt;\</span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">[wsl2]</span><br><span class="line">kernel=C:\\Users\\&lt;your-user-name&gt;\\wsl-kernel</span><br></pre></td></tr></table></figure><ol start="6"><li>reboot wsl</li></ol><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br><span class="line"></span><br><span class="line">wsl</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When I use wsl2 join my k8s cluster, I have some problem. It can be start, but pod is not runing.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://blog.justforlxz.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>solved Could not find a declaration file for module &#39;vuex&#39;.</title>
    <link href="https://blog.justforlxz.com/2023/09/11/solved-Could-not-find-a-declaration-file-for-module-vuex/"/>
    <id>https://blog.justforlxz.com/2023/09/11/solved-Could-not-find-a-declaration-file-for-module-vuex/</id>
    <published>2023-09-11T02:14:56.000Z</published>
    <updated>2024-04-15T05:09:55.028Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I was rewriting the email client using Vue and encountered an error when using Vuex to process data.</p><p><code>Could not find a declaration file for module &#39;vuex&#39;.</code></p><p>Vuex does not have <code>@types/vuex</code>, so it can only be solved by adding d.ts manually.</p><p>Add vuex.d.ts in the project directory and add the following content:</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vuex&quot;</span> &#123;</span><br><span class="line">   <span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;vuex/types/index.d.ts&quot;</span>;</span><br><span class="line">   <span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;vuex/types/helpers.d.ts&quot;</span>;</span><br><span class="line">   <span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;vuex/types/logger.d.ts&quot;</span>;</span><br><span class="line">   <span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;vuex/types/vue.d.ts&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently I was rewriting the email client using Vue and encountered an error when using Vuex to process data.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Could not find</summary>
      
    
    
    
    <category term="Vue" scheme="https://blog.justforlxz.com/categories/Vue/"/>
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Vue/Solution/"/>
    
    
    <category term="vuex" scheme="https://blog.justforlxz.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>solved react-native error: SDK iphoneos cannot be located</title>
    <link href="https://blog.justforlxz.com/2023/06/29/solved-react-native-error-SDK-iphoneos-cannot-be-located/"/>
    <id>https://blog.justforlxz.com/2023/06/29/solved-react-native-error-SDK-iphoneos-cannot-be-located/</id>
    <published>2023-06-29T01:40:13.000Z</published>
    <updated>2024-04-15T05:09:55.032Z</updated>
    
    <content type="html"><![CDATA[<p>While initializing the project, react native has the following error.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">patching file config.sub</span><br><span class="line">checking <span class="keyword">for</span> a BSD-compatible install... /usr/bin/install -c</span><br><span class="line">checking whether build environment is sane... <span class="built_in">yes</span></span><br><span class="line">checking <span class="keyword">for</span> arm-apple-darwin-strip... no</span><br><span class="line">checking <span class="keyword">for</span> strip... strip</span><br><span class="line">checking <span class="keyword">for</span> a thread-safe <span class="built_in">mkdir</span> -p... ./install-sh -c -d</span><br><span class="line">checking <span class="keyword">for</span> gawk... no</span><br><span class="line">checking <span class="keyword">for</span> mawk... no</span><br><span class="line">checking <span class="keyword">for</span> nawk... no</span><br><span class="line">checking <span class="keyword">for</span> awk... awk</span><br><span class="line">checking whether make sets $(MAKE)... <span class="built_in">yes</span></span><br><span class="line">checking whether make supports nested variables... <span class="built_in">yes</span></span><br><span class="line">checking <span class="keyword">for</span> arm-apple-darwin-gcc... /Library/Developer/CommandLineTools/usr/bin/cc -<span class="built_in">arch</span> arm64 -isysroot</span><br><span class="line">checking whether the C compiler works... no</span><br><span class="line">xcrun: error: SDK <span class="string">&quot;iphoneos&quot;</span> cannot be located</span><br><span class="line">xcrun: error: SDK <span class="string">&quot;iphoneos&quot;</span> cannot be located</span><br><span class="line">xcrun: error: SDK <span class="string">&quot;iphoneos&quot;</span> cannot be located</span><br><span class="line">xcrun: error: unable to lookup item <span class="string">&#x27;Path&#x27;</span> <span class="keyword">in</span> SDK <span class="string">&#x27;iphoneos&#x27;</span></span><br><span class="line">/Users/lxz/Library/Caches/CocoaPods/Pods/External/glog/2263bd123499e5b93b5efe24871be317-04b94/missing: Unknown `--is-lightweight<span class="string">&#x27; option</span></span><br><span class="line"><span class="string">Try `/Users/lxz/Library/Caches/CocoaPods/Pods/External/glog/2263bd123499e5b93b5efe24871be317-04b94/missing --help&#x27;</span> <span class="keyword">for</span> more information</span><br><span class="line">configure: WARNING: <span class="string">&#x27;missing&#x27;</span> script is too old or missing</span><br><span class="line">configure: error: <span class="keyword">in</span> `/Users/lxz/Library/Caches/CocoaPods/Pods/External/glog/2263bd123499e5b93b5efe24871be317-04b94<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">configure: error: C compiler cannot create executables</span></span><br><span class="line"><span class="string">See `config.log&#x27;</span> <span class="keyword">for</span> more details</span><br><span class="line">✖ Installing CocoaPods dependencies (this may take a few minutes)</span><br><span class="line">error Looks like your iOS environment is not properly <span class="built_in">set</span>. Please go to https://reactnative.dev/docs/environment-setup?os=macos&amp;platform=android and follow the React Native CLI QuickStart guide <span class="keyword">for</span> macOS and iOS.</span><br><span class="line">info Run CLI with --verbose flag <span class="keyword">for</span> more details.</span><br></pre></td></tr></table></figure><p>Notice in the error that &#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F; is being used, which should use the path of xcode.</p><p>works for me:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> xcode-select --switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure><p>switch to project directory.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ios &amp;&amp; npx pod install &amp;&amp; <span class="built_in">cd</span> .. &amp;&amp; react-native run-ios</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;While initializing the project, react native has the following error.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="ReactNative" scheme="https://blog.justforlxz.com/categories/ReactNative/"/>
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/ReactNative/Solution/"/>
    
    
    <category term="reactnative" scheme="https://blog.justforlxz.com/tags/reactnative/"/>
    
    <category term="ios" scheme="https://blog.justforlxz.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>开发一个 KWin 特效插件</title>
    <link href="https://blog.justforlxz.com/2023/06/25/How-to-develop-a-kwin-special-effects-plugin/"/>
    <id>https://blog.justforlxz.com/2023/06/25/How-to-develop-a-kwin-special-effects-plugin/</id>
    <published>2023-06-25T05:25:55.000Z</published>
    <updated>2024-04-15T05:09:54.914Z</updated>
    
    <content type="html"><![CDATA[<p>KWin 是 KDE 开发的窗口管理器，提供了非常丰富的插件，可以对功能进行大量的定制。</p><p>本篇文章是对窗口特效插件的开发介绍。</p><h2 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h2><h3 id="插件定义"><a href="#插件定义" class="headerlink" title="插件定义"></a>插件定义</h3><p>KWin 的插件通常可以使用一些宏辅助生成代码，例如使用 <code>KPluginFactory</code> 进行插件的定义，内容是用来生成插件的入口类。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EffectPluginFactory_iid <span class="string">&quot;org.kde.kwin.EffectPluginFactory&quot;</span> KWIN_PLUGIN_VERSION_STRING</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_PLUGIN_FACTORY_NAME KPLUGINFACTORY_PLUGIN_CLASS_INTERNAL_NAME</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_EFFECT_FACTORY_SUPPORTED_ENABLED(className, jsonFile, supported, enabled ) \</span></span><br><span class="line"><span class="meta">    class KWIN_PLUGIN_FACTORY_NAME : public KWin::EffectPluginFactory \</span></span><br><span class="line"><span class="meta">    &#123; \</span></span><br><span class="line"><span class="meta">        Q_OBJECT \</span></span><br><span class="line"><span class="meta">        Q_PLUGIN_METADATA(IID EffectPluginFactory_iid FILE jsonFile) \</span></span><br><span class="line"><span class="meta">        Q_INTERFACES(KPluginFactory) \</span></span><br><span class="line"><span class="meta">    public: \</span></span><br><span class="line"><span class="meta">        explicit KWIN_PLUGIN_FACTORY_NAME() &#123;&#125; \</span></span><br><span class="line"><span class="meta">        ~KWIN_PLUGIN_FACTORY_NAME() &#123;&#125; \</span></span><br><span class="line"><span class="meta">        bool isSupported() const override &#123; \</span></span><br><span class="line"><span class="meta">            supported \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">        bool enabledByDefault() const override &#123; \</span></span><br><span class="line"><span class="meta">            enabled \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">        KWin::Effect *createEffect() const override &#123; \</span></span><br><span class="line"><span class="meta">            return new className(); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_EFFECT_FACTORY_ENABLED(className, jsonFile, enabled ) \</span></span><br><span class="line"><span class="meta">    KWIN_EFFECT_FACTORY_SUPPORTED_ENABLED(className, jsonFile, return true;, enabled )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_EFFECT_FACTORY_SUPPORTED(className, jsonFile, supported ) \</span></span><br><span class="line"><span class="meta">    KWIN_EFFECT_FACTORY_SUPPORTED_ENABLED(className, jsonFile, supported, return true; )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_EFFECT_FACTORY(className, jsonFile ) \</span></span><br><span class="line"><span class="meta">    KWIN_EFFECT_FACTORY_SUPPORTED_ENABLED(className, jsonFile, return true;, return true; )</span></span><br></pre></td></tr></table></figure><p>大部分宏只是为了方便结构修改，我们只需要使用 <code>K_PLUGIN_FACTORY</code> 进行插件定义即可。</p><p>假设我们开发了一个插件，名字叫 demo，我们只需要在 main.cpp 中使用 <code>KWIN_EFFECT_FACTORY_SUPPORTED</code> 定义</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">KWIN_EFFECT_FACTORY_SUPPORTED</span>(</span><br><span class="line">    Demo,</span><br><span class="line">    <span class="string">&quot;metadata.json&quot;</span>,</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>代码展开后是这样的。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KPLUGINFACTORY_PLUGIN_CLASS_INTERNAL_NAME</span> : <span class="keyword">public</span> KWin::EffectPluginFactory \</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Q_OBJECT</span></span><br><span class="line"><span class="function">    <span class="title">Q_PLUGIN_METADATA</span><span class="params">(IID EffectPluginFactory_iid FILE <span class="string">&quot;metadata.json&quot;</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">Q_INTERFACES</span><span class="params">(KPluginFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span>: \</span></span><br><span class="line"><span class="function">    explicit KPLUGINFACTORY_PLUGIN_CLASS_INTERNAL_NAME() &#123;</span>&#125;</span><br><span class="line">    ~<span class="built_in">KPLUGINFACTORY_PLUGIN_CLASS_INTERNAL_NAME</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSupported</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">enabledByDefault</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">KWin::Effect *<span class="title">createEffect</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Demo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，其实 <code>KWIN_EFFECT_FACTORY_SUPPORTED</code> 只是为我们生成了工厂函数，辅助生成了一些必要的重载。</p><p><code>metadata.json</code> 文件是用来作为插件的描述信息使用的。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;KPlugin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Accessibility&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow clip of window content&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;EnabledByDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scissor&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;License&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GPL&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ScissorWindow&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name[zh_CN]&quot;</span><span class="punctuation">:</span> <span class="string">&quot;窗口圆角&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;org.kde.kwin.effect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabledByDefaultMethod&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="特效插件"><a href="#特效插件" class="headerlink" title="特效插件"></a>特效插件</h3><p>特效插件是一类可以改变窗口画面的插件，例如我们可以在插件里对窗口进行贴图、变形和裁切，在 DDE 中，就使用特效插件完成了圆角裁切和窗口模糊。</p><p>这里使用圆角裁切插件作为例子，首先使用 <code>KWIN_EFFECT_FACTORY_SUPPORTED</code> 宏对插件进行定义， <code>KWIN_EFFECT_FACTORY_SUPPORTED</code> 接受一个 class 作为返回的接口类，它需要继承自 <code>Effect</code>，第二个参数是元信息的 json 文件，第三个参数是返回是否支持，在启用插件时可对当前环境进行判断，例如插件需要使用 <code>OpenGL</code> 对图形进行一些操作，但是当前环境不支持 <code>OpenGL</code>，那么插件就不会启用。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;scissorwindow.h&quot;</span></span><br><span class="line"></span><br><span class="line">namespace KWin</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">KWIN_EFFECT_FACTORY_SUPPORTED(ScissorWindow<span class="punctuation">,</span></span><br><span class="line">                              <span class="string">&quot;metadata.json.stripped&quot;</span><span class="punctuation">,</span></span><br><span class="line">                              return ScissorWindow<span class="punctuation">:</span><span class="punctuation">:</span>supported();)</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="comment">// namespace KWin</span></span><br><span class="line"></span><br><span class="line">#include <span class="string">&quot;main.moc&quot;</span></span><br></pre></td></tr></table></figure><p>在 Effect 类中有几个不同阶段的方法可以重载。</p><ul><li>prePaintScreen<ul><li>设置是否变换窗口或整个屏幕</li><li>更改将要绘制的屏幕区域</li><li>做各种内务处理任务，比如初始化你的效果变量<br>  用于即将到来的绘画过程或更新动画的进度</li></ul></li><li>paintScreen<ul><li>在窗口上画东西（调用后画 effect-&gt;paintScreen())</li><li>绘制多个桌面和&#x2F;或同一桌面的多个副本</li></ul></li><li>postPaintScreen<ul><li>在动画的情况下安排下一次重绘，不应该在这里画任何东西。</li></ul></li><li>prePaintWindow<ul><li>启用或禁用窗口的绘制（例如启用最小化窗口的绘制）</li><li>将窗口设置为半透明</li><li>设置要转换的窗口</li><li>请求将窗口分成多个部分</li></ul></li><li>paintWindow<ul><li>做各种转换</li><li>改变窗口的不透明度</li><li>改变亮度和&#x2F;或饱和度，如果支持的话</li></ul></li><li>postPaintWindow<ul><li>在动画的情况下为单个窗口安排下一次重绘<br>  不应该在这里画任何东西。</li></ul></li><li>paintEffectFrame<ul><li>在绘制 EffectFrame 之前直接调用此方法。</li><li>如果需要绑定shader或者执行，可以实现这个方法帧渲染前的其他操作。</li></ul></li><li>drawWindow<ul><li>可以调用以绘制一个窗口的多个副本（例如缩略图）。</li><li>可以在这里改变窗口的不透明度&#x2F;亮度&#x2F;等，但不能做任何转换。</li><li>在基于 OpenGL 的合成中，框架确保上下文是最新的</li></ul></li></ul><p>在方法名称中可以看出，在场景及窗口绘制的过程中，分别可以在实际绘制的前后分别执行一些动作，圆角插件就是在 <code>drawWindow</code> 函数中，使用 <code>OpenGL</code> 对窗口使用着色器进行窗口裁切，并绘制到屏幕上。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ScissorWindow::drawWindow</span><span class="params">(EffectWindow *w, <span class="type">int</span> mask, <span class="type">const</span> QRegion&amp; region, WindowPaintData &amp;data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;<span class="built_in">isDesktop</span>() || <span class="built_in">isMaximized</span>(w)) &#123;</span><br><span class="line">        <span class="keyword">return</span> effects-&gt;<span class="built_in">drawWindow</span>(w, mask, region, data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    QPointF cornerRadius;</span><br><span class="line">    <span class="type">const</span> QVariant valueRadius = w-&gt;<span class="built_in">data</span>(WindowRadiusRole);</span><br><span class="line">    <span class="keyword">if</span> (valueRadius.<span class="built_in">isValid</span>()) &#123;</span><br><span class="line">        cornerRadius = w-&gt;<span class="built_in">data</span>(WindowRadiusRole).<span class="built_in">toPointF</span>();</span><br><span class="line">        <span class="type">const</span> qreal xMin&#123; std::<span class="built_in">min</span>(cornerRadius.<span class="built_in">x</span>(), w-&gt;<span class="built_in">width</span>() / <span class="number">2.0</span>) &#125;;</span><br><span class="line">        <span class="type">const</span> qreal yMin&#123; std::<span class="built_in">min</span>(cornerRadius.<span class="built_in">y</span>(), w-&gt;<span class="built_in">height</span>() / <span class="number">2.0</span>) &#125;;</span><br><span class="line">        <span class="type">const</span> qreal minRadius&#123; std::<span class="built_in">min</span>(xMin, yMin) &#125;;</span><br><span class="line">        cornerRadius = <span class="built_in">QPointF</span>(minRadius, minRadius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cornerRadius.<span class="built_in">x</span>() &lt; <span class="number">2</span> &amp;&amp; cornerRadius.<span class="built_in">y</span>() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> effects-&gt;<span class="built_in">drawWindow</span>(w, mask, region, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> QString&amp; key = <span class="built_in">QString</span>(<span class="string">&quot;%1+%2&quot;</span>).<span class="built_in">arg</span>(cornerRadius.<span class="built_in">toPoint</span>().<span class="built_in">x</span>()).<span class="built_in">arg</span>(cornerRadius.<span class="built_in">toPoint</span>().<span class="built_in">y</span>()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (!m_texMaskMap.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line"><span class="function">QImage <span class="title">img</span><span class="params">(QSize(radius.x() * <span class="number">2</span>, radius.y() * <span class="number">2</span>), QImage::Format_RGBA8888)</span></span>;</span><br><span class="line">    img.<span class="built_in">fill</span>(<span class="built_in">QColor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(&amp;img)</span></span>;</span><br><span class="line">    painter.<span class="built_in">setPen</span>(Qt::NoPen);</span><br><span class="line">    painter.<span class="built_in">setBrush</span>(<span class="built_in">QColor</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">    painter.<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);</span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="number">0</span>, <span class="number">0</span>, radius.<span class="built_in">x</span>() * <span class="number">2</span>, radius.<span class="built_in">y</span>() * <span class="number">2</span>);</span><br><span class="line">    painter.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">    m_texMaskMap[key] = <span class="keyword">new</span> <span class="built_in">GLTexture</span>(img.<span class="built_in">copy</span>(<span class="number">0</span>, <span class="number">0</span>, radius.<span class="built_in">x</span>(), radius.<span class="built_in">y</span>()));</span><br><span class="line">    m_texMaskMap[key]-&gt;<span class="built_in">setFilter</span>(GL_LINEAR);</span><br><span class="line">    m_texMaskMap[key]-&gt;<span class="built_in">setWrapMode</span>(GL_CLAMP_TO_EDGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ShaderManager::<span class="built_in">instance</span>()-&gt;<span class="built_in">pushShader</span>(m_filletOptimizeShader);</span><br><span class="line">    m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;typ1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;sampler&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;msk1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;k&quot;</span>, <span class="built_in">QVector2D</span>(w-&gt;<span class="built_in">width</span>() / cornerRadius.<span class="built_in">x</span>(), w-&gt;<span class="built_in">height</span>() / cornerRadius.<span class="built_in">y</span>()));</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;<span class="built_in">hasDecoration</span>()) &#123;</span><br><span class="line">        m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;typ2&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;typ2&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> old_shader = data.shader;</span><br><span class="line">    data.shader = m_filletOptimizeShader;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glActiveTexture</span>(GL_TEXTURE1);</span><br><span class="line">    m_texMaskMap[key]-&gt;<span class="built_in">bind</span>();</span><br><span class="line">    <span class="built_in">glActiveTexture</span>(GL_TEXTURE0);</span><br><span class="line">    effects-&gt;<span class="built_in">drawWindow</span>(w, mask, region, data);</span><br><span class="line">    ShaderManager::<span class="built_in">instance</span>()-&gt;<span class="built_in">popShader</span>();</span><br><span class="line">    data.shader = old_shader;</span><br><span class="line">    <span class="built_in">glActiveTexture</span>(GL_TEXTURE1);</span><br><span class="line">    m_texMaskMap[key]-&gt;<span class="built_in">unbind</span>();</span><br><span class="line">    <span class="built_in">glActiveTexture</span>(GL_TEXTURE0);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果窗口是桌面类型，或者已经最大化了，则无需处理，直接返回 Effect 原本的处理函数。</p><p>之后尝试从窗口属性中取出圆角大小的值，如果没有设置圆角大小，或者值小于2，则无需处理。</p><p>尝试查询缓存，在这里为窗口的四个角构建一份遮罩对象并缓存，使用 <code>OpenGL</code> 将遮罩和着色器进行关联，激活两个材质分别绘制窗口内容和四个角的遮罩，在着色器中完成窗口圆角的半透明效果。</p><p>限于篇幅，本文不展开介绍如何实现圆角插件的全部实现过程，仅挑选关键步骤。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将动态库复制到 <code>/usr/share/kwin/effects/plugins</code> ，并使用 <code>DBus</code> 激活插件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qdbus --literal org.kde.KWin /Effects org.kde.kwin.Effects.loadEffect scissor</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;KWin 是 KDE 开发的窗口管理器，提供了非常丰富的插件，可以对功能进行大量的定制。&lt;/p&gt;
&lt;p&gt;本篇文章是对窗口特效插件的开发介绍。&lt;/p&gt;
&lt;h2 id=&quot;插件开发&quot;&gt;&lt;a href=&quot;#插件开发&quot; class=&quot;headerlink&quot; title=&quot;插件开发&quot;&gt;</summary>
      
    
    
    
    <category term="deepin" scheme="https://blog.justforlxz.com/categories/deepin/"/>
    
    
    <category term="deepin" scheme="https://blog.justforlxz.com/tags/deepin/"/>
    
    <category term="kwin" scheme="https://blog.justforlxz.com/tags/kwin/"/>
    
  </entry>
  
  <entry>
    <title>How to count the cpu usage of a process</title>
    <link href="https://blog.justforlxz.com/2023/05/24/How-to-count-the-cpu-usage-of-a-process/"/>
    <id>https://blog.justforlxz.com/2023/05/24/How-to-count-the-cpu-usage-of-a-process/</id>
    <published>2023-05-24T02:43:04.000Z</published>
    <updated>2024-04-15T05:09:54.913Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes we want to collect the cpu usage of the process, and usually use a script to make simple statistics.</p><p>Under Linux, the cpu time slice of the process can be obtained through the stat provided by procfs.</p><p>Or simply use some commands to get directly.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">FULL_PATH=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$@</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> ; <span class="keyword">do</span></span><br><span class="line">    PID=$(pidof <span class="variable">$&#123;FULL_PATH&#125;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$PID</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span> :: <span class="variable">$FULL_PATH</span>[<span class="variable">$PID</span>] <span class="subst">$(ps -C $&#123;FULL_PATH&#125; -o %cpu | tail -1)</span>%&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> 0.5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes we want to collect the cpu usage of the process, and usually use a script to make simple statistics.&lt;/p&gt;
&lt;p&gt;Under Linux, the cp</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="Linux" scheme="https://blog.justforlxz.com/tags/Linux/"/>
    
    <category term="Bash" scheme="https://blog.justforlxz.com/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>How to Solve the Module not found: Cannot resolve &#39;fs&#39; error in Next.js</title>
    <link href="https://blog.justforlxz.com/2023/04/19/How-to-Solve-the-Module-not-found-Cannot-resolve-fs-error-in-Next-js/"/>
    <id>https://blog.justforlxz.com/2023/04/19/How-to-Solve-the-Module-not-found-Cannot-resolve-fs-error-in-Next-js/</id>
    <published>2023-04-19T05:58:21.000Z</published>
    <updated>2024-04-15T05:09:54.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpack-4-version"><a href="#Webpack-4-version" class="headerlink" title="Webpack 4 version"></a>Webpack 4 version</h2><p>To resolve the error with Webpack 4, you need to tell webpack to set the module to ‘empty’ on the client-side (!isServer).</p><p>This is also a solution when you are working with older Next.js versions.</p><p>The configuration essentially tells Webpack to create an empty module for fs, which effectively suppresses the error.</p><p>Update your <code>next.config.js</code> with the following:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: <span class="function">(<span class="params">config, &#123; isServer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isServer) &#123;</span><br><span class="line">      <span class="comment">// set &#x27;fs&#x27; to an empty module on the client to prevent this error on build --&gt; Error: Can&#x27;t resolve &#x27;fs&#x27;</span></span><br><span class="line">      config.<span class="property">node</span> = &#123;</span><br><span class="line">        <span class="attr">fs</span>: <span class="string">&quot;empty&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Webpack-5-version"><a href="#Webpack-5-version" class="headerlink" title="Webpack 5 version"></a>Webpack 5 version</h2><p>To resolve the error with Webpack 5, you need to tell webpack not to resolve the module on the client-side (!isServer).</p><p>Update your <code>next.config.js</code> with the following:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: <span class="function">(<span class="params">config, &#123; isServer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isServer) &#123;</span><br><span class="line">      <span class="comment">// don&#x27;t resolve &#x27;fs&#x27; module on the client to prevent this error on build --&gt; Error: Can&#x27;t resolve &#x27;fs&#x27;</span></span><br><span class="line">      config.<span class="property">resolve</span>.<span class="property">fallback</span> = &#123;</span><br><span class="line">        <span class="attr">fs</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Webpack-4-version&quot;&gt;&lt;a href=&quot;#Webpack-4-version&quot; class=&quot;headerlink&quot; title=&quot;Webpack 4 version&quot;&gt;&lt;/a&gt;Webpack 4 version&lt;/h2&gt;&lt;p&gt;To resolve</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="Next.js" scheme="https://blog.justforlxz.com/tags/Next-js/"/>
    
    <category term="Web" scheme="https://blog.justforlxz.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Kitty configuration for macOS</title>
    <link href="https://blog.justforlxz.com/2023/04/17/Kitty-configuration-for-macOS/"/>
    <id>https://blog.justforlxz.com/2023/04/17/Kitty-configuration-for-macOS/</id>
    <published>2023-04-17T08:39:51.000Z</published>
    <updated>2024-04-15T05:09:54.915Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been using Kitty for a couple of days. I use it because there is a plugin for nvim that can seamlessly switch focus with kitty, so I don’t need to repeat the settings, I like it very much.</p><p>After a period of use. I have completed part of the configuration, and now I want to share it.</p><p>I use different folders for related functions. Such as themes, tabs, windows, and shortcuts.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lxz @ lxzMacBook-Pro <span class="keyword">in</span> ~/.dot/kitty/.config/kitty on git:master o [16:38:58]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── kitty.conf</span><br><span class="line">├── kitty.d</span><br><span class="line">│   ├── init</span><br><span class="line">│   │   └── init.conf</span><br><span class="line">│   ├── keybind</span><br><span class="line">│   │   ├── init.conf</span><br><span class="line">│   │   ├── nvim.conf</span><br><span class="line">│   │   ├── tab.conf</span><br><span class="line">│   │   └── window.conf</span><br><span class="line">│   ├── session</span><br><span class="line">│   │   └── init.conf</span><br><span class="line">│   └── theme</span><br><span class="line">│       ├── background.conf</span><br><span class="line">│       ├── color.conf</span><br><span class="line">│       ├── font.conf</span><br><span class="line">│       ├── tabbar.conf</span><br><span class="line">│       └── window.conf</span><br><span class="line">└── session.conf</span><br><span class="line"></span><br><span class="line">6 directories, 13 files</span><br></pre></td></tr></table></figure><h2 id="Some-screenshot"><a href="#Some-screenshot" class="headerlink" title="Some screenshot"></a>Some screenshot</h2><h3 id="session-look-at-the-lower-left-corner"><a href="#session-look-at-the-lower-left-corner" class="headerlink" title="session (look at the lower left corner)"></a>session (look at the lower left corner)</h3><img src="/2023/04/17/Kitty-configuration-for-macOS/2023-04-17-17.52.14.png" class="" title="2023-04-17-17.52.14.png"><img src="/2023/04/17/Kitty-configuration-for-macOS/2023-04-17-17.59.50.png" class="" title="2023-04-17-17.59.50.png"><h3 id="multi-splits"><a href="#multi-splits" class="headerlink" title="multi splits"></a>multi splits</h3><img src="/2023/04/17/Kitty-configuration-for-macOS/2023-04-17-17.57.06.png" class="" title="2023-04-17-17.57.06.png"><h2 id="Base-settings"><a href="#Base-settings" class="headerlink" title="Base settings"></a>Base settings</h2><p>In kitty.conf, I just set to load configuration files in other directories.</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">globinclude kitty.d/**/*.conf</span><br></pre></td></tr></table></figure><p>I won’t show the configuration after splitting, just give a hint according to the function.</p><h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><p>In init.conf, I set some default variables.</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">term xterm-256color</span><br><span class="line">shell_integration enabled</span><br><span class="line">allow_hyperlinks yes</span><br><span class="line">editor nvim</span><br></pre></td></tr></table></figure><h2 id="Theme-settings"><a href="#Theme-settings" class="headerlink" title="Theme settings"></a>Theme settings</h2><h3 id="Tabs-settings"><a href="#Tabs-settings" class="headerlink" title="Tabs settings"></a>Tabs settings</h3><p>In tabs settings, I like <code>powerline</code> style.</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tab_bar_style powerline</span><br></pre></td></tr></table></figure><h3 id="Windows-settings"><a href="#Windows-settings" class="headerlink" title="Windows settings"></a>Windows settings</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">window_border_width 0.5pt</span><br><span class="line"></span><br><span class="line">window_resize_step_cells 2</span><br><span class="line">window_resize_step_lines 2</span><br><span class="line"></span><br><span class="line">initial_window_width  640</span><br><span class="line">initial_window_height 400</span><br><span class="line"></span><br><span class="line">draw_minimal_borders yes</span><br><span class="line"></span><br><span class="line">inactive_text_alpha 0.7</span><br><span class="line"></span><br><span class="line">hide_window_decorations no</span><br><span class="line"></span><br><span class="line">macos_titlebar_color background</span><br><span class="line">macos_thicken_font 0.75</span><br><span class="line"></span><br><span class="line">active_border_color none</span><br><span class="line"></span><br><span class="line"># default layout is vertical splits only</span><br><span class="line">enabled_layouts splits</span><br><span class="line"></span><br><span class="line">enable_audio_bell no</span><br></pre></td></tr></table></figure><h3 id="Fonts-settings"><a href="#Fonts-settings" class="headerlink" title="Fonts settings"></a>Fonts settings</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">font_family FiraCode Nerd Font Mono Retina</span><br><span class="line">font_size 16.0</span><br></pre></td></tr></table></figure><h3 id="Color-settings"><a href="#Color-settings" class="headerlink" title="Color settings"></a>Color settings</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Dark One Nuanced by ariasuni, https://store.kde.org/p/1225908</span><br><span class="line"># Imported from KDE .colorscheme format by thematdev, https://thematdev.org</span><br><span class="line"># For migrating your schemes from Konsole format see</span><br><span class="line"># https://git.thematdev.org/thematdev/konsole-scheme-migration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># importing Background</span><br><span class="line">background #282c34</span><br><span class="line"># importing BackgroundFaint</span><br><span class="line"># importing BackgroundIntense</span><br><span class="line"># importing Color0</span><br><span class="line">color0 #3f4451</span><br><span class="line"># importing Color0Faint</span><br><span class="line">color16 #282c34</span><br><span class="line"># importing Color0Intense</span><br><span class="line">color8 #4f5666</span><br><span class="line"># importing Color1</span><br><span class="line">color1 #e06c75</span><br><span class="line"># importing Color1Faint</span><br><span class="line">color17 #c25d66</span><br><span class="line"># importing Color1Intense</span><br><span class="line">color9 #ff7b86</span><br><span class="line"># importing Color2</span><br><span class="line">color2 #98c379</span><br><span class="line"># importing Color2Faint</span><br><span class="line">color18 #82a566</span><br><span class="line"># importing Color2Intense</span><br><span class="line">color10 #b1e18b</span><br><span class="line"># importing Color3</span><br><span class="line">color3 #d19a66</span><br><span class="line"># importing Color3Faint</span><br><span class="line">color19 #b38257</span><br><span class="line"># importing Color3Intense</span><br><span class="line">color11 #efb074</span><br><span class="line"># importing Color4</span><br><span class="line">color4 #61afef</span><br><span class="line"># importing Color4Faint</span><br><span class="line">color20 #5499d1</span><br><span class="line"># importing Color4Intense</span><br><span class="line">color12 #67cdff</span><br><span class="line"># importing Color5</span><br><span class="line">color5 #c678dd</span><br><span class="line"># importing Color5Faint</span><br><span class="line">color21 #a966bd</span><br><span class="line"># importing Color5Intense</span><br><span class="line">color13 #e48bff</span><br><span class="line"># importing Color6</span><br><span class="line">color6 #56b6c2</span><br><span class="line"># importing Color6Faint</span><br><span class="line">color22 #44919a</span><br><span class="line"># importing Color6Intense</span><br><span class="line">color14 #63d4e0</span><br><span class="line"># importing Color7</span><br><span class="line">color7 #e6e6e6</span><br><span class="line"># importing Color7Faint</span><br><span class="line">color23 #c8c8c8</span><br><span class="line"># importing Color7Intense</span><br><span class="line">color15 #ffffff</span><br><span class="line"># importing Foreground</span><br><span class="line">foreground #abb2bf</span><br><span class="line"># importing ForegroundFaint</span><br><span class="line"># importing ForegroundIntense</span><br><span class="line"># importing General</span><br></pre></td></tr></table></figure><h2 id="Shortcuts-settings"><a href="#Shortcuts-settings" class="headerlink" title="Shortcuts settings"></a>Shortcuts settings</h2><h3 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># clear the terminal screen</span><br><span class="line">map cmd+k combine : clear_terminal scrollback active : send_text normal,application \x0c</span><br><span class="line"></span><br><span class="line"># jump to beginning and end of word</span><br><span class="line">map alt+left send_text all \x1b\x62</span><br><span class="line">map alt+right send_text all \x1b\x66</span><br><span class="line"></span><br><span class="line"># jump to beginning and end of line</span><br><span class="line">map cmd+left send_text all \x01</span><br><span class="line">map cmd+right send_text all \x05</span><br><span class="line"></span><br><span class="line"># Map cmd + &lt;num&gt; to corresponding tabs</span><br><span class="line">map cmd+1 goto_tab 1</span><br><span class="line">map cmd+2 goto_tab 2</span><br><span class="line">map cmd+3 goto_tab 3</span><br><span class="line">map cmd+4 goto_tab 4</span><br><span class="line">map cmd+5 goto_tab 5</span><br><span class="line">map cmd+6 goto_tab 6</span><br><span class="line">map cmd+7 goto_tab 7</span><br><span class="line">map cmd+8 goto_tab 8</span><br><span class="line">map cmd+9 goto_tab 9</span><br><span class="line"></span><br><span class="line"># changing font sizes</span><br><span class="line">map cmd+equal    change_font_size all +2.0</span><br><span class="line">map cmd+minus    change_font_size all -2.0</span><br><span class="line">map cmd+0        change_font_size all 0</span><br><span class="line"></span><br><span class="line">map cmd+c        copy_to_clipboard</span><br><span class="line">map cmd+v        paste_from_clipboard</span><br></pre></td></tr></table></figure><h3 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">map alt+1 goto_tab 1</span><br><span class="line">map alt+2 goto_tab 2</span><br><span class="line">map alt+3 goto_tab 3</span><br><span class="line">map alt+4 goto_tab 4</span><br><span class="line">map alt+5 goto_tab 5</span><br><span class="line">map alt+6 goto_tab 6</span><br><span class="line">map alt+7 goto_tab 7</span><br><span class="line">map alt+8 goto_tab 8</span><br><span class="line">map alt+9 goto_tab 9</span><br><span class="line">map alt+0 goto_tab 0</span><br><span class="line"></span><br><span class="line"># open new tab with cmd+t</span><br><span class="line">map cmd+t new_tab</span><br><span class="line"></span><br><span class="line"># switch between next and previous splits</span><br><span class="line">map cmd+]        next_window</span><br><span class="line">map cmd+[        previous_window</span><br></pre></td></tr></table></figure><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># open new split (window) with cmd+d retaining the cwd</span><br><span class="line">map cmd+w close_window</span><br><span class="line">map cmd+shif+n new_os_window</span><br><span class="line">map cmd+d launch --location=hsplit --cwd=current</span><br><span class="line">map cmd+shift+d launch --location=vsplit --cwd=current</span><br></pre></td></tr></table></figure><h3 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a>Neovim</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">map ctrl+j kitten pass_keys.py neighboring_window bottom ctrl+j &quot;^.* - nvim$&quot;</span><br><span class="line">map ctrl+k kitten pass_keys.py neighboring_window top    ctrl+k &quot;^.* - nvim$&quot;</span><br><span class="line">map ctrl+h kitten pass_keys.py neighboring_window left   ctrl+h &quot;^.* - nvim$&quot;</span><br><span class="line">map ctrl+l kitten pass_keys.py neighboring_window right  ctrl+l &quot;^.* - nvim$&quot;</span><br><span class="line"></span><br><span class="line"># the 3 here is the resize amount, adjust as needed</span><br><span class="line">map alt+j kitten pass_keys.py relative_resize down  3 alt+j &quot;^.* - nvim$&quot;</span><br><span class="line">map alt+k kitten pass_keys.py relative_resize up    3 alt+k &quot;^.* - nvim$&quot;</span><br><span class="line">map alt+h kitten pass_keys.py relative_resize left  3 alt+h &quot;^.* - nvim$&quot;</span><br><span class="line">map alt+l kitten pass_keys.py relative_resize right 3 alt+l &quot;^.* - nvim$&quot;</span><br></pre></td></tr></table></figure><p>Moving in shell and nvim.</p><img src="/2023/04/17/Kitty-configuration-for-macOS/nvim-integration.gif" class="" title="nvim-integration.gif"><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Kitty supports session management, I added some default sessions, and opened session sockets for nvim.</p><p>The session.conf at the root is the location configuration of the session.</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">new_tab home</span><br><span class="line">layout splits</span><br><span class="line">cd ~</span><br><span class="line">launch zsh</span><br><span class="line">focus</span><br><span class="line"></span><br><span class="line">new_tab work</span><br><span class="line">cd ~/Develop/linuxdeepin/</span><br><span class="line">launch zsh</span><br><span class="line"></span><br><span class="line">new_tab nvim</span><br><span class="line">cd ~/.config/nvim</span><br><span class="line">launch zsh</span><br></pre></td></tr></table></figure><h3 id="Init-2"><a href="#Init-2" class="headerlink" title="Init"></a>Init</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">startup_session session.conf</span><br><span class="line"></span><br><span class="line"># Other unix systems:</span><br><span class="line">allow_remote_control yes</span><br><span class="line">listen_on unix:/tmp/.kitty</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’ve been using Kitty for a couple of days. I use it because there is a plugin for nvim that can seamlessly switch focus with kitty, so I</summary>
      
    
    
    
    <category term="development tools" scheme="https://blog.justforlxz.com/categories/development-tools/"/>
    
    
    <category term="Kitty" scheme="https://blog.justforlxz.com/tags/Kitty/"/>
    
  </entry>
  
  <entry>
    <title>How to solve parallels desktop linux usb problem</title>
    <link href="https://blog.justforlxz.com/2023/04/11/How-to-solve-parallels-desktop-linux-usb-problem/"/>
    <id>https://blog.justforlxz.com/2023/04/11/How-to-solve-parallels-desktop-linux-usb-problem/</id>
    <published>2023-04-11T04:59:39.000Z</published>
    <updated>2024-04-15T05:09:54.914Z</updated>
    
    <content type="html"><![CDATA[<p>I am runing a linux virtual machine macos using parallels desktop. One day when I booted normally, I got a usb error and couldn’t use the keyboard and mouse in virtual machine.</p><p>An error messages like this is output on the screen.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usb 3-1: can&#x27;t set config #1, error -62</span><br><span class="line">xhci_hcd Error while assigning device slot ID: Command Aborted.</span><br><span class="line">xhci_hcd Max number of devices this xHCI host supports is 32.</span><br><span class="line">usb usb3-port2: couldn&#x27;t allocate usb_device</span><br></pre></td></tr></table></figure><img src="/2023/04/11/How-to-solve-parallels-desktop-linux-usb-problem/tg_image_2922023940.jpeg" class="" title="error.jpeg"><p>Finally I found a solution on the parallels desktop forum.</p><ol><li>Start your virtual machine.</li><li>Press e to edit the grub menu during the boot phase, passing a new parameter to the kernel.</li><li>Append <code>xhci_hcd.quirks=0x40</code> after quiet</li><li>F10 booting the kernel</li><li>After entering the system, open the terminal and edit the <code>/etc/default/grub</code> file</li><li>Replace that line with the following line:</li></ol><blockquote><p>GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet xhci_hcd.quirks&#x3D;0x40”</p></blockquote><ol start="7"><li>Next, execute the following command:</li></ol><blockquote><p>sudo update-grub</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I am runing a linux virtual machine macos using parallels desktop. One day when I booted normally, I got a usb error and couldn’t use the</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="parallels desktop" scheme="https://blog.justforlxz.com/tags/parallels-desktop/"/>
    
  </entry>
  
  <entry>
    <title>How to remove all Terminating pods</title>
    <link href="https://blog.justforlxz.com/2023/03/15/How-to-remove-all-Terminating-pods/"/>
    <id>https://blog.justforlxz.com/2023/03/15/How-to-remove-all-Terminating-pods/</id>
    <published>2023-03-15T06:47:59.000Z</published>
    <updated>2024-04-15T05:09:54.914Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes all pods of k8s will be in Terminating state, use this command to clean up all pods.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods --all-namespaces | grep Terminating | while read line; do</span><br><span class="line">  pod_name=$(echo $line | awk &#x27;&#123;print $2&#125;&#x27; ) \</span><br><span class="line">  name_space=$(echo $line | awk &#x27;&#123;print $1&#125;&#x27; ); \</span><br><span class="line">  kubectl delete pods $pod_name -n $name_space --grace-period=0 --force</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes all pods of k8s will be in Terminating state, use this command to clean up all pods.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="k8s" scheme="https://blog.justforlxz.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>solved duplicate hostname or contents</title>
    <link href="https://blog.justforlxz.com/2023/02/01/solved-duplicate-hostname-or-contents/"/>
    <id>https://blog.justforlxz.com/2023/02/01/solved-duplicate-hostname-or-contents/</id>
    <published>2023-02-01T06:48:21.000Z</published>
    <updated>2024-04-15T05:09:55.028Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/01/solved-duplicate-hostname-or-contents/tg_image_1176326230.jpeg" class=""><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Feb 01 05:40:37 fv-az406-375 k3s[5352]: time=&quot;2023-02-01T05:40:37Z&quot; level=info msg=&quot;Waiting to retrieve agent configuration; server is not ready: Node password rejected, duplicate hostname or contents of &#x27;/etc/rancher/node/password&#x27; may not match server node-passwd entry, try enabling a unique node name with the --with-node-id flag&quot;</span><br></pre></td></tr></table></figure><p>When you join a cluster, you are reminded that it already exists, but the same node does not exist in the cluster.</p><p>you can do this.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system delete secrets &lt;node name&gt;.node-password.k3s</span><br></pre></td></tr></table></figure><p>example:</p><p>first, we list all node to check, if the node exists, we should not continue the operation, we need to modify the name of the node that is joining the cluster to avoid conflicts with existing ones.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">rpi4                    Ready    control-plane,master   2d3h   v1.25.6+k3s1</span><br></pre></td></tr></table></figure><p>Now the homenas-vm node does not exist. But the logs tell us that the cluster already has the password, it doesn’t match the current one.</p><p>Then we need to manually delete the old password in the cluster and let the new node join.</p><p>you can use this command to show all secrets, the node password in here.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get -n kube-system secrets</span><br></pre></td></tr></table></figure><p>then you will see all secrets.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                                      TYPE                 DATA   AGE</span><br><span class="line">company-laptop.node-password.k3s          Opaque               1      2d1h</span><br><span class="line">company-pc.node-password.k3s              Opaque               1      2d2h</span><br><span class="line">homenas-vm.node-password.k3s              Opaque               1      50m</span><br><span class="line">k3s-serving                               kubernetes.io/tls    2      2d3h</span><br><span class="line">rpi4.node-password.k3s                    Opaque               1      2d3h</span><br><span class="line">sh.helm.release.v1.traefik-crd.v1         helm.sh/release.v1   1      2d3h</span><br><span class="line">sh.helm.release.v1.traefik.v1             helm.sh/release.v1   1      2d3h</span><br></pre></td></tr></table></figure><p>if the homenas-vm is invalid, we need to delete it manually.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system delete secrets homenas-vm.node-password.k3s</span><br></pre></td></tr></table></figure><p>it’s done!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2023/02/01/solved-duplicate-hostname-or-contents/tg_image_1176326230.jpeg&quot; class=&quot;&quot;&gt;

&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
  </entry>
  
  <entry>
    <title>how to use nvim dap to debug cpp</title>
    <link href="https://blog.justforlxz.com/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/"/>
    <id>https://blog.justforlxz.com/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/</id>
    <published>2022-12-08T02:16:45.000Z</published>
    <updated>2024-04-15T05:09:54.994Z</updated>
    
    <content type="html"><![CDATA[<p>在之前我已经分享过了一份简单的 nvim 配置，它已经实现了编程所需的智能提示，语法高亮，代码跳转等功能，今天我打算整一下 nvim 的调试框架 dap。</p><p>dap 是一个框架，客户端负责在 nvim 上显示各种调试信息，比如显示断点、调用栈、对象内存信息等，服务端则提供客户端所需的功能，服务端通常是一个调试器，或者是调试器包装。</p><p>本篇会用到 Mason 这个插件去安装 dap 的服务端，本篇不会展开 Mason，将来有机会详细说一下。</p><p>首先先看几张正常工作的图:</p><center><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3574429301.jpeg" class=""><p>运行界面</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3358891712.jpeg" class=""><p>查看变量信息</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3913027219.jpeg" class=""><p>快捷键</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_1568131740.jpeg" class="" title="call stacks"><p>函数调用栈</p></center><h2 id="安装-dap"><a href="#安装-dap" class="headerlink" title="安装 dap"></a>安装 dap</h2><p>在 Mason 的安装列表中添加上 codelldb，codelldb 是 vscode 用的调试服务端，负责给 vscode 提供调试信息，有了这个后端，我们就可以方便的实现和 vscode 相同的调试功能。</p><h2 id="配置-dap"><a href="#配置-dap" class="headerlink" title="配置 dap"></a>配置 dap</h2><p>在 plugins 目录下新建 <code>_dap.lua</code> 文件。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="string">&quot;mfussenegger/nvim-dap&quot;</span>,</span><br><span class="line">  opt = <span class="literal">true</span>,</span><br><span class="line">  <span class="built_in">module</span> = &#123; <span class="string">&quot;dap&quot;</span> &#125;,</span><br><span class="line">  requires = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;theHamsta/nvim-dap-virtual-text&quot;</span>,</span><br><span class="line">      <span class="built_in">module</span> = &#123; <span class="string">&quot;nvim-dap-virtual-text&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;rcarriga/nvim-dap-ui&quot;</span>,</span><br><span class="line">      <span class="built_in">module</span> = &#123; <span class="string">&quot;dapui&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;nvim-telescope/telescope-dap.nvim&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;jbyuki/one-small-step-for-vimkind&quot;</span>,</span><br><span class="line">      <span class="built_in">module</span> = <span class="string">&quot;osv&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;config.dap&quot;</span>).setup()</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  disable = <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有些人会在 packer 里用 use 安装，把 return 改成 use 就可以了。</p></blockquote><p>packer 的代码已经写好了，现在写 config 函数，在我的例子中，我把文件放在了 <code>lua/config/dap/</code> 目录下，因为要配置不同的语言，这样会方便管理一些。</p><p>首先要先在 dap 目录下新建一个 init.lua，这里是模块入口，初始化的工作从这里开始。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure_exts</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure_debuggers</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.setup</span><span class="params">()</span></span></span><br><span class="line">configure() <span class="comment">-- Configuration</span></span><br><span class="line">configure_exts() <span class="comment">-- Extensions</span></span><br><span class="line">configure_debuggers() <span class="comment">-- Debugger</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">configure_debuggers()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> M</span><br></pre></td></tr></table></figure><p>在 <code>_dap.lua</code> 中调用了 <code>require(&quot;config.dap&quot;).setup()</code>，这个 setup 函数就是 <code>config/dap/init.lua</code> 中的 <code>M.setup()</code> 函数。</p><p>目前只是写了一个壳子，现在让我们正式配置它吧。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>在 nvim 中进行调试，界面显然还是在终端里的，所以我们要使用快捷键进行一些操作，比如标记断点、单步进入、跳出等。</p><p>在 <code>config/dap/keymaps.lua</code> 中进行快捷键的配置。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> whichkey = <span class="built_in">require</span> <span class="string">&quot;which-key&quot;</span></span><br><span class="line"><span class="comment">-- local legendary = require &quot;legendary&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- local function keymap(lhs, rhs, desc)</span></span><br><span class="line"><span class="comment">--   vim.keymap.set(&quot;n&quot;, lhs, rhs, &#123; silent = true, desc = desc &#125;)</span></span><br><span class="line"><span class="comment">-- end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.setup</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> keymap = &#123;</span><br><span class="line">    d = &#123;</span><br><span class="line">      name = <span class="string">&quot;DAP&quot;</span>,</span><br><span class="line">      R = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.run_to_cursor()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Run to Cursor&quot;</span> &#125;,</span><br><span class="line">      E = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.eval(vim.fn.input &#x27;[Expression] &gt; &#x27;)&lt;cr&gt;&quot;</span>, <span class="string">&quot;Evaluate Input&quot;</span> &#125;,</span><br><span class="line">      C = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.set_breakpoint(vim.fn.input &#x27;[Condition] &gt; &#x27;)&lt;cr&gt;&quot;</span>, <span class="string">&quot;Conditional Breakpoint&quot;</span> &#125;,</span><br><span class="line">      U = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.toggle()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Toggle UI&quot;</span> &#125;,</span><br><span class="line">      b = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_back()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Step Back&quot;</span> &#125;,</span><br><span class="line">      c = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.continue()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Continue&quot;</span> &#125;,</span><br><span class="line">      d = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.disconnect()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Disconnect&quot;</span> &#125;,</span><br><span class="line">      e = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.eval()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Evaluate&quot;</span> &#125;,</span><br><span class="line">      g = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.session()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Get Session&quot;</span> &#125;,</span><br><span class="line">      h = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap.ui.widgets&#x27;.hover()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Hover Variables&quot;</span> &#125;,</span><br><span class="line">      S = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap.ui.widgets&#x27;.scopes()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Scopes&quot;</span> &#125;,</span><br><span class="line">      i = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_into()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Step Into&quot;</span> &#125;,</span><br><span class="line">      o = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_over()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Step Over&quot;</span> &#125;,</span><br><span class="line">      p = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.pause.toggle()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Pause&quot;</span> &#125;,</span><br><span class="line">      q = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.close()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Quit&quot;</span> &#125;,</span><br><span class="line">      r = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.repl.toggle()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Toggle Repl&quot;</span> &#125;,</span><br><span class="line">      s = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.continue()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Start&quot;</span> &#125;,</span><br><span class="line">      t = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.toggle_breakpoint()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Toggle Breakpoint&quot;</span> &#125;,</span><br><span class="line">      x = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.terminate()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Terminate&quot;</span> &#125;,</span><br><span class="line">      u = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_out()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Step Out&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">local</span> opts = &#123;</span><br><span class="line">    mode = <span class="string">&quot;n&quot;</span>,</span><br><span class="line">    prefix = <span class="string">&quot;&lt;leader&gt;&quot;</span>,</span><br><span class="line">    buffer = <span class="literal">nil</span>,</span><br><span class="line">    silent = <span class="literal">true</span>,</span><br><span class="line">    noremap = <span class="literal">true</span>,</span><br><span class="line">    nowait = <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  whichkey.register(keymap, opts)</span><br><span class="line">  <span class="comment">--- require(&quot;legendary.integrations.which-key&quot;).bind_whichkey(keymap, opts, false)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> keymap_v = &#123;</span><br><span class="line">    d = &#123;</span><br><span class="line">      name = <span class="string">&quot;Debug&quot;</span>,</span><br><span class="line">      e = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.eval()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Evaluate&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  opts = &#123;</span><br><span class="line">    mode = <span class="string">&quot;v&quot;</span>,</span><br><span class="line">    prefix = <span class="string">&quot;&lt;leader&gt;&quot;</span>,</span><br><span class="line">    buffer = <span class="literal">nil</span>,</span><br><span class="line">    silent = <span class="literal">true</span>,</span><br><span class="line">    noremap = <span class="literal">true</span>,</span><br><span class="line">    nowait = <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  whichkey.register(keymap_v, opts)</span><br><span class="line">  <span class="comment">--- require(&quot;legendary.integrations.which-key&quot;).bind_whichkey(keymap_v, opts, false)</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> M</span><br></pre></td></tr></table></figure><p>在这里我将快捷键绑定在了 <code>&lt;leader&gt; d</code> 上面。</p><p>现在返回到 <code>init.lua</code> 中，在 <code>setup</code> 函数中调用 keymaps。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.setup</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;config.dap.keymaps&quot;</span>).setup() <span class="comment">-- Keymaps</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="dapui"><a href="#dapui" class="headerlink" title="dapui"></a>dapui</h3><p>dapui 是一个美化 dap 界面的插件，通常大家都会配置的吧！</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure_exts</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;nvim-dap-virtual-text&quot;</span>).setup(&#123;</span><br><span class="line">commented = <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> dap, dapui = <span class="built_in">require</span>(<span class="string">&quot;dap&quot;</span>), <span class="built_in">require</span>(<span class="string">&quot;dapui&quot;</span>)</span><br><span class="line">dapui.setup(&#123;</span><br><span class="line">expand_lines = <span class="literal">true</span>,</span><br><span class="line">icons = &#123; expanded = <span class="string">&quot;&quot;</span>, collapsed = <span class="string">&quot;&quot;</span>, circular = <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">mappings = &#123;</span><br><span class="line"><span class="comment">-- Use a table to apply multiple mappings</span></span><br><span class="line">expand = &#123; <span class="string">&quot;&lt;CR&gt;&quot;</span>, <span class="string">&quot;&lt;2-LeftMouse&gt;&quot;</span> &#125;,</span><br><span class="line"><span class="built_in">open</span> = <span class="string">&quot;o&quot;</span>,</span><br><span class="line"><span class="built_in">remove</span> = <span class="string">&quot;d&quot;</span>,</span><br><span class="line">edit = <span class="string">&quot;e&quot;</span>,</span><br><span class="line">repl = <span class="string">&quot;r&quot;</span>,</span><br><span class="line">toggle = <span class="string">&quot;t&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">layouts = &#123;</span><br><span class="line">&#123;</span><br><span class="line">elements = &#123;</span><br><span class="line">&#123; id = <span class="string">&quot;scopes&quot;</span>, size = <span class="number">0.33</span> &#125;,</span><br><span class="line">&#123; id = <span class="string">&quot;breakpoints&quot;</span>, size = <span class="number">0.17</span> &#125;,</span><br><span class="line">&#123; id = <span class="string">&quot;stacks&quot;</span>, size = <span class="number">0.25</span> &#125;,</span><br><span class="line">&#123; id = <span class="string">&quot;watches&quot;</span>, size = <span class="number">0.25</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">size = <span class="number">0.33</span>,</span><br><span class="line">position = <span class="string">&quot;right&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">elements = &#123;</span><br><span class="line">&#123; id = <span class="string">&quot;repl&quot;</span>, size = <span class="number">0.45</span> &#125;,</span><br><span class="line">&#123; id = <span class="string">&quot;console&quot;</span>, size = <span class="number">0.55</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">size = <span class="number">0.27</span>,</span><br><span class="line">position = <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">floating = &#123;</span><br><span class="line">max_height = <span class="number">0.9</span>,</span><br><span class="line">max_width = <span class="number">0.5</span>, <span class="comment">-- Floats will be treated as percentage of your screen.</span></span><br><span class="line">border = vim.g.border_chars, <span class="comment">-- Border style. Can be &#x27;single&#x27;, &#x27;double&#x27; or &#x27;rounded&#x27;</span></span><br><span class="line">mappings = &#123;</span><br><span class="line"><span class="built_in">close</span> = &#123; <span class="string">&quot;q&quot;</span>, <span class="string">&quot;&lt;Esc&gt;&quot;</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;) <span class="comment">-- use default</span></span><br><span class="line">dap.listeners.after.event_initialized[<span class="string">&quot;dapui_config&quot;</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">dapui.<span class="built_in">open</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">dap.listeners.before.event_terminated[<span class="string">&quot;dapui_config&quot;</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">dapui.<span class="built_in">close</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">dap.listeners.before.event_exited[<span class="string">&quot;dapui_config&quot;</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">dapui.<span class="built_in">close</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>配置基本上大家都没差多少，说不定都是从一个人的配置里搬运的。</p><center><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_1681120408.jpeg" class="" title="evaluate"></center><h3 id="配置-icon"><a href="#配置-icon" class="headerlink" title="配置 icon"></a>配置 icon</h3><p>我还修改了几个默认的 icon，在 configure 函数里。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> dap_breakpoint = &#123;</span><br><span class="line">breakpoint = &#123;</span><br><span class="line">text = <span class="string">&quot;&quot;</span>,</span><br><span class="line">texthl = <span class="string">&quot;LspDiagnosticsSignError&quot;</span>,</span><br><span class="line">linehl = <span class="string">&quot;&quot;</span>,</span><br><span class="line">numhl = <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">rejected = &#123;</span><br><span class="line">text = <span class="string">&quot;&quot;</span>,</span><br><span class="line">texthl = <span class="string">&quot;LspDiagnosticsSignHint&quot;</span>,</span><br><span class="line">linehl = <span class="string">&quot;&quot;</span>,</span><br><span class="line">numhl = <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">stopped = &#123;</span><br><span class="line">text = <span class="string">&quot;&quot;</span>,</span><br><span class="line">texthl = <span class="string">&quot;LspDiagnosticsSignInformation&quot;</span>,</span><br><span class="line">linehl = <span class="string">&quot;DiagnosticUnderlineInfo&quot;</span>,</span><br><span class="line">numhl = <span class="string">&quot;LspDiagnosticsSignInformation&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vim.fn.sign_define(<span class="string">&quot;DapBreakpoint&quot;</span>, dap_breakpoint.breakpoint)</span><br><span class="line">vim.fn.sign_define(<span class="string">&quot;DapStopped&quot;</span>, dap_breakpoint.stopped)</span><br><span class="line">vim.fn.sign_define(<span class="string">&quot;DapBreakpointRejected&quot;</span>, dap_breakpoint.rejected)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><center><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3049280764.jpeg" class="" title="breakpoint"><p>断点标记</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3325119905.jpeg" class="" title="breakpoint"><p>单步停止</p></center><h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><p>现在还差一个客户端的函数没有写，在这里只是为了调用针对不同语言设置的服务端，内容也非常的简单。</p><p>新建一个 <code>config/dap/cpp.lua</code>，在里面配置 c++ 相关的参数就行了，需要注意的是，codelldb 可以调试 c、c++、rust 等语言，就不会再拆分成更精细的文件了。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.setup</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">-- local dap_install = require &quot;dap-install&quot;</span></span><br><span class="line"><span class="comment">-- dap_install.config(&quot;codelldb&quot;, &#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> dap = <span class="built_in">require</span>(<span class="string">&quot;dap&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> install_root_dir = vim.fn.stdpath(<span class="string">&quot;data&quot;</span>) .. <span class="string">&quot;/mason&quot;</span></span><br><span class="line"><span class="keyword">local</span> extension_path = install_root_dir .. <span class="string">&quot;/packages/codelldb/extension/&quot;</span></span><br><span class="line"><span class="keyword">local</span> codelldb_path = extension_path .. <span class="string">&quot;adapter/codelldb&quot;</span></span><br><span class="line"></span><br><span class="line">dap.adapters.codelldb = &#123;</span><br><span class="line"><span class="built_in">type</span> = <span class="string">&quot;server&quot;</span>,</span><br><span class="line">port = <span class="string">&quot;$&#123;port&#125;&quot;</span>,</span><br><span class="line">executable = &#123;</span><br><span class="line">command = codelldb_path,</span><br><span class="line">args = &#123; <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;$&#123;port&#125;&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">-- On windows you may have to uncomment this:</span></span><br><span class="line"><span class="comment">-- detached = false,</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">dap.configurations.cpp = &#123;</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="string">&quot;Launch file&quot;</span>,</span><br><span class="line"><span class="built_in">type</span> = <span class="string">&quot;codelldb&quot;</span>,</span><br><span class="line">request = <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">program = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">return</span> vim.fn.<span class="built_in">input</span>(<span class="string">&quot;Path to executable: &quot;</span>, vim.fn.getcwd() .. <span class="string">&quot;/&quot;</span>, <span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line">cwd = <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">stopOnEntry = <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dap.configurations.c = dap.configurations.cpp</span><br><span class="line">dap.configurations.rust = dap.configurations.cpp</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> M</span><br></pre></td></tr></table></figure><blockquote><p>Mason 在这里终于露面了，但是我们只是看到查找了 Mason 安装 codelldb 的路径而已。</p></blockquote><p>配置的内容是固定的，设置一下执行文件的路径和参数，设置一下调试这个语言所需的启动参数，这里默认给了一个输入可执行文件路径启动调试的简单方法。</p><h2 id="配置-launch-json"><a href="#配置-launch-json" class="headerlink" title="配置 launch.json"></a>配置 launch.json</h2><p>上面的内容就已经足够调试 c++ 程序了，但是 dap 还支持 vscode 的 launch.json，将启动配置作为固定模板填入启动调试的列表，并且在 launch.json 中我们还可以控制程序的环境变量，启动参数等，会比较方便一些。</p><p>dap 支持这个只需要在 setup 函数加上一行代码就足够了。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;dap.ext.vscode&quot;</span>).load_launchjs(<span class="literal">nil</span>, &#123; codelldb = &#123; <span class="string">&quot;c&quot;</span>, <span class="string">&quot;cpp&quot;</span>, <span class="string">&quot;rust&quot;</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><p>这句话的意思是 launch.json 中的类型是 codelldb 时，使用 c、cpp、rust 的调试配置，而上面我们配置了 codelldb 的参数 和 cpp 的参数，而且还将 cpp 的配置复制给了 c 和 rust。</p><p>但是有一个需要注意的地方，launch.json 现在环境变量换成了 environment 字段，并且结构也发生了变化，dap 目前只支持 env 字段，我在考虑贡献一个 pr 做一个自动转换。</p><p>这里给一个 launch.json 的例子：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(codelldb) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;codelldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./build/bin/deepin-kwin_x11&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;--replace&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;DISPLAY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;:0&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;PATH&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/bin:$PATH&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;XDG_CURRENT_DESKTOP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Deepin&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;QT_PLUGIN_PATH&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;QT_LOGGING_RULES&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kwin_*.debug=true&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，这里的 codelldb 其实是一个标识字符串，vscode 默认提供的 type 是 cppgdb，我们也可以改成相同的字段。</p><p>想要在线查看最终文件内容，可以看下面几个链接：</p><p><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/config/dap/rust.lua">cpp.lua </a><br><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/config/dap/init.lua">init.lua</a><br><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/config/dap/keymaps.lua">keymaps.lua</a><br><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/plugins/_dap.lua">_dap.lua</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前我已经分享过了一份简单的 nvim 配置，它已经实现了编程所需的智能提示，语法高亮，代码跳转等功能，今天我打算整一下 nvim 的调试框架 dap。&lt;/p&gt;
&lt;p&gt;dap 是一个框架，客户端负责在 nvim 上显示各种调试信息，比如显示断点、调用栈、对象内存信息等，服</summary>
      
    
    
    
    <category term="neovim" scheme="https://blog.justforlxz.com/categories/neovim/"/>
    
    
    <category term="neovim" scheme="https://blog.justforlxz.com/tags/neovim/"/>
    
    <category term="dap" scheme="https://blog.justforlxz.com/tags/dap/"/>
    
  </entry>
  
  <entry>
    <title>1. init project</title>
    <link href="https://blog.justforlxz.com/2022/11/07/photo-1-init-project/"/>
    <id>https://blog.justforlxz.com/2022/11/07/photo-1-init-project/</id>
    <published>2022-11-07T08:38:31.000Z</published>
    <updated>2024-04-15T05:09:55.027Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个系列的文章，用来记录我的相册应用的开发过程，内容可能会比较枯燥，还请读者见谅。</p><p>我使用  NextCloud 作为我的存储中心，但是当我备份相册的时候，我感到了莫名的蛋疼，实在是太难用了，不支持相册，不支持标记，不支持各种视图，所以我决定自己写一个新的客户端，只提供相册功能。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>我用的是 iPhone 12，理所当然我会选择 iOS 客户端开发，在我面前有这么几种方案可以选择：</p><ol><li>object-c</li><li>swift</li><li>swiftui</li><li>flutter</li><li>qml</li><li>react-native</li></ol><blockquote><p>本着三短一长选最长的原则，我计划使用 react-native 作为项目的技术方案。</p></blockquote><p>object-c 已经很老旧了，我只是想业余时间做一个应用满足自己的需求，排除。</p><p>swfit 和 swiftui 是苹果目前主推的，特别是 swfitui，用来写界面真的很方便，但是我不想学新的，排除。</p><p>flutter 是谷歌在推的一个框架，从我的研发角度来看，flutter 和 qml 没有什么本质区别，都是自己实现了绘制，在此基础上完善控件等高级功能，既然我是一个 Qt 开发者，我肯定不会选择再去学一套类似的技术了，排除。</p><p>qml，Qt 目前主推的界面开发框架，采用 JSON like 的方式描述界面，并且可以运行一部分的标准 js 语法，配合 C++ 在 native 端提供本地功能，Qt 自己是一套平台一样的框架，用起来很爽，但是我不想写 qml，排除。</p><p>最终就只能用 react native 了，我个人想学一下前端开发，使用相关的技术栈对我来说性价比最高，选择。</p><blockquote><p><del>为了写 js 而找了这么多借口（</del></p></blockquote><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><p>确定了技术方案，就需要考虑实现哪些功能了，作为一个相册 App，它最基本的功能肯定是 <del>能启动</del>,嗯，看图。</p><ul><li>浏览服务器和本地的图片</li><li>上传和下载图片</li><li>相册分类</li><li>标记信息</li><li>查看文件详情</li></ul><p>一开始先不考虑那么多，做一个基本的 TimeLine 样式就可以了。</p><h2 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h2><p>功能也已经确定了，先实现一个 TimeLine 的功能，那么就要确定界面的样式了，我个人比较欣赏 Google Photo 的设计，打算就按像素复制了。</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>现在可以考虑怎么写代码了，首先初始化一下项目。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx react-native init photos --template react-native-template-typescript</span><br></pre></td></tr></table></figure><p>初始化一个带有 typescript 的 react native 项目，然后在 vscode 里安装一些 react 和 react native 相关的插件就可以了。</p><p>删掉初始化项目的 App.tsx 和相关的文件，新建 src 目录和 App.tsx 文件，开始写新的界面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个系列的文章，用来记录我的相册应用的开发过程，内容可能会比较枯燥，还请读者见谅。&lt;/p&gt;
&lt;p&gt;我使用  NextCloud 作为我的存储中心，但是当我备份相册的时候，我感到了莫名的蛋疼，实在是太难用了，不支持相册，不支持标记，不支持各种视图，所以我决定自己写一个新的</summary>
      
    
    
    
    <category term="photos 开发笔记" scheme="https://blog.justforlxz.com/categories/photos-%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="typescript" scheme="https://blog.justforlxz.com/tags/typescript/"/>
    
    <category term="react" scheme="https://blog.justforlxz.com/tags/react/"/>
    
    <category term="react native" scheme="https://blog.justforlxz.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>docker-buildx-multi-arch-images</title>
    <link href="https://blog.justforlxz.com/2022/08/25/docker-buildx-multi-arch-images/"/>
    <id>https://blog.justforlxz.com/2022/08/25/docker-buildx-multi-arch-images/</id>
    <published>2022-08-25T05:32:03.000Z</published>
    <updated>2024-04-15T05:09:54.959Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在搞 github 的 ci，为了方便公司的开发快速修复其他发行版上的构建问题，我研究了一下 distrobox 启动容器来作为本地验证环境的可行性，结果发现还不错，就顺手做了几个镜像。</p><p>v23 的仓库是支持多个架构的，想着顺手做一份 v23 的镜像提交到 docker hub 上，结果遇到了一点多平台的坑。</p><h2 id="docker-buildx"><a href="#docker-buildx" class="headerlink" title="docker buildx"></a>docker buildx</h2><p>Docker Buildx是一个CLI插件，它扩展了Docker命令，完全支持 Moby BuildKit 构建工具包提供的特性。它提供了与docker 构建相同的用户体验，提供了许多新特性，比如创建作用域的构建器实例和同时针对多个节点构建。</p><p>Moby BuildKit 构建工具提供了一些诸如跨平台启动的功能。</p><h2 id="首次尝试"><a href="#首次尝试" class="headerlink" title="首次尝试"></a>首次尝试</h2><p>最开始我是打算使用 docker import 直接把 base.tgz 导入进去的，docker import 支持 –platform 参数指定架构，我就跑了两遍，生成了 linux&#x2F;arm64 和 linux&#x2F;amd64 两个架构的。</p><p>结果我看到 docker images 里只有一份，而且用 docker image inspect beige:base 查看发现里面的 Architecuture 只有 amd64，推送到 docker hub 后也只有一份，这显然是不正确的。</p><h2 id="使用-dockerfile"><a href="#使用-dockerfile" class="headerlink" title="使用 dockerfile"></a>使用 dockerfile</h2><p>经过我一番的搜索，我看到了一种使用 docker buildx 配合 dockerfile 的多架构构建方式，然后我就快速的写了一份 dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> --platform=$TARGETPLATFORM scratch</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> TARGETARCH</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> beige-<span class="variable">$&#123;TARGETARCH&#125;</span>.tgz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;sh&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>dockerfile 需要注意的是，变量需要先使用 ARG 声明，在 build 阶段，遇到变量会产生一次分叉，这样就会在不同的架构里继续运行了（这也是坑我很长的时间，最终我将文件名修改为方便获取的方式……）。</p><p>接下来需要创建一份构建环境。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker buildx create --use</span><br></pre></td></tr></table></figure><p>这条命令可以创建一个基本环境，可以使用 <code>docker buildx ls</code> 查看当前的环境，可以看到默认就支持的有很多种架构。</p><p>然后使用 build 命令开始构建：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker buildx build --platform=linux/amd64,linux/arm64 -t linuxdeepin/beige:base --push .</span><br></pre></td></tr></table></figure><p>简单说一下参数，platform 参数负责控制本次 build 传入架构，t 参数设置 tag 名称，这里我用了 –push 直接推送上去了，它默认用的 docker-compose 处理，构建产物不会出现在 docker images 里，所以就直接推送了。</p><p>现在我就有一份 v23 的 docker base 可用了，很开心。</p><p>点击前往：<br><a href="https://hub.docker.com/repository/docker/linuxdeepin/beige">https://hub.docker.com/repository/docker/linuxdeepin/beige</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近一直在搞 github 的 ci，为了方便公司的开发快速修复其他发行版上的构建问题，我研究了一下 distrobox 启动容器来作为本地验证环境的可行性，结果发现还不错，就顺手做了几个镜像。&lt;/p&gt;
&lt;p&gt;v23 的仓库是支持多个架构的，想着顺手做一份 v23 的镜像提</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.justforlxz.com/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://blog.justforlxz.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>meet unity shader</title>
    <link href="https://blog.justforlxz.com/2022/07/21/meet-unity-shader/"/>
    <id>https://blog.justforlxz.com/2022/07/21/meet-unity-shader/</id>
    <published>2022-07-21T13:44:25.000Z</published>
    <updated>2024-04-15T05:09:54.896Z</updated>
    
    <content type="html"><![CDATA[<p>在我还在上高中的时候，我就开始学了一些 Unity，也尝试制作了一些简单的游戏，那时候更多是出于好玩，后来沉迷 Linux，就逐渐淡忘了游戏开发。</p><p>机缘巧合，我现在入手了一台 M1 mbp，接触到了 Apple 家的 Metal，又快速过了一下 Vulkan，也尝试做了一些入门级的项目，更幻想制作一个游戏引擎，所以最近有时间我就在看 Games104 的课程，补充一下相关知识，计划跟完 Games104，就去看一下闫令琪老师的 Games101，主攻一下计算机图形学。</p><p>有天中午我无意间看到了 onevcat 大佬写的一篇介绍 unity shader 的文章，并且还分享了一篇使用 shader 模拟物体表面的雪的效果，让我也想跟着做一个。</p><img src="/2022/07/21/meet-unity-shader/p1.png" class="" title="效果展示"><h2 id="Unity-shader"><a href="#Unity-shader" class="headerlink" title="Unity shader"></a>Unity shader</h2><p>Unity shader 并不像平常我们见的 OpenGL、Vulkan 和 Metal 的 shader 文件一样，Unity shader 更像是配置文件，它使用特定的结构语法保存各种信息，并和 Unity Editor 中其他对象交互。</p><p>一个基础的 Unity shader 的结构是这样的:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Custom/myshader&quot; &#123;</span><br><span class="line">    Properties &#123;&#125;</span><br><span class="line">    SubShader &#123;&#125;</span><br><span class="line">    Fallback &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，一个标准的 Unity shader 拥有四个部分，一个 Shader 的命名，一个属性对象，一个 SubShader 对象，一个 Fallback 字符串。</p><p>属性对象是 Unity Editor 和 shader 沟通的桥梁，我们可以在 Properties 中声明输入，从外部接受参数。</p><p>SubShader 对象是可以多个重复的，当第一个 SubShader 对象中的代码无法在当前的 GPU 中运行时，Unity 会切换到下一个 SubShader 对象。我们可以在同一份 Shader 文件中对不同的 GPU 实现不同的支持。</p><p>Fallback 字符串则是如果 SubShader 都无法运行时，采用的最终的渲染方法。</p><p>一个简单的理解就是，从上到下，画面效果是依次降低的。</p><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><h2 id="SubShader"><a href="#SubShader" class="headerlink" title="SubShader"></a>SubShader</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SubShader &#123;</span><br><span class="line">    Tags &#123;&#125;</span><br><span class="line">    Pass &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pass &#123;</span><br><span class="line">    CGPROGRAM</span><br><span class="line">    ENDCG</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CGPROGRAM"><a href="#CGPROGRAM" class="headerlink" title="CGPROGRAM"></a>CGPROGRAM</h2><p>&#x2F;&#x2F; TODO：CGPROGRAM 是发送到 GPU 运行的程序，也是一般概念中的 shader。</p><h2 id="自定义光照"><a href="#自定义光照" class="headerlink" title="自定义光照"></a>自定义光照</h2><h2 id="法线"><a href="#法线" class="headerlink" title="法线"></a>法线</h2><h2 id="Shader-代码"><a href="#Shader-代码" class="headerlink" title="Shader 代码"></a>Shader 代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;_Object2World&#x27; with &#x27;unity_ObjectToWorld&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;Custom/SnowShader&quot; &#123;</span><br><span class="line">    Properties &#123;</span><br><span class="line">        _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Bump (&quot;Bump&quot;, 2D) = &quot;bump&quot; &#123;&#125;</span><br><span class="line">        _Snow (&quot;Snow Level&quot;, Range(0,1) ) = 0</span><br><span class="line">        _SnowColor (&quot;Snow Color&quot;, Color) = (1.0,1.0,1.0,1.0)</span><br><span class="line">        _SnowDirection (&quot;Snow Direction&quot;, Vector) = (0,1,0)</span><br><span class="line">        _SnowDepth (&quot;Snow Depth&quot;, Range(0,0.3)) = 0.1</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader &#123;</span><br><span class="line">        Tags &#123; &quot;RenderType&quot;=&quot;Opaque&quot; &#125;</span><br><span class="line">        LOD 200</span><br><span class="line"></span><br><span class="line">        CGPROGRAM</span><br><span class="line">        #pragma surface surf CustomDiffuse vertex:vert</span><br><span class="line"></span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line">        sampler2D _Bump;</span><br><span class="line">        float _Snow;</span><br><span class="line">        float4 _SnowColor;</span><br><span class="line">        float4 _SnowDirection;</span><br><span class="line">        float _SnowDepth;</span><br><span class="line"></span><br><span class="line">        struct Input &#123;</span><br><span class="line">            float2 uv_MainTex;</span><br><span class="line">            float2 uv_Bump;</span><br><span class="line">            float3 worldNormal;</span><br><span class="line">            INTERNAL_DATA</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        inline float4 LightingCustomDiffuse (SurfaceOutput s, fixed3 lightDir, fixed atten) &#123;</span><br><span class="line">            float difLight = dot (s.Normal, lightDir);</span><br><span class="line">            float hLambert = difLight * 0.5 + 0.5;</span><br><span class="line">            float4 col;</span><br><span class="line">            col.rgb = s.Albedo * _LightColor0.rgb * (hLambert * atten * 2);</span><br><span class="line">            col.a = s.Alpha;</span><br><span class="line">            return col;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void vert (inout appdata_full v) &#123;</span><br><span class="line">            float4 sn = mul(transpose(unity_ObjectToWorld) , _SnowDirection);</span><br><span class="line">            if(dot(v.normal, sn.xyz) &gt;= lerp(1,-1, (_Snow * 2) / 3)) &#123;</span><br><span class="line">                v.vertex.xyz += (sn.xyz + v.normal) * _SnowDepth * _Snow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void surf (Input IN, inout SurfaceOutput o) &#123;</span><br><span class="line">            half4 c = tex2D (_MainTex, IN.uv_MainTex);</span><br><span class="line"></span><br><span class="line">            o.Normal = UnpackNormal(tex2D(_Bump, IN.uv_Bump));</span><br><span class="line"></span><br><span class="line">            if (dot(WorldNormalVector(IN, o.Normal), _SnowDirection.xyz) &gt; lerp(1,-1,_Snow)) &#123;</span><br><span class="line">                o.Albedo = _SnowColor.rgb;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                o.Albedo = c.rgb;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            o.Alpha = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>相关文章</strong><br><a href="https://onevcat.com/2013/07/shader-tutorial-1/">https://onevcat.com/2013/07/shader-tutorial-1/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在我还在上高中的时候，我就开始学了一些 Unity，也尝试制作了一些简单的游戏，那时候更多是出于好玩，后来沉迷 Linux，就逐渐淡忘了游戏开发。&lt;/p&gt;
&lt;p&gt;机缘巧合，我现在入手了一台 M1 mbp，接触到了 Apple 家的 Metal，又快速过了一下 Vulkan，</summary>
      
    
    
    
    <category term="Game" scheme="https://blog.justforlxz.com/categories/Game/"/>
    
    
    <category term="Game" scheme="https://blog.justforlxz.com/tags/Game/"/>
    
    <category term="Unity" scheme="https://blog.justforlxz.com/tags/Unity/"/>
    
    <category term="Shader" scheme="https://blog.justforlxz.com/tags/Shader/"/>
    
  </entry>
  
</feed>
