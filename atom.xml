<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小竹&#39;s blog</title>
  
  <subtitle>永远不要停止思考</subtitle>
  <link href="https://blog.justforlxz.com/atom.xml" rel="self"/>
  
  <link href="https://blog.justforlxz.com/"/>
  <updated>2024-04-15T05:11:47.503Z</updated>
  <id>https://blog.justforlxz.com/</id>
  
  <author>
    <name>小竹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Add macvlan net</title>
    <link href="https://blog.justforlxz.com/2024/04/15/Add-macvlan-net/"/>
    <id>https://blog.justforlxz.com/2024/04/15/Add-macvlan-net/</id>
    <published>2024-04-15T05:10:41.000Z</published>
    <updated>2024-04-15T05:11:47.503Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Script to enable macvlan on boot</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStartPre=-/usr/bin/bash -c &#x27;mount --make-rshared /&#x27; # for k3s in lxc (optional)</span><br><span class="line">ExecStartPre=-/usr/bin/bash -c &#x27;/usr/bin/ip link del mac0&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip link set eth0 up&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip link add link eth0 mac0 type macvlan mode bridge&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip addr add 192.168.1.11/24 dev mac0&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip link set mac0 up&#x27;</span><br><span class="line">ExecStartPre=-/usr/bin/bash -c &#x27;/usr/bin/ip route add 192.168.1.0/24 dev mac0&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip route add default via 192.168.1.1&#x27;</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;/usr/bin/ip route add 198.18.0.0/16 via 192.168.1.1&#x27; # for fake ip (optional)</span><br><span class="line">ExecStartPre=/usr/bin/bash -c &#x27;ip rule add to 192.168.1.0/24 priority 2500 lookup main&#x27;</span><br><span class="line">ExecStart=/usr/bin/bash -c &#x27;/usr/bin/echo done&#x27;</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Unit]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Description=Script t</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://blog.justforlxz.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>solved run k8s in wsl2</title>
    <link href="https://blog.justforlxz.com/2024/03/01/solved-run-k8s-in-wsl2/"/>
    <id>https://blog.justforlxz.com/2024/03/01/solved-run-k8s-in-wsl2/</id>
    <published>2024-03-01T03:30:11.000Z</published>
    <updated>2024-04-15T05:09:55.032Z</updated>
    
    <content type="html"><![CDATA[<p>When I use wsl2 join my k8s cluster, I have some problem. It can be start, but pod is not runing.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Normal   Scheduled               95m                default-scheduler  Successfully assigned longhorn-system/longhorn-csi-plugin-bvnmk to company-wsl-1</span><br><span class="line">Warning  FailedCreatePodSandBox  4m                 kubelet            Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox &quot;a13a250444d61af44800db054a047059c66202ab9d8a47732748c7c4d380131b&quot;: plugin type=&quot;multus&quot; failed (add): Multus: [longhorn-system/longhorn-csi-plugin-bvnmk/2203cd9f-608d-42b1-82b9-dad186a9b5cb]: error waiting for pod: Get &quot;https://[10.43.0.1]:443/api/v1/namespaces/longhorn-system/pods/longhorn-csi-plugin-bvnmk?timeout=1m0s&quot;: dial tcp 10.43.0.1:443: i/o timeout</span><br><span class="line">Normal   SandboxChanged          2m (x3 over 8m1s)  kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class="line">Warning  FailedCreatePodSandBox  2m                 kubelet            Failed to create pod sandbox: rpc error: code = Unknown desc = failed to reserve sandbox name &quot;longhorn-csi-plugin-bvnmk_longhorn-system_2203cd9f-608d-42b1-82b9-dad186a9b5cb_2&quot;: name &quot;longhorn-csi-plugin-bvnmk_longhorn-system_2203cd9f-608d-42b1-82b9-dad186a9b5cb_2&quot; is reserved for &quot;a13a250444d61af44800db054a047059c66202ab9d8a47732748c7c4d380131b&quot;</span><br></pre></td></tr></table></figure><p>Looks like network problem, but when I open journal in wsl2, I see iptables-restore can not runing.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]: E0301 11:26:59.262472     223 proxier.go:1521] &quot;Failed to execute iptables-restore&quot; err=&lt;</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:         exit status 2: iptables-restore v1.8.7 (nf_tables): Couldn&#x27;t load match `recent&#x27;:No such file or directory</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:         Error occurred at line: 145</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:         Try `iptables-restore -h&#x27; or &#x27;iptables-restore --help&#x27; for more information.</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]:  &gt;</span><br><span class="line">Mar 01 11:26:59 DESKTOP-TH5NA7O k3s[223]: I0301 11:26:59.262516     223 proxier.go:801] &quot;Sync failed&quot; retryingTime=&quot;30s&quot;</span><br></pre></td></tr></table></figure><p>Now let’s fix!</p><p>build before install depends.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install -y git build-essential flex bison libssl-dev libelf-dev bc dwarves python3</span><br></pre></td></tr></table></figure><ol><li>clone wsl2 kernel code.</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/microsoft/WSL2-Linux-Kernel.git &amp;&amp; cd WSL2-Linux-Kernel</span><br></pre></td></tr></table></figure><ol start="2"><li>enable xt_recent.</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/# CONFIG_NETFILTER_XT_MATCH_RECENT is not set/CONFIG_NETFILTER_XT_MATCH_RECENT=y/&#x27; Microsoft/config-wsl</span><br></pre></td></tr></table></figure><ol start="3"><li>build kernel.</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -j2 KCONFIG_CONFIG=Microsoft/config-wsl</span><br></pre></td></tr></table></figure><ol start="4"><li>cp kernel to some path.</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp arch/x86/boot/bzImage /mnt/c/Users/&lt;your-user-name&gt;/wsl-kernel</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">5. Create a .wslconfig file in C:\Users\&lt;your-user-name&gt;\</span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">[wsl2]</span><br><span class="line">kernel=C:\\Users\\&lt;your-user-name&gt;\\wsl-kernel</span><br></pre></td></tr></table></figure><ol start="6"><li>reboot wsl</li></ol><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br><span class="line"></span><br><span class="line">wsl</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When I use wsl2 join my k8s cluster, I have some problem. It can be start, but pod is not runing.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://blog.justforlxz.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>solved Could not find a declaration file for module &#39;vuex&#39;.</title>
    <link href="https://blog.justforlxz.com/2023/09/11/solved-Could-not-find-a-declaration-file-for-module-vuex/"/>
    <id>https://blog.justforlxz.com/2023/09/11/solved-Could-not-find-a-declaration-file-for-module-vuex/</id>
    <published>2023-09-11T02:14:56.000Z</published>
    <updated>2024-04-15T05:09:55.028Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I was rewriting the email client using Vue and encountered an error when using Vuex to process data.</p><p><code>Could not find a declaration file for module &#39;vuex&#39;.</code></p><p>Vuex does not have <code>@types/vuex</code>, so it can only be solved by adding d.ts manually.</p><p>Add vuex.d.ts in the project directory and add the following content:</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vuex&quot;</span> &#123;</span><br><span class="line">   <span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;vuex/types/index.d.ts&quot;</span>;</span><br><span class="line">   <span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;vuex/types/helpers.d.ts&quot;</span>;</span><br><span class="line">   <span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;vuex/types/logger.d.ts&quot;</span>;</span><br><span class="line">   <span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;vuex/types/vue.d.ts&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently I was rewriting the email client using Vue and encountered an error when using Vuex to process data.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Could not find</summary>
      
    
    
    
    <category term="Vue" scheme="https://blog.justforlxz.com/categories/Vue/"/>
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Vue/Solution/"/>
    
    
    <category term="vuex" scheme="https://blog.justforlxz.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>solved react-native error: SDK iphoneos cannot be located</title>
    <link href="https://blog.justforlxz.com/2023/06/29/solved-react-native-error-SDK-iphoneos-cannot-be-located/"/>
    <id>https://blog.justforlxz.com/2023/06/29/solved-react-native-error-SDK-iphoneos-cannot-be-located/</id>
    <published>2023-06-29T01:40:13.000Z</published>
    <updated>2024-04-15T05:09:55.032Z</updated>
    
    <content type="html"><![CDATA[<p>While initializing the project, react native has the following error.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">patching file config.sub</span><br><span class="line">checking <span class="keyword">for</span> a BSD-compatible install... /usr/bin/install -c</span><br><span class="line">checking whether build environment is sane... <span class="built_in">yes</span></span><br><span class="line">checking <span class="keyword">for</span> arm-apple-darwin-strip... no</span><br><span class="line">checking <span class="keyword">for</span> strip... strip</span><br><span class="line">checking <span class="keyword">for</span> a thread-safe <span class="built_in">mkdir</span> -p... ./install-sh -c -d</span><br><span class="line">checking <span class="keyword">for</span> gawk... no</span><br><span class="line">checking <span class="keyword">for</span> mawk... no</span><br><span class="line">checking <span class="keyword">for</span> nawk... no</span><br><span class="line">checking <span class="keyword">for</span> awk... awk</span><br><span class="line">checking whether make sets $(MAKE)... <span class="built_in">yes</span></span><br><span class="line">checking whether make supports nested variables... <span class="built_in">yes</span></span><br><span class="line">checking <span class="keyword">for</span> arm-apple-darwin-gcc... /Library/Developer/CommandLineTools/usr/bin/cc -<span class="built_in">arch</span> arm64 -isysroot</span><br><span class="line">checking whether the C compiler works... no</span><br><span class="line">xcrun: error: SDK <span class="string">&quot;iphoneos&quot;</span> cannot be located</span><br><span class="line">xcrun: error: SDK <span class="string">&quot;iphoneos&quot;</span> cannot be located</span><br><span class="line">xcrun: error: SDK <span class="string">&quot;iphoneos&quot;</span> cannot be located</span><br><span class="line">xcrun: error: unable to lookup item <span class="string">&#x27;Path&#x27;</span> <span class="keyword">in</span> SDK <span class="string">&#x27;iphoneos&#x27;</span></span><br><span class="line">/Users/lxz/Library/Caches/CocoaPods/Pods/External/glog/2263bd123499e5b93b5efe24871be317-04b94/missing: Unknown `--is-lightweight<span class="string">&#x27; option</span></span><br><span class="line"><span class="string">Try `/Users/lxz/Library/Caches/CocoaPods/Pods/External/glog/2263bd123499e5b93b5efe24871be317-04b94/missing --help&#x27;</span> <span class="keyword">for</span> more information</span><br><span class="line">configure: WARNING: <span class="string">&#x27;missing&#x27;</span> script is too old or missing</span><br><span class="line">configure: error: <span class="keyword">in</span> `/Users/lxz/Library/Caches/CocoaPods/Pods/External/glog/2263bd123499e5b93b5efe24871be317-04b94<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">configure: error: C compiler cannot create executables</span></span><br><span class="line"><span class="string">See `config.log&#x27;</span> <span class="keyword">for</span> more details</span><br><span class="line">✖ Installing CocoaPods dependencies (this may take a few minutes)</span><br><span class="line">error Looks like your iOS environment is not properly <span class="built_in">set</span>. Please go to https://reactnative.dev/docs/environment-setup?os=macos&amp;platform=android and follow the React Native CLI QuickStart guide <span class="keyword">for</span> macOS and iOS.</span><br><span class="line">info Run CLI with --verbose flag <span class="keyword">for</span> more details.</span><br></pre></td></tr></table></figure><p>Notice in the error that &#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F; is being used, which should use the path of xcode.</p><p>works for me:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> xcode-select --switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure><p>switch to project directory.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ios &amp;&amp; npx pod install &amp;&amp; <span class="built_in">cd</span> .. &amp;&amp; react-native run-ios</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;While initializing the project, react native has the following error.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="ReactNative" scheme="https://blog.justforlxz.com/categories/ReactNative/"/>
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/ReactNative/Solution/"/>
    
    
    <category term="reactnative" scheme="https://blog.justforlxz.com/tags/reactnative/"/>
    
    <category term="ios" scheme="https://blog.justforlxz.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>开发一个 KWin 特效插件</title>
    <link href="https://blog.justforlxz.com/2023/06/25/How-to-develop-a-kwin-special-effects-plugin/"/>
    <id>https://blog.justforlxz.com/2023/06/25/How-to-develop-a-kwin-special-effects-plugin/</id>
    <published>2023-06-25T05:25:55.000Z</published>
    <updated>2024-04-15T05:09:54.914Z</updated>
    
    <content type="html"><![CDATA[<p>KWin 是 KDE 开发的窗口管理器，提供了非常丰富的插件，可以对功能进行大量的定制。</p><p>本篇文章是对窗口特效插件的开发介绍。</p><h2 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h2><h3 id="插件定义"><a href="#插件定义" class="headerlink" title="插件定义"></a>插件定义</h3><p>KWin 的插件通常可以使用一些宏辅助生成代码，例如使用 <code>KPluginFactory</code> 进行插件的定义，内容是用来生成插件的入口类。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EffectPluginFactory_iid <span class="string">&quot;org.kde.kwin.EffectPluginFactory&quot;</span> KWIN_PLUGIN_VERSION_STRING</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_PLUGIN_FACTORY_NAME KPLUGINFACTORY_PLUGIN_CLASS_INTERNAL_NAME</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_EFFECT_FACTORY_SUPPORTED_ENABLED(className, jsonFile, supported, enabled ) \</span></span><br><span class="line"><span class="meta">    class KWIN_PLUGIN_FACTORY_NAME : public KWin::EffectPluginFactory \</span></span><br><span class="line"><span class="meta">    &#123; \</span></span><br><span class="line"><span class="meta">        Q_OBJECT \</span></span><br><span class="line"><span class="meta">        Q_PLUGIN_METADATA(IID EffectPluginFactory_iid FILE jsonFile) \</span></span><br><span class="line"><span class="meta">        Q_INTERFACES(KPluginFactory) \</span></span><br><span class="line"><span class="meta">    public: \</span></span><br><span class="line"><span class="meta">        explicit KWIN_PLUGIN_FACTORY_NAME() &#123;&#125; \</span></span><br><span class="line"><span class="meta">        ~KWIN_PLUGIN_FACTORY_NAME() &#123;&#125; \</span></span><br><span class="line"><span class="meta">        bool isSupported() const override &#123; \</span></span><br><span class="line"><span class="meta">            supported \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">        bool enabledByDefault() const override &#123; \</span></span><br><span class="line"><span class="meta">            enabled \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">        KWin::Effect *createEffect() const override &#123; \</span></span><br><span class="line"><span class="meta">            return new className(); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_EFFECT_FACTORY_ENABLED(className, jsonFile, enabled ) \</span></span><br><span class="line"><span class="meta">    KWIN_EFFECT_FACTORY_SUPPORTED_ENABLED(className, jsonFile, return true;, enabled )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_EFFECT_FACTORY_SUPPORTED(className, jsonFile, supported ) \</span></span><br><span class="line"><span class="meta">    KWIN_EFFECT_FACTORY_SUPPORTED_ENABLED(className, jsonFile, supported, return true; )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KWIN_EFFECT_FACTORY(className, jsonFile ) \</span></span><br><span class="line"><span class="meta">    KWIN_EFFECT_FACTORY_SUPPORTED_ENABLED(className, jsonFile, return true;, return true; )</span></span><br></pre></td></tr></table></figure><p>大部分宏只是为了方便结构修改，我们只需要使用 <code>K_PLUGIN_FACTORY</code> 进行插件定义即可。</p><p>假设我们开发了一个插件，名字叫 demo，我们只需要在 main.cpp 中使用 <code>KWIN_EFFECT_FACTORY_SUPPORTED</code> 定义</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">KWIN_EFFECT_FACTORY_SUPPORTED</span>(</span><br><span class="line">    Demo,</span><br><span class="line">    <span class="string">&quot;metadata.json&quot;</span>,</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>代码展开后是这样的。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KPLUGINFACTORY_PLUGIN_CLASS_INTERNAL_NAME</span> : <span class="keyword">public</span> KWin::EffectPluginFactory \</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Q_OBJECT</span></span><br><span class="line"><span class="function">    <span class="title">Q_PLUGIN_METADATA</span><span class="params">(IID EffectPluginFactory_iid FILE <span class="string">&quot;metadata.json&quot;</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">Q_INTERFACES</span><span class="params">(KPluginFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span>: \</span></span><br><span class="line"><span class="function">    explicit KPLUGINFACTORY_PLUGIN_CLASS_INTERNAL_NAME() &#123;</span>&#125;</span><br><span class="line">    ~<span class="built_in">KPLUGINFACTORY_PLUGIN_CLASS_INTERNAL_NAME</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSupported</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">enabledByDefault</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">KWin::Effect *<span class="title">createEffect</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Demo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，其实 <code>KWIN_EFFECT_FACTORY_SUPPORTED</code> 只是为我们生成了工厂函数，辅助生成了一些必要的重载。</p><p><code>metadata.json</code> 文件是用来作为插件的描述信息使用的。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;KPlugin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Accessibility&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow clip of window content&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;EnabledByDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scissor&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;License&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GPL&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ScissorWindow&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name[zh_CN]&quot;</span><span class="punctuation">:</span> <span class="string">&quot;窗口圆角&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;org.kde.kwin.effect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabledByDefaultMethod&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="特效插件"><a href="#特效插件" class="headerlink" title="特效插件"></a>特效插件</h3><p>特效插件是一类可以改变窗口画面的插件，例如我们可以在插件里对窗口进行贴图、变形和裁切，在 DDE 中，就使用特效插件完成了圆角裁切和窗口模糊。</p><p>这里使用圆角裁切插件作为例子，首先使用 <code>KWIN_EFFECT_FACTORY_SUPPORTED</code> 宏对插件进行定义， <code>KWIN_EFFECT_FACTORY_SUPPORTED</code> 接受一个 class 作为返回的接口类，它需要继承自 <code>Effect</code>，第二个参数是元信息的 json 文件，第三个参数是返回是否支持，在启用插件时可对当前环境进行判断，例如插件需要使用 <code>OpenGL</code> 对图形进行一些操作，但是当前环境不支持 <code>OpenGL</code>，那么插件就不会启用。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;scissorwindow.h&quot;</span></span><br><span class="line"></span><br><span class="line">namespace KWin</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">KWIN_EFFECT_FACTORY_SUPPORTED(ScissorWindow<span class="punctuation">,</span></span><br><span class="line">                              <span class="string">&quot;metadata.json.stripped&quot;</span><span class="punctuation">,</span></span><br><span class="line">                              return ScissorWindow<span class="punctuation">:</span><span class="punctuation">:</span>supported();)</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="comment">// namespace KWin</span></span><br><span class="line"></span><br><span class="line">#include <span class="string">&quot;main.moc&quot;</span></span><br></pre></td></tr></table></figure><p>在 Effect 类中有几个不同阶段的方法可以重载。</p><ul><li>prePaintScreen<ul><li>设置是否变换窗口或整个屏幕</li><li>更改将要绘制的屏幕区域</li><li>做各种内务处理任务，比如初始化你的效果变量<br>  用于即将到来的绘画过程或更新动画的进度</li></ul></li><li>paintScreen<ul><li>在窗口上画东西（调用后画 effect-&gt;paintScreen())</li><li>绘制多个桌面和&#x2F;或同一桌面的多个副本</li></ul></li><li>postPaintScreen<ul><li>在动画的情况下安排下一次重绘，不应该在这里画任何东西。</li></ul></li><li>prePaintWindow<ul><li>启用或禁用窗口的绘制（例如启用最小化窗口的绘制）</li><li>将窗口设置为半透明</li><li>设置要转换的窗口</li><li>请求将窗口分成多个部分</li></ul></li><li>paintWindow<ul><li>做各种转换</li><li>改变窗口的不透明度</li><li>改变亮度和&#x2F;或饱和度，如果支持的话</li></ul></li><li>postPaintWindow<ul><li>在动画的情况下为单个窗口安排下一次重绘<br>  不应该在这里画任何东西。</li></ul></li><li>paintEffectFrame<ul><li>在绘制 EffectFrame 之前直接调用此方法。</li><li>如果需要绑定shader或者执行，可以实现这个方法帧渲染前的其他操作。</li></ul></li><li>drawWindow<ul><li>可以调用以绘制一个窗口的多个副本（例如缩略图）。</li><li>可以在这里改变窗口的不透明度&#x2F;亮度&#x2F;等，但不能做任何转换。</li><li>在基于 OpenGL 的合成中，框架确保上下文是最新的</li></ul></li></ul><p>在方法名称中可以看出，在场景及窗口绘制的过程中，分别可以在实际绘制的前后分别执行一些动作，圆角插件就是在 <code>drawWindow</code> 函数中，使用 <code>OpenGL</code> 对窗口使用着色器进行窗口裁切，并绘制到屏幕上。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ScissorWindow::drawWindow</span><span class="params">(EffectWindow *w, <span class="type">int</span> mask, <span class="type">const</span> QRegion&amp; region, WindowPaintData &amp;data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;<span class="built_in">isDesktop</span>() || <span class="built_in">isMaximized</span>(w)) &#123;</span><br><span class="line">        <span class="keyword">return</span> effects-&gt;<span class="built_in">drawWindow</span>(w, mask, region, data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    QPointF cornerRadius;</span><br><span class="line">    <span class="type">const</span> QVariant valueRadius = w-&gt;<span class="built_in">data</span>(WindowRadiusRole);</span><br><span class="line">    <span class="keyword">if</span> (valueRadius.<span class="built_in">isValid</span>()) &#123;</span><br><span class="line">        cornerRadius = w-&gt;<span class="built_in">data</span>(WindowRadiusRole).<span class="built_in">toPointF</span>();</span><br><span class="line">        <span class="type">const</span> qreal xMin&#123; std::<span class="built_in">min</span>(cornerRadius.<span class="built_in">x</span>(), w-&gt;<span class="built_in">width</span>() / <span class="number">2.0</span>) &#125;;</span><br><span class="line">        <span class="type">const</span> qreal yMin&#123; std::<span class="built_in">min</span>(cornerRadius.<span class="built_in">y</span>(), w-&gt;<span class="built_in">height</span>() / <span class="number">2.0</span>) &#125;;</span><br><span class="line">        <span class="type">const</span> qreal minRadius&#123; std::<span class="built_in">min</span>(xMin, yMin) &#125;;</span><br><span class="line">        cornerRadius = <span class="built_in">QPointF</span>(minRadius, minRadius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cornerRadius.<span class="built_in">x</span>() &lt; <span class="number">2</span> &amp;&amp; cornerRadius.<span class="built_in">y</span>() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> effects-&gt;<span class="built_in">drawWindow</span>(w, mask, region, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> QString&amp; key = <span class="built_in">QString</span>(<span class="string">&quot;%1+%2&quot;</span>).<span class="built_in">arg</span>(cornerRadius.<span class="built_in">toPoint</span>().<span class="built_in">x</span>()).<span class="built_in">arg</span>(cornerRadius.<span class="built_in">toPoint</span>().<span class="built_in">y</span>()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (!m_texMaskMap.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line"><span class="function">QImage <span class="title">img</span><span class="params">(QSize(radius.x() * <span class="number">2</span>, radius.y() * <span class="number">2</span>), QImage::Format_RGBA8888)</span></span>;</span><br><span class="line">    img.<span class="built_in">fill</span>(<span class="built_in">QColor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(&amp;img)</span></span>;</span><br><span class="line">    painter.<span class="built_in">setPen</span>(Qt::NoPen);</span><br><span class="line">    painter.<span class="built_in">setBrush</span>(<span class="built_in">QColor</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">    painter.<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);</span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="number">0</span>, <span class="number">0</span>, radius.<span class="built_in">x</span>() * <span class="number">2</span>, radius.<span class="built_in">y</span>() * <span class="number">2</span>);</span><br><span class="line">    painter.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">    m_texMaskMap[key] = <span class="keyword">new</span> <span class="built_in">GLTexture</span>(img.<span class="built_in">copy</span>(<span class="number">0</span>, <span class="number">0</span>, radius.<span class="built_in">x</span>(), radius.<span class="built_in">y</span>()));</span><br><span class="line">    m_texMaskMap[key]-&gt;<span class="built_in">setFilter</span>(GL_LINEAR);</span><br><span class="line">    m_texMaskMap[key]-&gt;<span class="built_in">setWrapMode</span>(GL_CLAMP_TO_EDGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ShaderManager::<span class="built_in">instance</span>()-&gt;<span class="built_in">pushShader</span>(m_filletOptimizeShader);</span><br><span class="line">    m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;typ1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;sampler&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;msk1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;k&quot;</span>, <span class="built_in">QVector2D</span>(w-&gt;<span class="built_in">width</span>() / cornerRadius.<span class="built_in">x</span>(), w-&gt;<span class="built_in">height</span>() / cornerRadius.<span class="built_in">y</span>()));</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;<span class="built_in">hasDecoration</span>()) &#123;</span><br><span class="line">        m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;typ2&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        m_filletOptimizeShader-&gt;<span class="built_in">setUniform</span>(<span class="string">&quot;typ2&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> old_shader = data.shader;</span><br><span class="line">    data.shader = m_filletOptimizeShader;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glActiveTexture</span>(GL_TEXTURE1);</span><br><span class="line">    m_texMaskMap[key]-&gt;<span class="built_in">bind</span>();</span><br><span class="line">    <span class="built_in">glActiveTexture</span>(GL_TEXTURE0);</span><br><span class="line">    effects-&gt;<span class="built_in">drawWindow</span>(w, mask, region, data);</span><br><span class="line">    ShaderManager::<span class="built_in">instance</span>()-&gt;<span class="built_in">popShader</span>();</span><br><span class="line">    data.shader = old_shader;</span><br><span class="line">    <span class="built_in">glActiveTexture</span>(GL_TEXTURE1);</span><br><span class="line">    m_texMaskMap[key]-&gt;<span class="built_in">unbind</span>();</span><br><span class="line">    <span class="built_in">glActiveTexture</span>(GL_TEXTURE0);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果窗口是桌面类型，或者已经最大化了，则无需处理，直接返回 Effect 原本的处理函数。</p><p>之后尝试从窗口属性中取出圆角大小的值，如果没有设置圆角大小，或者值小于2，则无需处理。</p><p>尝试查询缓存，在这里为窗口的四个角构建一份遮罩对象并缓存，使用 <code>OpenGL</code> 将遮罩和着色器进行关联，激活两个材质分别绘制窗口内容和四个角的遮罩，在着色器中完成窗口圆角的半透明效果。</p><p>限于篇幅，本文不展开介绍如何实现圆角插件的全部实现过程，仅挑选关键步骤。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将动态库复制到 <code>/usr/share/kwin/effects/plugins</code> ，并使用 <code>DBus</code> 激活插件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qdbus --literal org.kde.KWin /Effects org.kde.kwin.Effects.loadEffect scissor</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;KWin 是 KDE 开发的窗口管理器，提供了非常丰富的插件，可以对功能进行大量的定制。&lt;/p&gt;
&lt;p&gt;本篇文章是对窗口特效插件的开发介绍。&lt;/p&gt;
&lt;h2 id=&quot;插件开发&quot;&gt;&lt;a href=&quot;#插件开发&quot; class=&quot;headerlink&quot; title=&quot;插件开发&quot;&gt;</summary>
      
    
    
    
    <category term="deepin" scheme="https://blog.justforlxz.com/categories/deepin/"/>
    
    
    <category term="deepin" scheme="https://blog.justforlxz.com/tags/deepin/"/>
    
    <category term="kwin" scheme="https://blog.justforlxz.com/tags/kwin/"/>
    
  </entry>
  
  <entry>
    <title>How to count the cpu usage of a process</title>
    <link href="https://blog.justforlxz.com/2023/05/24/How-to-count-the-cpu-usage-of-a-process/"/>
    <id>https://blog.justforlxz.com/2023/05/24/How-to-count-the-cpu-usage-of-a-process/</id>
    <published>2023-05-24T02:43:04.000Z</published>
    <updated>2024-04-15T05:09:54.913Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes we want to collect the cpu usage of the process, and usually use a script to make simple statistics.</p><p>Under Linux, the cpu time slice of the process can be obtained through the stat provided by procfs.</p><p>Or simply use some commands to get directly.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">FULL_PATH=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$@</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> ; <span class="keyword">do</span></span><br><span class="line">    PID=$(pidof <span class="variable">$&#123;FULL_PATH&#125;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$PID</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span> :: <span class="variable">$FULL_PATH</span>[<span class="variable">$PID</span>] <span class="subst">$(ps -C $&#123;FULL_PATH&#125; -o %cpu | tail -1)</span>%&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> 0.5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes we want to collect the cpu usage of the process, and usually use a script to make simple statistics.&lt;/p&gt;
&lt;p&gt;Under Linux, the cp</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="Linux" scheme="https://blog.justforlxz.com/tags/Linux/"/>
    
    <category term="Bash" scheme="https://blog.justforlxz.com/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>How to Solve the Module not found: Cannot resolve &#39;fs&#39; error in Next.js</title>
    <link href="https://blog.justforlxz.com/2023/04/19/How-to-Solve-the-Module-not-found-Cannot-resolve-fs-error-in-Next-js/"/>
    <id>https://blog.justforlxz.com/2023/04/19/How-to-Solve-the-Module-not-found-Cannot-resolve-fs-error-in-Next-js/</id>
    <published>2023-04-19T05:58:21.000Z</published>
    <updated>2024-04-15T05:09:54.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpack-4-version"><a href="#Webpack-4-version" class="headerlink" title="Webpack 4 version"></a>Webpack 4 version</h2><p>To resolve the error with Webpack 4, you need to tell webpack to set the module to ‘empty’ on the client-side (!isServer).</p><p>This is also a solution when you are working with older Next.js versions.</p><p>The configuration essentially tells Webpack to create an empty module for fs, which effectively suppresses the error.</p><p>Update your <code>next.config.js</code> with the following:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: <span class="function">(<span class="params">config, &#123; isServer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isServer) &#123;</span><br><span class="line">      <span class="comment">// set &#x27;fs&#x27; to an empty module on the client to prevent this error on build --&gt; Error: Can&#x27;t resolve &#x27;fs&#x27;</span></span><br><span class="line">      config.<span class="property">node</span> = &#123;</span><br><span class="line">        <span class="attr">fs</span>: <span class="string">&quot;empty&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Webpack-5-version"><a href="#Webpack-5-version" class="headerlink" title="Webpack 5 version"></a>Webpack 5 version</h2><p>To resolve the error with Webpack 5, you need to tell webpack not to resolve the module on the client-side (!isServer).</p><p>Update your <code>next.config.js</code> with the following:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: <span class="function">(<span class="params">config, &#123; isServer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isServer) &#123;</span><br><span class="line">      <span class="comment">// don&#x27;t resolve &#x27;fs&#x27; module on the client to prevent this error on build --&gt; Error: Can&#x27;t resolve &#x27;fs&#x27;</span></span><br><span class="line">      config.<span class="property">resolve</span>.<span class="property">fallback</span> = &#123;</span><br><span class="line">        <span class="attr">fs</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Webpack-4-version&quot;&gt;&lt;a href=&quot;#Webpack-4-version&quot; class=&quot;headerlink&quot; title=&quot;Webpack 4 version&quot;&gt;&lt;/a&gt;Webpack 4 version&lt;/h2&gt;&lt;p&gt;To resolve</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="Next.js" scheme="https://blog.justforlxz.com/tags/Next-js/"/>
    
    <category term="Web" scheme="https://blog.justforlxz.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Kitty configuration for macOS</title>
    <link href="https://blog.justforlxz.com/2023/04/17/Kitty-configuration-for-macOS/"/>
    <id>https://blog.justforlxz.com/2023/04/17/Kitty-configuration-for-macOS/</id>
    <published>2023-04-17T08:39:51.000Z</published>
    <updated>2024-04-15T05:09:54.915Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been using Kitty for a couple of days. I use it because there is a plugin for nvim that can seamlessly switch focus with kitty, so I don’t need to repeat the settings, I like it very much.</p><p>After a period of use. I have completed part of the configuration, and now I want to share it.</p><p>I use different folders for related functions. Such as themes, tabs, windows, and shortcuts.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lxz @ lxzMacBook-Pro <span class="keyword">in</span> ~/.dot/kitty/.config/kitty on git:master o [16:38:58]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── kitty.conf</span><br><span class="line">├── kitty.d</span><br><span class="line">│   ├── init</span><br><span class="line">│   │   └── init.conf</span><br><span class="line">│   ├── keybind</span><br><span class="line">│   │   ├── init.conf</span><br><span class="line">│   │   ├── nvim.conf</span><br><span class="line">│   │   ├── tab.conf</span><br><span class="line">│   │   └── window.conf</span><br><span class="line">│   ├── session</span><br><span class="line">│   │   └── init.conf</span><br><span class="line">│   └── theme</span><br><span class="line">│       ├── background.conf</span><br><span class="line">│       ├── color.conf</span><br><span class="line">│       ├── font.conf</span><br><span class="line">│       ├── tabbar.conf</span><br><span class="line">│       └── window.conf</span><br><span class="line">└── session.conf</span><br><span class="line"></span><br><span class="line">6 directories, 13 files</span><br></pre></td></tr></table></figure><h2 id="Some-screenshot"><a href="#Some-screenshot" class="headerlink" title="Some screenshot"></a>Some screenshot</h2><h3 id="session-look-at-the-lower-left-corner"><a href="#session-look-at-the-lower-left-corner" class="headerlink" title="session (look at the lower left corner)"></a>session (look at the lower left corner)</h3><img src="/2023/04/17/Kitty-configuration-for-macOS/2023-04-17-17.52.14.png" class="" title="2023-04-17-17.52.14.png"><img src="/2023/04/17/Kitty-configuration-for-macOS/2023-04-17-17.59.50.png" class="" title="2023-04-17-17.59.50.png"><h3 id="multi-splits"><a href="#multi-splits" class="headerlink" title="multi splits"></a>multi splits</h3><img src="/2023/04/17/Kitty-configuration-for-macOS/2023-04-17-17.57.06.png" class="" title="2023-04-17-17.57.06.png"><h2 id="Base-settings"><a href="#Base-settings" class="headerlink" title="Base settings"></a>Base settings</h2><p>In kitty.conf, I just set to load configuration files in other directories.</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">globinclude kitty.d/**/*.conf</span><br></pre></td></tr></table></figure><p>I won’t show the configuration after splitting, just give a hint according to the function.</p><h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><p>In init.conf, I set some default variables.</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">term xterm-256color</span><br><span class="line">shell_integration enabled</span><br><span class="line">allow_hyperlinks yes</span><br><span class="line">editor nvim</span><br></pre></td></tr></table></figure><h2 id="Theme-settings"><a href="#Theme-settings" class="headerlink" title="Theme settings"></a>Theme settings</h2><h3 id="Tabs-settings"><a href="#Tabs-settings" class="headerlink" title="Tabs settings"></a>Tabs settings</h3><p>In tabs settings, I like <code>powerline</code> style.</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tab_bar_style powerline</span><br></pre></td></tr></table></figure><h3 id="Windows-settings"><a href="#Windows-settings" class="headerlink" title="Windows settings"></a>Windows settings</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">window_border_width 0.5pt</span><br><span class="line"></span><br><span class="line">window_resize_step_cells 2</span><br><span class="line">window_resize_step_lines 2</span><br><span class="line"></span><br><span class="line">initial_window_width  640</span><br><span class="line">initial_window_height 400</span><br><span class="line"></span><br><span class="line">draw_minimal_borders yes</span><br><span class="line"></span><br><span class="line">inactive_text_alpha 0.7</span><br><span class="line"></span><br><span class="line">hide_window_decorations no</span><br><span class="line"></span><br><span class="line">macos_titlebar_color background</span><br><span class="line">macos_thicken_font 0.75</span><br><span class="line"></span><br><span class="line">active_border_color none</span><br><span class="line"></span><br><span class="line"># default layout is vertical splits only</span><br><span class="line">enabled_layouts splits</span><br><span class="line"></span><br><span class="line">enable_audio_bell no</span><br></pre></td></tr></table></figure><h3 id="Fonts-settings"><a href="#Fonts-settings" class="headerlink" title="Fonts settings"></a>Fonts settings</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">font_family FiraCode Nerd Font Mono Retina</span><br><span class="line">font_size 16.0</span><br></pre></td></tr></table></figure><h3 id="Color-settings"><a href="#Color-settings" class="headerlink" title="Color settings"></a>Color settings</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Dark One Nuanced by ariasuni, https://store.kde.org/p/1225908</span><br><span class="line"># Imported from KDE .colorscheme format by thematdev, https://thematdev.org</span><br><span class="line"># For migrating your schemes from Konsole format see</span><br><span class="line"># https://git.thematdev.org/thematdev/konsole-scheme-migration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># importing Background</span><br><span class="line">background #282c34</span><br><span class="line"># importing BackgroundFaint</span><br><span class="line"># importing BackgroundIntense</span><br><span class="line"># importing Color0</span><br><span class="line">color0 #3f4451</span><br><span class="line"># importing Color0Faint</span><br><span class="line">color16 #282c34</span><br><span class="line"># importing Color0Intense</span><br><span class="line">color8 #4f5666</span><br><span class="line"># importing Color1</span><br><span class="line">color1 #e06c75</span><br><span class="line"># importing Color1Faint</span><br><span class="line">color17 #c25d66</span><br><span class="line"># importing Color1Intense</span><br><span class="line">color9 #ff7b86</span><br><span class="line"># importing Color2</span><br><span class="line">color2 #98c379</span><br><span class="line"># importing Color2Faint</span><br><span class="line">color18 #82a566</span><br><span class="line"># importing Color2Intense</span><br><span class="line">color10 #b1e18b</span><br><span class="line"># importing Color3</span><br><span class="line">color3 #d19a66</span><br><span class="line"># importing Color3Faint</span><br><span class="line">color19 #b38257</span><br><span class="line"># importing Color3Intense</span><br><span class="line">color11 #efb074</span><br><span class="line"># importing Color4</span><br><span class="line">color4 #61afef</span><br><span class="line"># importing Color4Faint</span><br><span class="line">color20 #5499d1</span><br><span class="line"># importing Color4Intense</span><br><span class="line">color12 #67cdff</span><br><span class="line"># importing Color5</span><br><span class="line">color5 #c678dd</span><br><span class="line"># importing Color5Faint</span><br><span class="line">color21 #a966bd</span><br><span class="line"># importing Color5Intense</span><br><span class="line">color13 #e48bff</span><br><span class="line"># importing Color6</span><br><span class="line">color6 #56b6c2</span><br><span class="line"># importing Color6Faint</span><br><span class="line">color22 #44919a</span><br><span class="line"># importing Color6Intense</span><br><span class="line">color14 #63d4e0</span><br><span class="line"># importing Color7</span><br><span class="line">color7 #e6e6e6</span><br><span class="line"># importing Color7Faint</span><br><span class="line">color23 #c8c8c8</span><br><span class="line"># importing Color7Intense</span><br><span class="line">color15 #ffffff</span><br><span class="line"># importing Foreground</span><br><span class="line">foreground #abb2bf</span><br><span class="line"># importing ForegroundFaint</span><br><span class="line"># importing ForegroundIntense</span><br><span class="line"># importing General</span><br></pre></td></tr></table></figure><h2 id="Shortcuts-settings"><a href="#Shortcuts-settings" class="headerlink" title="Shortcuts settings"></a>Shortcuts settings</h2><h3 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># clear the terminal screen</span><br><span class="line">map cmd+k combine : clear_terminal scrollback active : send_text normal,application \x0c</span><br><span class="line"></span><br><span class="line"># jump to beginning and end of word</span><br><span class="line">map alt+left send_text all \x1b\x62</span><br><span class="line">map alt+right send_text all \x1b\x66</span><br><span class="line"></span><br><span class="line"># jump to beginning and end of line</span><br><span class="line">map cmd+left send_text all \x01</span><br><span class="line">map cmd+right send_text all \x05</span><br><span class="line"></span><br><span class="line"># Map cmd + &lt;num&gt; to corresponding tabs</span><br><span class="line">map cmd+1 goto_tab 1</span><br><span class="line">map cmd+2 goto_tab 2</span><br><span class="line">map cmd+3 goto_tab 3</span><br><span class="line">map cmd+4 goto_tab 4</span><br><span class="line">map cmd+5 goto_tab 5</span><br><span class="line">map cmd+6 goto_tab 6</span><br><span class="line">map cmd+7 goto_tab 7</span><br><span class="line">map cmd+8 goto_tab 8</span><br><span class="line">map cmd+9 goto_tab 9</span><br><span class="line"></span><br><span class="line"># changing font sizes</span><br><span class="line">map cmd+equal    change_font_size all +2.0</span><br><span class="line">map cmd+minus    change_font_size all -2.0</span><br><span class="line">map cmd+0        change_font_size all 0</span><br><span class="line"></span><br><span class="line">map cmd+c        copy_to_clipboard</span><br><span class="line">map cmd+v        paste_from_clipboard</span><br></pre></td></tr></table></figure><h3 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">map alt+1 goto_tab 1</span><br><span class="line">map alt+2 goto_tab 2</span><br><span class="line">map alt+3 goto_tab 3</span><br><span class="line">map alt+4 goto_tab 4</span><br><span class="line">map alt+5 goto_tab 5</span><br><span class="line">map alt+6 goto_tab 6</span><br><span class="line">map alt+7 goto_tab 7</span><br><span class="line">map alt+8 goto_tab 8</span><br><span class="line">map alt+9 goto_tab 9</span><br><span class="line">map alt+0 goto_tab 0</span><br><span class="line"></span><br><span class="line"># open new tab with cmd+t</span><br><span class="line">map cmd+t new_tab</span><br><span class="line"></span><br><span class="line"># switch between next and previous splits</span><br><span class="line">map cmd+]        next_window</span><br><span class="line">map cmd+[        previous_window</span><br></pre></td></tr></table></figure><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># open new split (window) with cmd+d retaining the cwd</span><br><span class="line">map cmd+w close_window</span><br><span class="line">map cmd+shif+n new_os_window</span><br><span class="line">map cmd+d launch --location=hsplit --cwd=current</span><br><span class="line">map cmd+shift+d launch --location=vsplit --cwd=current</span><br></pre></td></tr></table></figure><h3 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a>Neovim</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">map ctrl+j kitten pass_keys.py neighboring_window bottom ctrl+j &quot;^.* - nvim$&quot;</span><br><span class="line">map ctrl+k kitten pass_keys.py neighboring_window top    ctrl+k &quot;^.* - nvim$&quot;</span><br><span class="line">map ctrl+h kitten pass_keys.py neighboring_window left   ctrl+h &quot;^.* - nvim$&quot;</span><br><span class="line">map ctrl+l kitten pass_keys.py neighboring_window right  ctrl+l &quot;^.* - nvim$&quot;</span><br><span class="line"></span><br><span class="line"># the 3 here is the resize amount, adjust as needed</span><br><span class="line">map alt+j kitten pass_keys.py relative_resize down  3 alt+j &quot;^.* - nvim$&quot;</span><br><span class="line">map alt+k kitten pass_keys.py relative_resize up    3 alt+k &quot;^.* - nvim$&quot;</span><br><span class="line">map alt+h kitten pass_keys.py relative_resize left  3 alt+h &quot;^.* - nvim$&quot;</span><br><span class="line">map alt+l kitten pass_keys.py relative_resize right 3 alt+l &quot;^.* - nvim$&quot;</span><br></pre></td></tr></table></figure><p>Moving in shell and nvim.</p><img src="/2023/04/17/Kitty-configuration-for-macOS/nvim-integration.gif" class="" title="nvim-integration.gif"><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Kitty supports session management, I added some default sessions, and opened session sockets for nvim.</p><p>The session.conf at the root is the location configuration of the session.</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">new_tab home</span><br><span class="line">layout splits</span><br><span class="line">cd ~</span><br><span class="line">launch zsh</span><br><span class="line">focus</span><br><span class="line"></span><br><span class="line">new_tab work</span><br><span class="line">cd ~/Develop/linuxdeepin/</span><br><span class="line">launch zsh</span><br><span class="line"></span><br><span class="line">new_tab nvim</span><br><span class="line">cd ~/.config/nvim</span><br><span class="line">launch zsh</span><br></pre></td></tr></table></figure><h3 id="Init-2"><a href="#Init-2" class="headerlink" title="Init"></a>Init</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">startup_session session.conf</span><br><span class="line"></span><br><span class="line"># Other unix systems:</span><br><span class="line">allow_remote_control yes</span><br><span class="line">listen_on unix:/tmp/.kitty</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’ve been using Kitty for a couple of days. I use it because there is a plugin for nvim that can seamlessly switch focus with kitty, so I</summary>
      
    
    
    
    <category term="development tools" scheme="https://blog.justforlxz.com/categories/development-tools/"/>
    
    
    <category term="Kitty" scheme="https://blog.justforlxz.com/tags/Kitty/"/>
    
  </entry>
  
  <entry>
    <title>How to solve parallels desktop linux usb problem</title>
    <link href="https://blog.justforlxz.com/2023/04/11/How-to-solve-parallels-desktop-linux-usb-problem/"/>
    <id>https://blog.justforlxz.com/2023/04/11/How-to-solve-parallels-desktop-linux-usb-problem/</id>
    <published>2023-04-11T04:59:39.000Z</published>
    <updated>2024-04-15T05:09:54.914Z</updated>
    
    <content type="html"><![CDATA[<p>I am runing a linux virtual machine macos using parallels desktop. One day when I booted normally, I got a usb error and couldn’t use the keyboard and mouse in virtual machine.</p><p>An error messages like this is output on the screen.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usb 3-1: can&#x27;t set config #1, error -62</span><br><span class="line">xhci_hcd Error while assigning device slot ID: Command Aborted.</span><br><span class="line">xhci_hcd Max number of devices this xHCI host supports is 32.</span><br><span class="line">usb usb3-port2: couldn&#x27;t allocate usb_device</span><br></pre></td></tr></table></figure><img src="/2023/04/11/How-to-solve-parallels-desktop-linux-usb-problem/tg_image_2922023940.jpeg" class="" title="error.jpeg"><p>Finally I found a solution on the parallels desktop forum.</p><ol><li>Start your virtual machine.</li><li>Press e to edit the grub menu during the boot phase, passing a new parameter to the kernel.</li><li>Append <code>xhci_hcd.quirks=0x40</code> after quiet</li><li>F10 booting the kernel</li><li>After entering the system, open the terminal and edit the <code>/etc/default/grub</code> file</li><li>Replace that line with the following line:</li></ol><blockquote><p>GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet xhci_hcd.quirks&#x3D;0x40”</p></blockquote><ol start="7"><li>Next, execute the following command:</li></ol><blockquote><p>sudo update-grub</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I am runing a linux virtual machine macos using parallels desktop. One day when I booted normally, I got a usb error and couldn’t use the</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="parallels desktop" scheme="https://blog.justforlxz.com/tags/parallels-desktop/"/>
    
  </entry>
  
  <entry>
    <title>How to remove all Terminating pods</title>
    <link href="https://blog.justforlxz.com/2023/03/15/How-to-remove-all-Terminating-pods/"/>
    <id>https://blog.justforlxz.com/2023/03/15/How-to-remove-all-Terminating-pods/</id>
    <published>2023-03-15T06:47:59.000Z</published>
    <updated>2024-04-15T05:09:54.914Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes all pods of k8s will be in Terminating state, use this command to clean up all pods.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods --all-namespaces | grep Terminating | while read line; do</span><br><span class="line">  pod_name=$(echo $line | awk &#x27;&#123;print $2&#125;&#x27; ) \</span><br><span class="line">  name_space=$(echo $line | awk &#x27;&#123;print $1&#125;&#x27; ); \</span><br><span class="line">  kubectl delete pods $pod_name -n $name_space --grace-period=0 --force</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes all pods of k8s will be in Terminating state, use this command to clean up all pods.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
    <category term="k8s" scheme="https://blog.justforlxz.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>solved duplicate hostname or contents</title>
    <link href="https://blog.justforlxz.com/2023/02/01/solved-duplicate-hostname-or-contents/"/>
    <id>https://blog.justforlxz.com/2023/02/01/solved-duplicate-hostname-or-contents/</id>
    <published>2023-02-01T06:48:21.000Z</published>
    <updated>2024-04-15T05:09:55.028Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/02/01/solved-duplicate-hostname-or-contents/tg_image_1176326230.jpeg" class=""><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Feb 01 05:40:37 fv-az406-375 k3s[5352]: time=&quot;2023-02-01T05:40:37Z&quot; level=info msg=&quot;Waiting to retrieve agent configuration; server is not ready: Node password rejected, duplicate hostname or contents of &#x27;/etc/rancher/node/password&#x27; may not match server node-passwd entry, try enabling a unique node name with the --with-node-id flag&quot;</span><br></pre></td></tr></table></figure><p>When you join a cluster, you are reminded that it already exists, but the same node does not exist in the cluster.</p><p>you can do this.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system delete secrets &lt;node name&gt;.node-password.k3s</span><br></pre></td></tr></table></figure><p>example:</p><p>first, we list all node to check, if the node exists, we should not continue the operation, we need to modify the name of the node that is joining the cluster to avoid conflicts with existing ones.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">rpi4                    Ready    control-plane,master   2d3h   v1.25.6+k3s1</span><br></pre></td></tr></table></figure><p>Now the homenas-vm node does not exist. But the logs tell us that the cluster already has the password, it doesn’t match the current one.</p><p>Then we need to manually delete the old password in the cluster and let the new node join.</p><p>you can use this command to show all secrets, the node password in here.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get -n kube-system secrets</span><br></pre></td></tr></table></figure><p>then you will see all secrets.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                                      TYPE                 DATA   AGE</span><br><span class="line">company-laptop.node-password.k3s          Opaque               1      2d1h</span><br><span class="line">company-pc.node-password.k3s              Opaque               1      2d2h</span><br><span class="line">homenas-vm.node-password.k3s              Opaque               1      50m</span><br><span class="line">k3s-serving                               kubernetes.io/tls    2      2d3h</span><br><span class="line">rpi4.node-password.k3s                    Opaque               1      2d3h</span><br><span class="line">sh.helm.release.v1.traefik-crd.v1         helm.sh/release.v1   1      2d3h</span><br><span class="line">sh.helm.release.v1.traefik.v1             helm.sh/release.v1   1      2d3h</span><br></pre></td></tr></table></figure><p>if the homenas-vm is invalid, we need to delete it manually.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system delete secrets homenas-vm.node-password.k3s</span><br></pre></td></tr></table></figure><p>it’s done!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2023/02/01/solved-duplicate-hostname-or-contents/tg_image_1176326230.jpeg&quot; class=&quot;&quot;&gt;

&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="Solution" scheme="https://blog.justforlxz.com/categories/Solution/"/>
    
    
  </entry>
  
  <entry>
    <title>how to use nvim dap to debug cpp</title>
    <link href="https://blog.justforlxz.com/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/"/>
    <id>https://blog.justforlxz.com/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/</id>
    <published>2022-12-08T02:16:45.000Z</published>
    <updated>2024-04-15T05:09:54.994Z</updated>
    
    <content type="html"><![CDATA[<p>在之前我已经分享过了一份简单的 nvim 配置，它已经实现了编程所需的智能提示，语法高亮，代码跳转等功能，今天我打算整一下 nvim 的调试框架 dap。</p><p>dap 是一个框架，客户端负责在 nvim 上显示各种调试信息，比如显示断点、调用栈、对象内存信息等，服务端则提供客户端所需的功能，服务端通常是一个调试器，或者是调试器包装。</p><p>本篇会用到 Mason 这个插件去安装 dap 的服务端，本篇不会展开 Mason，将来有机会详细说一下。</p><p>首先先看几张正常工作的图:</p><center><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3574429301.jpeg" class=""><p>运行界面</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3358891712.jpeg" class=""><p>查看变量信息</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3913027219.jpeg" class=""><p>快捷键</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_1568131740.jpeg" class="" title="call stacks"><p>函数调用栈</p></center><h2 id="安装-dap"><a href="#安装-dap" class="headerlink" title="安装 dap"></a>安装 dap</h2><p>在 Mason 的安装列表中添加上 codelldb，codelldb 是 vscode 用的调试服务端，负责给 vscode 提供调试信息，有了这个后端，我们就可以方便的实现和 vscode 相同的调试功能。</p><h2 id="配置-dap"><a href="#配置-dap" class="headerlink" title="配置 dap"></a>配置 dap</h2><p>在 plugins 目录下新建 <code>_dap.lua</code> 文件。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="string">&quot;mfussenegger/nvim-dap&quot;</span>,</span><br><span class="line">  opt = <span class="literal">true</span>,</span><br><span class="line">  <span class="built_in">module</span> = &#123; <span class="string">&quot;dap&quot;</span> &#125;,</span><br><span class="line">  requires = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;theHamsta/nvim-dap-virtual-text&quot;</span>,</span><br><span class="line">      <span class="built_in">module</span> = &#123; <span class="string">&quot;nvim-dap-virtual-text&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;rcarriga/nvim-dap-ui&quot;</span>,</span><br><span class="line">      <span class="built_in">module</span> = &#123; <span class="string">&quot;dapui&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;nvim-telescope/telescope-dap.nvim&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;jbyuki/one-small-step-for-vimkind&quot;</span>,</span><br><span class="line">      <span class="built_in">module</span> = <span class="string">&quot;osv&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">config</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;config.dap&quot;</span>).setup()</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  disable = <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有些人会在 packer 里用 use 安装，把 return 改成 use 就可以了。</p></blockquote><p>packer 的代码已经写好了，现在写 config 函数，在我的例子中，我把文件放在了 <code>lua/config/dap/</code> 目录下，因为要配置不同的语言，这样会方便管理一些。</p><p>首先要先在 dap 目录下新建一个 init.lua，这里是模块入口，初始化的工作从这里开始。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure_exts</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure_debuggers</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.setup</span><span class="params">()</span></span></span><br><span class="line">configure() <span class="comment">-- Configuration</span></span><br><span class="line">configure_exts() <span class="comment">-- Extensions</span></span><br><span class="line">configure_debuggers() <span class="comment">-- Debugger</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">configure_debuggers()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> M</span><br></pre></td></tr></table></figure><p>在 <code>_dap.lua</code> 中调用了 <code>require(&quot;config.dap&quot;).setup()</code>，这个 setup 函数就是 <code>config/dap/init.lua</code> 中的 <code>M.setup()</code> 函数。</p><p>目前只是写了一个壳子，现在让我们正式配置它吧。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>在 nvim 中进行调试，界面显然还是在终端里的，所以我们要使用快捷键进行一些操作，比如标记断点、单步进入、跳出等。</p><p>在 <code>config/dap/keymaps.lua</code> 中进行快捷键的配置。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> whichkey = <span class="built_in">require</span> <span class="string">&quot;which-key&quot;</span></span><br><span class="line"><span class="comment">-- local legendary = require &quot;legendary&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- local function keymap(lhs, rhs, desc)</span></span><br><span class="line"><span class="comment">--   vim.keymap.set(&quot;n&quot;, lhs, rhs, &#123; silent = true, desc = desc &#125;)</span></span><br><span class="line"><span class="comment">-- end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.setup</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> keymap = &#123;</span><br><span class="line">    d = &#123;</span><br><span class="line">      name = <span class="string">&quot;DAP&quot;</span>,</span><br><span class="line">      R = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.run_to_cursor()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Run to Cursor&quot;</span> &#125;,</span><br><span class="line">      E = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.eval(vim.fn.input &#x27;[Expression] &gt; &#x27;)&lt;cr&gt;&quot;</span>, <span class="string">&quot;Evaluate Input&quot;</span> &#125;,</span><br><span class="line">      C = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.set_breakpoint(vim.fn.input &#x27;[Condition] &gt; &#x27;)&lt;cr&gt;&quot;</span>, <span class="string">&quot;Conditional Breakpoint&quot;</span> &#125;,</span><br><span class="line">      U = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.toggle()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Toggle UI&quot;</span> &#125;,</span><br><span class="line">      b = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_back()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Step Back&quot;</span> &#125;,</span><br><span class="line">      c = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.continue()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Continue&quot;</span> &#125;,</span><br><span class="line">      d = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.disconnect()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Disconnect&quot;</span> &#125;,</span><br><span class="line">      e = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.eval()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Evaluate&quot;</span> &#125;,</span><br><span class="line">      g = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.session()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Get Session&quot;</span> &#125;,</span><br><span class="line">      h = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap.ui.widgets&#x27;.hover()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Hover Variables&quot;</span> &#125;,</span><br><span class="line">      S = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap.ui.widgets&#x27;.scopes()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Scopes&quot;</span> &#125;,</span><br><span class="line">      i = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_into()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Step Into&quot;</span> &#125;,</span><br><span class="line">      o = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_over()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Step Over&quot;</span> &#125;,</span><br><span class="line">      p = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.pause.toggle()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Pause&quot;</span> &#125;,</span><br><span class="line">      q = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.close()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Quit&quot;</span> &#125;,</span><br><span class="line">      r = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.repl.toggle()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Toggle Repl&quot;</span> &#125;,</span><br><span class="line">      s = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.continue()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Start&quot;</span> &#125;,</span><br><span class="line">      t = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.toggle_breakpoint()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Toggle Breakpoint&quot;</span> &#125;,</span><br><span class="line">      x = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.terminate()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Terminate&quot;</span> &#125;,</span><br><span class="line">      u = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dap&#x27;.step_out()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Step Out&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">local</span> opts = &#123;</span><br><span class="line">    mode = <span class="string">&quot;n&quot;</span>,</span><br><span class="line">    prefix = <span class="string">&quot;&lt;leader&gt;&quot;</span>,</span><br><span class="line">    buffer = <span class="literal">nil</span>,</span><br><span class="line">    silent = <span class="literal">true</span>,</span><br><span class="line">    noremap = <span class="literal">true</span>,</span><br><span class="line">    nowait = <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  whichkey.register(keymap, opts)</span><br><span class="line">  <span class="comment">--- require(&quot;legendary.integrations.which-key&quot;).bind_whichkey(keymap, opts, false)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> keymap_v = &#123;</span><br><span class="line">    d = &#123;</span><br><span class="line">      name = <span class="string">&quot;Debug&quot;</span>,</span><br><span class="line">      e = &#123; <span class="string">&quot;&lt;cmd&gt;lua require&#x27;dapui&#x27;.eval()&lt;cr&gt;&quot;</span>, <span class="string">&quot;Evaluate&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  opts = &#123;</span><br><span class="line">    mode = <span class="string">&quot;v&quot;</span>,</span><br><span class="line">    prefix = <span class="string">&quot;&lt;leader&gt;&quot;</span>,</span><br><span class="line">    buffer = <span class="literal">nil</span>,</span><br><span class="line">    silent = <span class="literal">true</span>,</span><br><span class="line">    noremap = <span class="literal">true</span>,</span><br><span class="line">    nowait = <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  whichkey.register(keymap_v, opts)</span><br><span class="line">  <span class="comment">--- require(&quot;legendary.integrations.which-key&quot;).bind_whichkey(keymap_v, opts, false)</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> M</span><br></pre></td></tr></table></figure><p>在这里我将快捷键绑定在了 <code>&lt;leader&gt; d</code> 上面。</p><p>现在返回到 <code>init.lua</code> 中，在 <code>setup</code> 函数中调用 keymaps。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.setup</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;config.dap.keymaps&quot;</span>).setup() <span class="comment">-- Keymaps</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="dapui"><a href="#dapui" class="headerlink" title="dapui"></a>dapui</h3><p>dapui 是一个美化 dap 界面的插件，通常大家都会配置的吧！</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure_exts</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;nvim-dap-virtual-text&quot;</span>).setup(&#123;</span><br><span class="line">commented = <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> dap, dapui = <span class="built_in">require</span>(<span class="string">&quot;dap&quot;</span>), <span class="built_in">require</span>(<span class="string">&quot;dapui&quot;</span>)</span><br><span class="line">dapui.setup(&#123;</span><br><span class="line">expand_lines = <span class="literal">true</span>,</span><br><span class="line">icons = &#123; expanded = <span class="string">&quot;&quot;</span>, collapsed = <span class="string">&quot;&quot;</span>, circular = <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">mappings = &#123;</span><br><span class="line"><span class="comment">-- Use a table to apply multiple mappings</span></span><br><span class="line">expand = &#123; <span class="string">&quot;&lt;CR&gt;&quot;</span>, <span class="string">&quot;&lt;2-LeftMouse&gt;&quot;</span> &#125;,</span><br><span class="line"><span class="built_in">open</span> = <span class="string">&quot;o&quot;</span>,</span><br><span class="line"><span class="built_in">remove</span> = <span class="string">&quot;d&quot;</span>,</span><br><span class="line">edit = <span class="string">&quot;e&quot;</span>,</span><br><span class="line">repl = <span class="string">&quot;r&quot;</span>,</span><br><span class="line">toggle = <span class="string">&quot;t&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">layouts = &#123;</span><br><span class="line">&#123;</span><br><span class="line">elements = &#123;</span><br><span class="line">&#123; id = <span class="string">&quot;scopes&quot;</span>, size = <span class="number">0.33</span> &#125;,</span><br><span class="line">&#123; id = <span class="string">&quot;breakpoints&quot;</span>, size = <span class="number">0.17</span> &#125;,</span><br><span class="line">&#123; id = <span class="string">&quot;stacks&quot;</span>, size = <span class="number">0.25</span> &#125;,</span><br><span class="line">&#123; id = <span class="string">&quot;watches&quot;</span>, size = <span class="number">0.25</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">size = <span class="number">0.33</span>,</span><br><span class="line">position = <span class="string">&quot;right&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">elements = &#123;</span><br><span class="line">&#123; id = <span class="string">&quot;repl&quot;</span>, size = <span class="number">0.45</span> &#125;,</span><br><span class="line">&#123; id = <span class="string">&quot;console&quot;</span>, size = <span class="number">0.55</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">size = <span class="number">0.27</span>,</span><br><span class="line">position = <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">floating = &#123;</span><br><span class="line">max_height = <span class="number">0.9</span>,</span><br><span class="line">max_width = <span class="number">0.5</span>, <span class="comment">-- Floats will be treated as percentage of your screen.</span></span><br><span class="line">border = vim.g.border_chars, <span class="comment">-- Border style. Can be &#x27;single&#x27;, &#x27;double&#x27; or &#x27;rounded&#x27;</span></span><br><span class="line">mappings = &#123;</span><br><span class="line"><span class="built_in">close</span> = &#123; <span class="string">&quot;q&quot;</span>, <span class="string">&quot;&lt;Esc&gt;&quot;</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;) <span class="comment">-- use default</span></span><br><span class="line">dap.listeners.after.event_initialized[<span class="string">&quot;dapui_config&quot;</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">dapui.<span class="built_in">open</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">dap.listeners.before.event_terminated[<span class="string">&quot;dapui_config&quot;</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">dapui.<span class="built_in">close</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">dap.listeners.before.event_exited[<span class="string">&quot;dapui_config&quot;</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">dapui.<span class="built_in">close</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>配置基本上大家都没差多少，说不定都是从一个人的配置里搬运的。</p><center><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_1681120408.jpeg" class="" title="evaluate"></center><h3 id="配置-icon"><a href="#配置-icon" class="headerlink" title="配置 icon"></a>配置 icon</h3><p>我还修改了几个默认的 icon，在 configure 函数里。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> dap_breakpoint = &#123;</span><br><span class="line">breakpoint = &#123;</span><br><span class="line">text = <span class="string">&quot;&quot;</span>,</span><br><span class="line">texthl = <span class="string">&quot;LspDiagnosticsSignError&quot;</span>,</span><br><span class="line">linehl = <span class="string">&quot;&quot;</span>,</span><br><span class="line">numhl = <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">rejected = &#123;</span><br><span class="line">text = <span class="string">&quot;&quot;</span>,</span><br><span class="line">texthl = <span class="string">&quot;LspDiagnosticsSignHint&quot;</span>,</span><br><span class="line">linehl = <span class="string">&quot;&quot;</span>,</span><br><span class="line">numhl = <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">stopped = &#123;</span><br><span class="line">text = <span class="string">&quot;&quot;</span>,</span><br><span class="line">texthl = <span class="string">&quot;LspDiagnosticsSignInformation&quot;</span>,</span><br><span class="line">linehl = <span class="string">&quot;DiagnosticUnderlineInfo&quot;</span>,</span><br><span class="line">numhl = <span class="string">&quot;LspDiagnosticsSignInformation&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vim.fn.sign_define(<span class="string">&quot;DapBreakpoint&quot;</span>, dap_breakpoint.breakpoint)</span><br><span class="line">vim.fn.sign_define(<span class="string">&quot;DapStopped&quot;</span>, dap_breakpoint.stopped)</span><br><span class="line">vim.fn.sign_define(<span class="string">&quot;DapBreakpointRejected&quot;</span>, dap_breakpoint.rejected)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><center><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3049280764.jpeg" class="" title="breakpoint"><p>断点标记</p><img src="/2022/12/08/how-to-use-nvim-dap-to-debug-cpp/tg_image_3325119905.jpeg" class="" title="breakpoint"><p>单步停止</p></center><h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><p>现在还差一个客户端的函数没有写，在这里只是为了调用针对不同语言设置的服务端，内容也非常的简单。</p><p>新建一个 <code>config/dap/cpp.lua</code>，在里面配置 c++ 相关的参数就行了，需要注意的是，codelldb 可以调试 c、c++、rust 等语言，就不会再拆分成更精细的文件了。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.setup</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">-- local dap_install = require &quot;dap-install&quot;</span></span><br><span class="line"><span class="comment">-- dap_install.config(&quot;codelldb&quot;, &#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> dap = <span class="built_in">require</span>(<span class="string">&quot;dap&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> install_root_dir = vim.fn.stdpath(<span class="string">&quot;data&quot;</span>) .. <span class="string">&quot;/mason&quot;</span></span><br><span class="line"><span class="keyword">local</span> extension_path = install_root_dir .. <span class="string">&quot;/packages/codelldb/extension/&quot;</span></span><br><span class="line"><span class="keyword">local</span> codelldb_path = extension_path .. <span class="string">&quot;adapter/codelldb&quot;</span></span><br><span class="line"></span><br><span class="line">dap.adapters.codelldb = &#123;</span><br><span class="line"><span class="built_in">type</span> = <span class="string">&quot;server&quot;</span>,</span><br><span class="line">port = <span class="string">&quot;$&#123;port&#125;&quot;</span>,</span><br><span class="line">executable = &#123;</span><br><span class="line">command = codelldb_path,</span><br><span class="line">args = &#123; <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;$&#123;port&#125;&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">-- On windows you may have to uncomment this:</span></span><br><span class="line"><span class="comment">-- detached = false,</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">dap.configurations.cpp = &#123;</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="string">&quot;Launch file&quot;</span>,</span><br><span class="line"><span class="built_in">type</span> = <span class="string">&quot;codelldb&quot;</span>,</span><br><span class="line">request = <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">program = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">return</span> vim.fn.<span class="built_in">input</span>(<span class="string">&quot;Path to executable: &quot;</span>, vim.fn.getcwd() .. <span class="string">&quot;/&quot;</span>, <span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line">cwd = <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">stopOnEntry = <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dap.configurations.c = dap.configurations.cpp</span><br><span class="line">dap.configurations.rust = dap.configurations.cpp</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> M</span><br></pre></td></tr></table></figure><blockquote><p>Mason 在这里终于露面了，但是我们只是看到查找了 Mason 安装 codelldb 的路径而已。</p></blockquote><p>配置的内容是固定的，设置一下执行文件的路径和参数，设置一下调试这个语言所需的启动参数，这里默认给了一个输入可执行文件路径启动调试的简单方法。</p><h2 id="配置-launch-json"><a href="#配置-launch-json" class="headerlink" title="配置 launch.json"></a>配置 launch.json</h2><p>上面的内容就已经足够调试 c++ 程序了，但是 dap 还支持 vscode 的 launch.json，将启动配置作为固定模板填入启动调试的列表，并且在 launch.json 中我们还可以控制程序的环境变量，启动参数等，会比较方便一些。</p><p>dap 支持这个只需要在 setup 函数加上一行代码就足够了。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;dap.ext.vscode&quot;</span>).load_launchjs(<span class="literal">nil</span>, &#123; codelldb = &#123; <span class="string">&quot;c&quot;</span>, <span class="string">&quot;cpp&quot;</span>, <span class="string">&quot;rust&quot;</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><p>这句话的意思是 launch.json 中的类型是 codelldb 时，使用 c、cpp、rust 的调试配置，而上面我们配置了 codelldb 的参数 和 cpp 的参数，而且还将 cpp 的配置复制给了 c 和 rust。</p><p>但是有一个需要注意的地方，launch.json 现在环境变量换成了 environment 字段，并且结构也发生了变化，dap 目前只支持 env 字段，我在考虑贡献一个 pr 做一个自动转换。</p><p>这里给一个 launch.json 的例子：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(codelldb) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;codelldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./build/bin/deepin-kwin_x11&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;--replace&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;DISPLAY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;:0&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;PATH&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/bin:$PATH&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;XDG_CURRENT_DESKTOP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Deepin&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;QT_PLUGIN_PATH&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;QT_LOGGING_RULES&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kwin_*.debug=true&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，这里的 codelldb 其实是一个标识字符串，vscode 默认提供的 type 是 cppgdb，我们也可以改成相同的字段。</p><p>想要在线查看最终文件内容，可以看下面几个链接：</p><p><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/config/dap/rust.lua">cpp.lua </a><br><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/config/dap/init.lua">init.lua</a><br><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/config/dap/keymaps.lua">keymaps.lua</a><br><a href="https://github.com/justforlxz/config.nvim/blob/master/lua/plugins/_dap.lua">_dap.lua</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前我已经分享过了一份简单的 nvim 配置，它已经实现了编程所需的智能提示，语法高亮，代码跳转等功能，今天我打算整一下 nvim 的调试框架 dap。&lt;/p&gt;
&lt;p&gt;dap 是一个框架，客户端负责在 nvim 上显示各种调试信息，比如显示断点、调用栈、对象内存信息等，服</summary>
      
    
    
    
    <category term="neovim" scheme="https://blog.justforlxz.com/categories/neovim/"/>
    
    
    <category term="neovim" scheme="https://blog.justforlxz.com/tags/neovim/"/>
    
    <category term="dap" scheme="https://blog.justforlxz.com/tags/dap/"/>
    
  </entry>
  
  <entry>
    <title>1. init project</title>
    <link href="https://blog.justforlxz.com/2022/11/07/photo-1-init-project/"/>
    <id>https://blog.justforlxz.com/2022/11/07/photo-1-init-project/</id>
    <published>2022-11-07T08:38:31.000Z</published>
    <updated>2024-04-15T05:09:55.027Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个系列的文章，用来记录我的相册应用的开发过程，内容可能会比较枯燥，还请读者见谅。</p><p>我使用  NextCloud 作为我的存储中心，但是当我备份相册的时候，我感到了莫名的蛋疼，实在是太难用了，不支持相册，不支持标记，不支持各种视图，所以我决定自己写一个新的客户端，只提供相册功能。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>我用的是 iPhone 12，理所当然我会选择 iOS 客户端开发，在我面前有这么几种方案可以选择：</p><ol><li>object-c</li><li>swift</li><li>swiftui</li><li>flutter</li><li>qml</li><li>react-native</li></ol><blockquote><p>本着三短一长选最长的原则，我计划使用 react-native 作为项目的技术方案。</p></blockquote><p>object-c 已经很老旧了，我只是想业余时间做一个应用满足自己的需求，排除。</p><p>swfit 和 swiftui 是苹果目前主推的，特别是 swfitui，用来写界面真的很方便，但是我不想学新的，排除。</p><p>flutter 是谷歌在推的一个框架，从我的研发角度来看，flutter 和 qml 没有什么本质区别，都是自己实现了绘制，在此基础上完善控件等高级功能，既然我是一个 Qt 开发者，我肯定不会选择再去学一套类似的技术了，排除。</p><p>qml，Qt 目前主推的界面开发框架，采用 JSON like 的方式描述界面，并且可以运行一部分的标准 js 语法，配合 C++ 在 native 端提供本地功能，Qt 自己是一套平台一样的框架，用起来很爽，但是我不想写 qml，排除。</p><p>最终就只能用 react native 了，我个人想学一下前端开发，使用相关的技术栈对我来说性价比最高，选择。</p><blockquote><p><del>为了写 js 而找了这么多借口（</del></p></blockquote><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><p>确定了技术方案，就需要考虑实现哪些功能了，作为一个相册 App，它最基本的功能肯定是 <del>能启动</del>,嗯，看图。</p><ul><li>浏览服务器和本地的图片</li><li>上传和下载图片</li><li>相册分类</li><li>标记信息</li><li>查看文件详情</li></ul><p>一开始先不考虑那么多，做一个基本的 TimeLine 样式就可以了。</p><h2 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h2><p>功能也已经确定了，先实现一个 TimeLine 的功能，那么就要确定界面的样式了，我个人比较欣赏 Google Photo 的设计，打算就按像素复制了。</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>现在可以考虑怎么写代码了，首先初始化一下项目。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx react-native init photos --template react-native-template-typescript</span><br></pre></td></tr></table></figure><p>初始化一个带有 typescript 的 react native 项目，然后在 vscode 里安装一些 react 和 react native 相关的插件就可以了。</p><p>删掉初始化项目的 App.tsx 和相关的文件，新建 src 目录和 App.tsx 文件，开始写新的界面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个系列的文章，用来记录我的相册应用的开发过程，内容可能会比较枯燥，还请读者见谅。&lt;/p&gt;
&lt;p&gt;我使用  NextCloud 作为我的存储中心，但是当我备份相册的时候，我感到了莫名的蛋疼，实在是太难用了，不支持相册，不支持标记，不支持各种视图，所以我决定自己写一个新的</summary>
      
    
    
    
    <category term="photos 开发笔记" scheme="https://blog.justforlxz.com/categories/photos-%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="typescript" scheme="https://blog.justforlxz.com/tags/typescript/"/>
    
    <category term="react" scheme="https://blog.justforlxz.com/tags/react/"/>
    
    <category term="react native" scheme="https://blog.justforlxz.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>docker-buildx-multi-arch-images</title>
    <link href="https://blog.justforlxz.com/2022/08/25/docker-buildx-multi-arch-images/"/>
    <id>https://blog.justforlxz.com/2022/08/25/docker-buildx-multi-arch-images/</id>
    <published>2022-08-25T05:32:03.000Z</published>
    <updated>2024-04-15T05:09:54.959Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在搞 github 的 ci，为了方便公司的开发快速修复其他发行版上的构建问题，我研究了一下 distrobox 启动容器来作为本地验证环境的可行性，结果发现还不错，就顺手做了几个镜像。</p><p>v23 的仓库是支持多个架构的，想着顺手做一份 v23 的镜像提交到 docker hub 上，结果遇到了一点多平台的坑。</p><h2 id="docker-buildx"><a href="#docker-buildx" class="headerlink" title="docker buildx"></a>docker buildx</h2><p>Docker Buildx是一个CLI插件，它扩展了Docker命令，完全支持 Moby BuildKit 构建工具包提供的特性。它提供了与docker 构建相同的用户体验，提供了许多新特性，比如创建作用域的构建器实例和同时针对多个节点构建。</p><p>Moby BuildKit 构建工具提供了一些诸如跨平台启动的功能。</p><h2 id="首次尝试"><a href="#首次尝试" class="headerlink" title="首次尝试"></a>首次尝试</h2><p>最开始我是打算使用 docker import 直接把 base.tgz 导入进去的，docker import 支持 –platform 参数指定架构，我就跑了两遍，生成了 linux&#x2F;arm64 和 linux&#x2F;amd64 两个架构的。</p><p>结果我看到 docker images 里只有一份，而且用 docker image inspect beige:base 查看发现里面的 Architecuture 只有 amd64，推送到 docker hub 后也只有一份，这显然是不正确的。</p><h2 id="使用-dockerfile"><a href="#使用-dockerfile" class="headerlink" title="使用 dockerfile"></a>使用 dockerfile</h2><p>经过我一番的搜索，我看到了一种使用 docker buildx 配合 dockerfile 的多架构构建方式，然后我就快速的写了一份 dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> --platform=$TARGETPLATFORM scratch</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> TARGETARCH</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> beige-<span class="variable">$&#123;TARGETARCH&#125;</span>.tgz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;sh&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>dockerfile 需要注意的是，变量需要先使用 ARG 声明，在 build 阶段，遇到变量会产生一次分叉，这样就会在不同的架构里继续运行了（这也是坑我很长的时间，最终我将文件名修改为方便获取的方式……）。</p><p>接下来需要创建一份构建环境。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker buildx create --use</span><br></pre></td></tr></table></figure><p>这条命令可以创建一个基本环境，可以使用 <code>docker buildx ls</code> 查看当前的环境，可以看到默认就支持的有很多种架构。</p><p>然后使用 build 命令开始构建：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker buildx build --platform=linux/amd64,linux/arm64 -t linuxdeepin/beige:base --push .</span><br></pre></td></tr></table></figure><p>简单说一下参数，platform 参数负责控制本次 build 传入架构，t 参数设置 tag 名称，这里我用了 –push 直接推送上去了，它默认用的 docker-compose 处理，构建产物不会出现在 docker images 里，所以就直接推送了。</p><p>现在我就有一份 v23 的 docker base 可用了，很开心。</p><p>点击前往：<br><a href="https://hub.docker.com/repository/docker/linuxdeepin/beige">https://hub.docker.com/repository/docker/linuxdeepin/beige</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近一直在搞 github 的 ci，为了方便公司的开发快速修复其他发行版上的构建问题，我研究了一下 distrobox 启动容器来作为本地验证环境的可行性，结果发现还不错，就顺手做了几个镜像。&lt;/p&gt;
&lt;p&gt;v23 的仓库是支持多个架构的，想着顺手做一份 v23 的镜像提</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.justforlxz.com/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://blog.justforlxz.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>meet unity shader</title>
    <link href="https://blog.justforlxz.com/2022/07/21/meet-unity-shader/"/>
    <id>https://blog.justforlxz.com/2022/07/21/meet-unity-shader/</id>
    <published>2022-07-21T13:44:25.000Z</published>
    <updated>2024-04-15T05:09:54.896Z</updated>
    
    <content type="html"><![CDATA[<p>在我还在上高中的时候，我就开始学了一些 Unity，也尝试制作了一些简单的游戏，那时候更多是出于好玩，后来沉迷 Linux，就逐渐淡忘了游戏开发。</p><p>机缘巧合，我现在入手了一台 M1 mbp，接触到了 Apple 家的 Metal，又快速过了一下 Vulkan，也尝试做了一些入门级的项目，更幻想制作一个游戏引擎，所以最近有时间我就在看 Games104 的课程，补充一下相关知识，计划跟完 Games104，就去看一下闫令琪老师的 Games101，主攻一下计算机图形学。</p><p>有天中午我无意间看到了 onevcat 大佬写的一篇介绍 unity shader 的文章，并且还分享了一篇使用 shader 模拟物体表面的雪的效果，让我也想跟着做一个。</p><img src="/2022/07/21/meet-unity-shader/p1.png" class="" title="效果展示"><h2 id="Unity-shader"><a href="#Unity-shader" class="headerlink" title="Unity shader"></a>Unity shader</h2><p>Unity shader 并不像平常我们见的 OpenGL、Vulkan 和 Metal 的 shader 文件一样，Unity shader 更像是配置文件，它使用特定的结构语法保存各种信息，并和 Unity Editor 中其他对象交互。</p><p>一个基础的 Unity shader 的结构是这样的:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Custom/myshader&quot; &#123;</span><br><span class="line">    Properties &#123;&#125;</span><br><span class="line">    SubShader &#123;&#125;</span><br><span class="line">    Fallback &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，一个标准的 Unity shader 拥有四个部分，一个 Shader 的命名，一个属性对象，一个 SubShader 对象，一个 Fallback 字符串。</p><p>属性对象是 Unity Editor 和 shader 沟通的桥梁，我们可以在 Properties 中声明输入，从外部接受参数。</p><p>SubShader 对象是可以多个重复的，当第一个 SubShader 对象中的代码无法在当前的 GPU 中运行时，Unity 会切换到下一个 SubShader 对象。我们可以在同一份 Shader 文件中对不同的 GPU 实现不同的支持。</p><p>Fallback 字符串则是如果 SubShader 都无法运行时，采用的最终的渲染方法。</p><p>一个简单的理解就是，从上到下，画面效果是依次降低的。</p><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><h2 id="SubShader"><a href="#SubShader" class="headerlink" title="SubShader"></a>SubShader</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SubShader &#123;</span><br><span class="line">    Tags &#123;&#125;</span><br><span class="line">    Pass &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pass &#123;</span><br><span class="line">    CGPROGRAM</span><br><span class="line">    ENDCG</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CGPROGRAM"><a href="#CGPROGRAM" class="headerlink" title="CGPROGRAM"></a>CGPROGRAM</h2><p>&#x2F;&#x2F; TODO：CGPROGRAM 是发送到 GPU 运行的程序，也是一般概念中的 shader。</p><h2 id="自定义光照"><a href="#自定义光照" class="headerlink" title="自定义光照"></a>自定义光照</h2><h2 id="法线"><a href="#法线" class="headerlink" title="法线"></a>法线</h2><h2 id="Shader-代码"><a href="#Shader-代码" class="headerlink" title="Shader 代码"></a>Shader 代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;_Object2World&#x27; with &#x27;unity_ObjectToWorld&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;Custom/SnowShader&quot; &#123;</span><br><span class="line">    Properties &#123;</span><br><span class="line">        _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Bump (&quot;Bump&quot;, 2D) = &quot;bump&quot; &#123;&#125;</span><br><span class="line">        _Snow (&quot;Snow Level&quot;, Range(0,1) ) = 0</span><br><span class="line">        _SnowColor (&quot;Snow Color&quot;, Color) = (1.0,1.0,1.0,1.0)</span><br><span class="line">        _SnowDirection (&quot;Snow Direction&quot;, Vector) = (0,1,0)</span><br><span class="line">        _SnowDepth (&quot;Snow Depth&quot;, Range(0,0.3)) = 0.1</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader &#123;</span><br><span class="line">        Tags &#123; &quot;RenderType&quot;=&quot;Opaque&quot; &#125;</span><br><span class="line">        LOD 200</span><br><span class="line"></span><br><span class="line">        CGPROGRAM</span><br><span class="line">        #pragma surface surf CustomDiffuse vertex:vert</span><br><span class="line"></span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line">        sampler2D _Bump;</span><br><span class="line">        float _Snow;</span><br><span class="line">        float4 _SnowColor;</span><br><span class="line">        float4 _SnowDirection;</span><br><span class="line">        float _SnowDepth;</span><br><span class="line"></span><br><span class="line">        struct Input &#123;</span><br><span class="line">            float2 uv_MainTex;</span><br><span class="line">            float2 uv_Bump;</span><br><span class="line">            float3 worldNormal;</span><br><span class="line">            INTERNAL_DATA</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        inline float4 LightingCustomDiffuse (SurfaceOutput s, fixed3 lightDir, fixed atten) &#123;</span><br><span class="line">            float difLight = dot (s.Normal, lightDir);</span><br><span class="line">            float hLambert = difLight * 0.5 + 0.5;</span><br><span class="line">            float4 col;</span><br><span class="line">            col.rgb = s.Albedo * _LightColor0.rgb * (hLambert * atten * 2);</span><br><span class="line">            col.a = s.Alpha;</span><br><span class="line">            return col;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void vert (inout appdata_full v) &#123;</span><br><span class="line">            float4 sn = mul(transpose(unity_ObjectToWorld) , _SnowDirection);</span><br><span class="line">            if(dot(v.normal, sn.xyz) &gt;= lerp(1,-1, (_Snow * 2) / 3)) &#123;</span><br><span class="line">                v.vertex.xyz += (sn.xyz + v.normal) * _SnowDepth * _Snow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void surf (Input IN, inout SurfaceOutput o) &#123;</span><br><span class="line">            half4 c = tex2D (_MainTex, IN.uv_MainTex);</span><br><span class="line"></span><br><span class="line">            o.Normal = UnpackNormal(tex2D(_Bump, IN.uv_Bump));</span><br><span class="line"></span><br><span class="line">            if (dot(WorldNormalVector(IN, o.Normal), _SnowDirection.xyz) &gt; lerp(1,-1,_Snow)) &#123;</span><br><span class="line">                o.Albedo = _SnowColor.rgb;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                o.Albedo = c.rgb;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            o.Alpha = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>相关文章</strong><br><a href="https://onevcat.com/2013/07/shader-tutorial-1/">https://onevcat.com/2013/07/shader-tutorial-1/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在我还在上高中的时候，我就开始学了一些 Unity，也尝试制作了一些简单的游戏，那时候更多是出于好玩，后来沉迷 Linux，就逐渐淡忘了游戏开发。&lt;/p&gt;
&lt;p&gt;机缘巧合，我现在入手了一台 M1 mbp，接触到了 Apple 家的 Metal，又快速过了一下 Vulkan，</summary>
      
    
    
    
    <category term="Game" scheme="https://blog.justforlxz.com/categories/Game/"/>
    
    
    <category term="Game" scheme="https://blog.justforlxz.com/tags/Game/"/>
    
    <category term="Unity" scheme="https://blog.justforlxz.com/tags/Unity/"/>
    
    <category term="Shader" scheme="https://blog.justforlxz.com/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>使用 React 的 JSX</title>
    <link href="https://blog.justforlxz.com/2022/07/02/jsx/"/>
    <id>https://blog.justforlxz.com/2022/07/02/jsx/</id>
    <published>2022-07-01T16:11:59.000Z</published>
    <updated>2024-04-15T05:09:55.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h1><p>JSX 是 javascript XML 的缩写，可以在 javascript 代码中书写 HTML 结构的一种方式。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>采用类似于 HTML 语法</p><p>充分利用 js 自身的可编程能力创建 HTML 结构</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>需要使用 babel 进行语法转换，对于 react 而言，以下代码是等价的。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;d&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ReactDOM</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">                                  &#123; <span class="attr">id</span>: <span class="string">&#x27;d&#x27;</span> &#125;,</span><br><span class="line">                                  <span class="title class_">ReactDOM</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">                                                         <span class="literal">null</span>,</span><br><span class="line">                                                         <span class="string">&#x27;hello world&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>可以在 JSX 中使用表达式，表达式使用一对花括号对表达式进行标记。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> html = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; text &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;test function&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newHtml = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; flag ? test() : &#x27;no&#x27; &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>通过上面的例子可以看出，JSX 的表达式支持以下几种方式：</p><ol><li>识别常规变量</li><li>原生 js 方法调用</li><li>三元运算符</li></ol><p><strong>特别注意</strong></p><p>JSX 中无法使用 if&#x2F;switch&#x2F;变量声明等语句，他们不是表达式，不支持在 jsx 中使用。</p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>在 vue 中，我们可以使用 v-for 对一个列表数据进行遍历，可以在模板中实现元素的重复生成。在 angular 中可以使用 *ngFor 实现相同的事情，在 JSX 中我们也可以做到相同的事情。</p><p>可以使用 map 方法返回包含 jsx 的表达式</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;可惜没如果&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;我继续&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;黑夜问白天&#x27;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;App&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;</span></span><br><span class="line"><span class="language-xml">songs.map(item =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">item.id</span>&#125; &gt;</span>&#123; item.name &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>由于是重复元素渲染，需要为生成的元素分配一个 key，否则会影响 virtual dom 的性能。</p><p>key 只能使用 number&#x2F;string 类型，key 属性不会出现在真实的 dom 属性上，进在内部使用。</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>JSX 支持满足条件生成对应的 HTML 结构，可以使用 <code>三元运算符</code> 实现。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123; flag ? &#x27;flag is true&#x27; : &#x27;flag is false&#x27; &#125;</span></span><br><span class="line"><span class="language-xml">&#123; flag ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>flag is true<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null &#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><p>JSX 支持 css 样式处理</p><ul><li>行内样式 - style - 在元素属性上绑定 style 属性</li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">red</span> &#125;&#125;&gt;</span>here is a div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行内样式 - style - 更优写法</li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> styleObj = &#123;</span><br><span class="line"><span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styleObj</span> &#125;&gt;</span>here is a div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类名样式 - 在元素身上绑一个 className 属性</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./app.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;active&quot;</span>&gt;</span>here is a div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>在第一个例子中，由于 style 属性需要的是一个对象，所以第一层 <code>&#123;&#125;</code> 是表达式，第二层 <code>&#123;&#125;</code> 是对象的定义括号，所以通常会写成 Object 的方式，这样控制也更加方便。</p><h3 id="动态类名控制"><a href="#动态类名控制" class="headerlink" title="动态类名控制"></a>动态类名控制</h3><p>在上面的例子中，已经使用 css 中的类名样式进行了样式设置，但是有时候我们会希望控制一个元素的样式在某些场景下，会发生改变，这个时候就需要使用动态类名控制了。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./app.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span> <span class="attr">flag</span> ? &quot;<span class="attr">activate</span>&quot; <span class="attr">:</span> &quot;&quot; &#125;&gt;</span>here is a div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>JSX 在实际应用时的注意事项</p><ol><li>JSX 必须有一个根结点，也就是说 React 无法使用 jsx 创建最顶层的 html 元素，我们必须先提供一个空的元素作为 React 的根节点。（或者使用幽灵节点 <code>&lt;&gt;&lt;/&gt;</code> 创建）</li><li>所有标签必须形成闭合，成对闭合或者自闭合均可。</li><li>JSX 中的语法更贴近 javascript 的语法，属性采用小驼峰命名法 <code>class -&gt; className</code> <code>for -&gt; htmlFor</code> 。</li><li>JSX 支持多行（换行），如果需要换行，可以使用 <code>()</code> 进行包裹。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jsx&quot;&gt;&lt;a href=&quot;#jsx&quot; class=&quot;headerlink&quot; title=&quot;jsx&quot;&gt;&lt;/a&gt;jsx&lt;/h1&gt;&lt;p&gt;JSX 是 javascript XML 的缩写，可以在 javascript 代码中书写 HTML 结构的一种方式。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="Web" scheme="https://blog.justforlxz.com/categories/Web/"/>
    
    
    <category term="javascript" scheme="https://blog.justforlxz.com/tags/javascript/"/>
    
    <category term="jsx" scheme="https://blog.justforlxz.com/tags/jsx/"/>
    
  </entry>
  
  <entry>
    <title>栈分配问题</title>
    <link href="https://blog.justforlxz.com/2022/06/24/stack-problem/"/>
    <id>https://blog.justforlxz.com/2022/06/24/stack-problem/</id>
    <published>2022-06-24T08:44:30.000Z</published>
    <updated>2024-04-15T05:09:55.033Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子在写一个新的项目，为了提升一些速度，所以没有使用 Qt 之类的大型库，在做进程管理的时候，遇到了奇怪的崩溃问题。</p><p>因为平时很少写这样的代码，所以觉得出问题很正常，但是排查了很久，都没有找到问题所在。</p><p>在 @black-desk 大佬的帮助下，重新复习了一遍操作系统如何管理进程，找到了问题所在。</p><p>先来一份简单的例子：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">child</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">switch</span> (pid) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;[child] I&#x27;m child.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">          <span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;[child] I&#x27;m quit.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;fork() failed.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;[parent] I&#x27;m meself.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;[parent] I will wait child.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">          <span class="built_in">wait</span>(<span class="literal">nullptr</span>);</span><br><span class="line">          std::cout &lt;&lt; <span class="string">&quot;[parent] I&#x27;m quit.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">child</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来跑一下这段代码，可以看到进程的输出。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ child.cpp</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./a.out</span></span><br><span class="line">[parent] I&#x27;m meself.</span><br><span class="line">[parent] I will wait child.</span><br><span class="line">[child] I&#x27;m child.</span><br><span class="line">[child] I&#x27;m quit.</span><br><span class="line">[parent] I&#x27;m quit.</span><br></pre></td></tr></table></figure><p>上面是一个非常简单和基本的 fork() 系统调用的用法，目前为止这里是没有问题的。</p><p>除了 fork() 系统调用，还有 clone() 系统调用，他们的作用分别是：</p><p>fork 会创建一个父进程的完整副本，复制父进程所有的资源。</p><p>clone 也可以创建一个新的进程，但是它可以比 fork 更加精细的控制与子进程共享的资源，因此参数会更加复杂一些，通常我们可以用它来实现线程。</p><p>在我的需求中，我需要控制子进程运行在一个新的 proc namespace 中，所以我会选择使用 clone() 系统调用控制子进程所属的 namespace。</p><p>大概的代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_STACK 8192</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">child_run</span><span class="params">(<span class="type">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count in child: %d\n&quot;</span>, ++count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>   pid;</span><br><span class="line">    <span class="type">int</span>   status;</span><br><span class="line">    <span class="type">void</span> *child_stack = <span class="built_in">malloc</span>(CHILD_STACK);</span><br><span class="line">    <span class="keyword">if</span> (!child_stack) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;failed to allocate child stack\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count before clone: %d\n&quot;</span>, count);</span><br><span class="line">    <span class="comment">/* Simulate vfork */</span></span><br><span class="line">    pid = <span class="built_in">clone</span>(child_run, (<span class="type">void</span> *) ((<span class="type">char</span> *) child_stack + CHILD_STACK),</span><br><span class="line">                CLONE_NEWPID, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;failed to clone\n&quot;</span>);</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;clone failed: &quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">waitpid</span>(pid, &amp;status, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;count after clone: %d\n&quot;</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一份很常见的 clone() 使用方法，作为一个例子，它没毛病，直到我运行了大量的函数，它崩溃了。</p><p>gdb 跟踪了一下，崩溃在了 std 的函数调用中，看起来很奇怪，我并没有写什么特别奇怪的代码，然后我开始精简代码，用二分简单定位了一下，发现有一个函数不调用，就不会崩溃，然后我就跟进去看代码，也没发现里面有什么奇怪的，就是一些 std 的代码。</p><p>正当我发愁怎么处理这个问题的时候， @black-desk 大佬来我旁边看我在干啥，我就给他看了一下代码和问题，他也觉得奇怪，就挺有兴趣的来帮我检查了。</p><p>经过一波 debug，最后定位可能是 stack 空间不够用了，然后被操作系统干掉了，最终将 stack 调大了一些，发现可以正常运行了，这说明问题确实是这里。</p><p>然后我就去复习 linux 进程内存分配的知识了。</p><p>进程地址空间中最顶部的段是栈，大多数编程语言将之用于存储函数参数和局部变量。调用一个方法或函数会将一个新的栈帧（stack frame）压入到栈中，这个栈帧会在函数返回时被清理掉。由于栈中数据严格的遵守FIFO的顺序，这个简单的设计意味着不必使用复杂的数据结构来追踪栈中的内容，只需要一个简单的指针指向栈的顶端即可，因此压栈（pushing）和退栈（popping）过程非常迅速、准确。进程中的每一个线程都有属于自己的栈。</p><p>通过不断向栈中压入数据，超出其容量就会耗尽栈所对应的内存区域，这将触发一个页故障（page fault），而被 Linux 的 expand_stack() 处理，它会调用 acct_stack_growth() 来检查是否还有合适的地方用于栈的增长。如果栈的大小低于 RLIMIT_STACK（通常为8MB），那么一般情况下栈会被加长，程序继续执行，感觉不到发生了什么事情。这是一种将栈扩展到所需大小的常规机制。然而，如果达到了最大栈空间的大小，就会栈溢出（stack overflow），程序收到一个段错误（segmentation fault）。</p><blockquote><p><strong>动态栈增长是唯一一种访问未映射内存区域而被允许的情形，其他任何对未映射内存区域的访问都会触发页错误，从而导致段错误。一些被映射的区域是只读的，因此企图写这些区域也会导致段错误。</strong></p></blockquote><p>最终我没有再使用这套方案，所以问题也就不需要解决了，但是这个问题让我对 Linux 进程的内存布局有了更加深刻的了解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前阵子在写一个新的项目，为了提升一些速度，所以没有使用 Qt 之类的大型库，在做进程管理的时候，遇到了奇怪的崩溃问题。&lt;/p&gt;
&lt;p&gt;因为平时很少写这样的代码，所以觉得出问题很正常，但是排查了很久，都没有找到问题所在。&lt;/p&gt;
&lt;p&gt;在 @black-desk 大佬的帮助下</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.justforlxz.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="https://blog.justforlxz.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一个邪恶的想法</title>
    <link href="https://blog.justforlxz.com/2022/04/26/an-evil-idea/"/>
    <id>https://blog.justforlxz.com/2022/04/26/an-evil-idea/</id>
    <published>2022-04-26T07:39:49.000Z</published>
    <updated>2024-04-15T05:09:54.955Z</updated>
    
    <content type="html"><![CDATA[<p>哪个男孩子可以抵御服务器集群的诱惑呢？</p><p>我有几台性能偏弱的机器，并且分散在不同的地方，我就想着如何利用起来这些废旧设备。</p><p>我学习了一下 docker swarm 和 kubernetes，并半成功的使用 docker swarm 部署了一些服务，但是遇到了一些无法处理的难题，部署 php 服务时不知道为什么，只能在 manager 节点才能访问数据库，即使两个服务都在同一个节点上工作，这个问题困扰我了很久，一度以为是 docker 集群的网络不太行。</p><p>kubernetes 由于太过复杂，我目前还处于学习的状态，想要部署一些服务用作练习，但是我的机器都太垃圾了，想要使用 kubernetes 有点太困难，我就需要寻求其他人的帮助（白嫖），最终，我遇到了我的好朋友 Github。</p><p>Github 是一位非常热心的好朋友，它的家底雄厚，愿意给我一些房间，让我运行一些小的任务，但是它也规定了，每次只能使用六个小时，很多情况下我只是用它来启动一些检查或者编译任务，时间也不会很长，但是它提供的房间实在是太好了，以至于我动了歪脑筋（</p><p>一个邪恶的计划在我的脑海中逐渐成型。</p><p>首先，作为计划的第一步，我需要提供一个 VPN 服务，将所有的机器都联合进一个网络。</p><p>第二步，我需要想办法将 Github action 纳入我的管理。</p><p>第三步，自动更换房间，利用集群的自动迁移达到服务永不停的目的。</p><p>我有一台香港阿里云的轻量应用服务器，它的性能非常的弱，甚至坚持不了一个 go build，但是跑 VPN 和 kubernetes 还是足够了。</p><p>我需要写一个小的服务，提供 VPN 配置池，每个 action 启动时都会请求配置文件，从而加入集群网络。</p><p>启动的 action 会先请求 VPN 配置，加入集群网络后，初始化 kubernetes。作为 node 的 action 在启动后会加入到集群中，接受集群的管理。如果某个 action 即将过期，那么 master 会提前启动新的 node，并等待 node 被销毁，触发集群的 service 自动转移。</p><p>最终，我就拥有了一套性能非常强劲的集群，可以在上面部署各种服务。</p><p>当然，我这个邪恶的想法，也一定会伤了我好朋友的心。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哪个男孩子可以抵御服务器集群的诱惑呢？&lt;/p&gt;
&lt;p&gt;我有几台性能偏弱的机器，并且分散在不同的地方，我就想着如何利用起来这些废旧设备。&lt;/p&gt;
&lt;p&gt;我学习了一下 docker swarm 和 kubernetes，并半成功的使用 docker swarm 部署了一些服务，</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="https://blog.justforlxz.com/tags/kubernetes/"/>
    
    <category term="Github Action" scheme="https://blog.justforlxz.com/tags/Github-Action/"/>
    
    <category term="evil" scheme="https://blog.justforlxz.com/tags/evil/"/>
    
  </entry>
  
  <entry>
    <title>hello-metal.5 材质贴图</title>
    <link href="https://blog.justforlxz.com/2022/04/09/hello-metal-5/"/>
    <id>https://blog.justforlxz.com/2022/04/09/hello-metal-5/</id>
    <published>2022-04-09T03:01:52.000Z</published>
    <updated>2024-04-15T05:09:54.984Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。</p><p>目前系列有:</p><a href="/2022/04/04/hello-metal-1/" title="hello-metal.1 看到了绿色">hello-metal.1 看到了绿色</a><br><a href="/2022/04/04/hello-metal-2/" title="hello-metal.2 第一个三角形">hello-metal.2 第一个三角形</a><br><a href="/2022/04/04/hello-metal-3/" title="hello-metal.3 四边形">hello-metal.3 四边形</a><br><a href="/2022/04/04/hello-metal-4/" title="hello-metal.4 动画">hello-metal.4 动画</a><br><a href="/2022/04/09/hello-metal-5/" title="hello-metal.5 材质贴图">hello-metal.5 材质贴图</a><hr><div><p>点击查看上一篇 <a href="/2022/04/04/hello-metal-4/" title="hello-metal.4 动画">hello-metal.4 动画</a></p><p></div><p>上一篇我们成功的绘制了一个四边形，并且运行了一个简单的动画，今天我们来一起搞定材质贴图。</p><p>在前面的文章里已经介绍到了，我们通过两个三角形组合成了一个矩形，并且为每个顶点都增加偏移，以便我们在外部控制每帧绘制时坐标偏移。</p><p>在发送数据给 GPU 时，在 CPU 端准备的数据，必须设定好内存布局，然后在 shader 中接受时，也要使用相同的内存布局，否则读取就会出现问题，这也是为什么我们很多地方都在计算 offset 的原因。</p><p>这次我们拆分下数据，将原本一个 buffer 中的顶点数据，拆分为多个 buffer，一同发送给 GPU。</p><h2 id="多条-MTLBuffer"><a href="#多条-MTLBuffer" class="headerlink" title="多条 MTLBuffer"></a>多条 MTLBuffer</h2><p>在 MTLVertexDescriptor 中我们可以添加多条 attributes，需要指定一个新的 bufferIndex，因为每一条属性对应了新的 MTLBuffer。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vertexDescriptor <span class="operator">=</span> <span class="type">MTLVertexDescriptor</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// position</span></span><br><span class="line">vertexDescriptor.attributes[<span class="number">0</span>].format <span class="operator">=</span> .float3</span><br><span class="line">vertexDescriptor.attributes[<span class="number">0</span>].offset <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">vertexDescriptor.attributes[<span class="number">0</span>].bufferIndex <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// color</span></span><br><span class="line">vertexDescriptor.attributes[<span class="number">1</span>].format <span class="operator">=</span> .float4</span><br><span class="line">vertexDescriptor.attributes[<span class="number">1</span>].offset <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">vertexDescriptor.attributes[<span class="number">1</span>].bufferIndex <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">vertexDescriptor.layouts[<span class="number">0</span>].stride <span class="operator">=</span> <span class="type">MemoryLayout</span>&lt;simd_float4&gt;.stride</span><br><span class="line">vertexDescriptor.layouts[<span class="number">1</span>].stride <span class="operator">=</span> <span class="type">MemoryLayout</span>&lt;simd_float4&gt;.stride</span><br></pre></td></tr></table></figure><p>每条 attributes 设置完毕后，我们还需要指定三条布局，和之前的指令相比，相当于我们将所有数据放在一条 buffer中，现在我们拆分成并行的数据，一块发送给 GPU。</p><img src="/2022/04/09/hello-metal-5/interleaved-attributes.png" class="" title="内存布局"><p>在这张图中可以看出，内存布局是由 layout 决定的，数据是由 attributes 组成。</p><img src="/2022/04/09/hello-metal-5/noninterleaved-attributes.png" class="" title="多条缓冲区"><p>多条缓冲区是单条缓冲区的结构复制，会并行将数据都发送到 GPU。</p><img src="/2022/04/09/hello-metal-5/interleaved-noninterleaved-buffers.png" class="" title="单条和多条缓冲区对比"><p>设置好内存布局以后，我们就需要创建对应的 MTLBuffer 来保存独立的顶点数据。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> positionBuffer: <span class="type">MTLBuffer</span>?</span><br><span class="line"><span class="keyword">var</span> colorBuffer: <span class="type">MTLBuffer</span>?</span><br></pre></td></tr></table></figure><p>在我们的 buildModel 函数中将数据初始化。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">positionBuffer <span class="operator">=</span> device.makeBuffer(bytes: positionVertices,</span><br><span class="line">                                  length: positionVertices.count <span class="operator">*</span> <span class="type">MemoryLayout</span>&lt;simd_float4&gt;.size,</span><br><span class="line">                                  options: [])</span><br><span class="line">colorBuffer <span class="operator">=</span> device.makeBuffer(bytes: colorVertices,</span><br><span class="line">                                length: colorVertices.count <span class="operator">*</span> <span class="type">MemoryLayout</span>&lt;simd_float4&gt;.size,</span><br><span class="line">                                options: [])</span><br></pre></td></tr></table></figure><p>然后我们需要将顶点数据发送到 GPU，在 draw 函数中，将原本的 commandEncoder.setVertexBuffer 删除，并使用新的 MTLBuffer，而且需要注意的是，index 参数需要和 MTLVertexDescriptor 中的 index 保持一致，否则就无法正确的读取。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">commandEncoder.setVertexBuffer(positionBuffer,</span><br><span class="line">                                offset: <span class="number">0</span>,</span><br><span class="line">                                index: <span class="number">0</span>)</span><br><span class="line">commandEncoder.setVertexBuffer(colorBuffer,</span><br><span class="line">                                offset: <span class="number">0</span>,</span><br><span class="line">                                index: <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>那么数据发送到 GPU 之后，shader 要如何使用数据呢？</p><p>我们需要在 shader 中增加一个结构体，并使用一些语法标记。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct VertexIn &#123;</span><br><span class="line">    float4 position [[ attribute(0) ]];</span><br><span class="line">    float4 color [[ attribute(1) ]];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct VertexOut &#123;</span><br><span class="line">    float4 position [[ position ]];</span><br><span class="line">    float4 color;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>[[ attribute(0) ]]</code> 的意思就是为了取得对应的 attributes。</p><p>还需要修改一下顶点着色器代码，传入结构体。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vertex VertexOut vertex_shader(const VertexIn vertexIn [[ stage_in ]]) &#123;</span><br><span class="line">    VertexOut vertexOut;</span><br><span class="line">    vertexOut.position = vertexIn.position;</span><br><span class="line">    vertexOut.color = vertexIn.color;</span><br><span class="line"></span><br><span class="line">    return vertexOut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到，参数里有一个 <code>[[ stage_in ]]</code> 的标记，<code>[[ stage_in ]]</code> 可以修饰结构体，参数中只允许有一个参数使用该标记进行修饰。</p><p>由于我们的顶点是原始信息，所以只需要正常的赋值新的结构体，然后返回即可。</p><h2 id="绘制材质"><a href="#绘制材质" class="headerlink" title="绘制材质"></a>绘制材质</h2><p>材质贴图又称为纹理，纹理也有像素的称呼，但是需要区分一下，这里的像素并不是指屏幕上的物理像素。纹理使用不一样的坐标系，其原点在左上角，并且可以使用归一化将坐标系压缩至 (0.0, 1.0)，当然不强制使用归一化坐标系，但是当你想使用不同分辨率的纹理时，只要映射关系正确，就可以正常工作。</p><p>绘制材质需要先进行顶点映射，材质的坐标系与顶点的坐标系不相同，所以我们需要提供一种映射，在执行片元着色器时，获取到某个位置正确的图片颜色。</p><h3 id="坐标映射"><a href="#坐标映射" class="headerlink" title="坐标映射"></a>坐标映射</h3><p>我们在 vertexDescriptor 中增加一条新的属性，用来保存映射关系。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// texture</span></span><br><span class="line">vertexDescriptor.attributes[<span class="number">2</span>].format <span class="operator">=</span> .float2</span><br><span class="line">vertexDescriptor.attributes[<span class="number">2</span>].offset <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">vertexDescriptor.attributes[<span class="number">2</span>].bufferIndex <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">vertexDescriptor.layouts[<span class="number">2</span>].stride <span class="operator">=</span> <span class="type">MemoryLayout</span>&lt;simd_float2&gt;.stride</span><br></pre></td></tr></table></figure><p>创建新的 MTLBuffer，保存映射关系。由于我们只使用了四个顶点，两个三角形组成了矩形，所以我们只需要将四个点的坐标对应起来就可以了。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">textureBuffer <span class="operator">=</span> device.makeBuffer(bytes: textureVertices,</span><br><span class="line">                                  length: textureVertices.count <span class="operator">*</span> <span class="type">MemoryLayout</span>&lt;simd_float2&gt;.size,</span><br><span class="line">                                  options: [])</span><br></pre></td></tr></table></figure><p>在 draw 函数中，我们增加新的顶点信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commandEncoder.setVertexBuffer(textureBuffer,</span><br><span class="line">                               offset: 0,</span><br><span class="line">                               index: 2)</span><br></pre></td></tr></table></figure><p>在 shader 的结构体中增加属性的接收。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">VertexIn</span> &#123;</span><br><span class="line">    float4 position [[ attribute(<span class="number">0</span>) ]];</span><br><span class="line">    float4 color [[ attribute(<span class="number">1</span>) ]];</span><br><span class="line">    float2 textureCoordinates [[ attribute(<span class="number">2</span>) ]];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">VertexOut</span> &#123;</span><br><span class="line">    float4 position [[ position ]];</span><br><span class="line">    float4 color;</span><br><span class="line">    float2 textureCoordinates;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vertex <span class="type">VertexOut</span> vertex_shader(const <span class="type">VertexIn</span> vertexIn [[ stage_in ]]) &#123;</span><br><span class="line">    <span class="type">VertexOut</span> vertexOut;</span><br><span class="line">    vertexOut.position <span class="operator">=</span> vertexIn.position;</span><br><span class="line">    vertexOut.color <span class="operator">=</span> vertexIn.color;</span><br><span class="line">    vertexOut.textureCoordinates <span class="operator">=</span> vertexIn.textureCoordinates;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vertexOut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>好，我们现在已经成功的设置好了顶点属性，可是我们还没有讲如何读取文件呢。</p><p>首先，在 Metal 中，材质的读取是通过 MTKTextureLoader 创建一个加载器，可以使用它提供的 newTexture 方法创建一个 MTLTexture 对象。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">createTexture</span>(<span class="params">device</span>: <span class="type">MTLDevice</span>, <span class="params">imageName</span>: <span class="type">String</span>) -&gt; <span class="type">MTLTexture</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> textureLoader <span class="operator">=</span> <span class="type">MTKTextureLoader</span>(device: device)</span><br><span class="line">    <span class="keyword">var</span> texture: <span class="type">MTLTexture</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    <span class="comment">// change direction</span></span><br><span class="line">    <span class="keyword">let</span> textureLoaderOptions: [<span class="type">MTKTextureLoader</span>.<span class="type">Option</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [.origin: <span class="type">MTKTextureLoader</span>.<span class="type">Origin</span>.bottomLeft]</span><br><span class="line">    <span class="comment">//let textureLoaderOptions: [MTKTextureLoader.Option: Any] = [:]</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> textureURL <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: imageName, withExtension: <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            texture <span class="operator">=</span> <span class="keyword">try</span> textureLoader.newTexture(URL: textureURL, options: textureLoaderOptions)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;texture not created&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> texture</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我通过 MTKTextureLoader.Option 修改了坐标系的方向，将原点从左上角改为左下角（第四象限位置改为第一象限），可以不用修改，仅仅是个人喜好。</p><h3 id="设置采样"><a href="#设置采样" class="headerlink" title="设置采样"></a>设置采样</h3><p>根据一般的流程，这个时候应该会先说画出来，然后发现画面比较模糊，这时候才开始说采样需要调整。</p><p>我不按套路，我就是要先讲采样，略略略。</p><p>Metal 使用 MTLSamplerDescriptor 来控制采样，我才用最基本的线性采样。Metal 的着色器工作流程是，先执行顶点着色器，处理顶点的坐标信息，再执行光栅化，确定像素边界，裁剪超出的像素。当光栅化结束后，执行片元着色器，计算每个像素的颜色。我们在片元着色器中使用材质，为片元着色器传入材质、顶点信息和采样属性，就可以完成像素颜色的输出。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> samplerState: <span class="type">MTLSamplerState</span>?</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">buildSamplerState</span>(<span class="params">device</span>: <span class="type">MTLDevice</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> descriptor <span class="operator">=</span> <span class="type">MTLSamplerDescriptor</span>()</span><br><span class="line">    descriptor.minFilter <span class="operator">=</span> .linear</span><br><span class="line">    descriptor.magFilter <span class="operator">=</span> .linear</span><br><span class="line">    samplerState <span class="operator">=</span> device.makeSamplerState(descriptor: descriptor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造函数中执行该函数，就可以完成 MTLSamplerState 构建。</p><p>紧接着，我们为 MTLCommandEncoder 设置片元采样状态。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">commandEncoder.setFragmentSamplerState(node.samplerState, index: <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>在 shader 中修改片元着色器代码，使用上面设置好的全部信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fragment half4 fragment_shader(VertexOut vertexIn [[ stage_in ]],</span><br><span class="line">                               sampler sampler2d [[ sampler(0) ]],</span><br><span class="line">                               texture2d&lt;float&gt; texture [[ texture(0) ]])</span><br><span class="line">&#123;</span><br><span class="line">    float4 color = texture.sample(sampler2d, vertexIn.textureCoordinates);</span><br><span class="line">    return half4(color.r, color.g, color.b, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在参数中使用 <code>[[ sampler(0) ]]</code> 来获取为 MTLCoMTLCommandEncoder 设置的 samplerState 的 index，<code>[[ texture(0) ]]</code> 获取 draw 函数中传入的材质。</p><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>终于到最后了，我们好像还没说 textureVertices 应该存什么样的数据。我们现在有四个顶点，我们的矩形是两个三角形组成的，所以我们的的数据就是，四个角的点，与图片的四个角保持一致即可，我已经将材质的坐标系原点改为左下角，所以数据就是：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> textureVertices: [simd_float2] <span class="operator">=</span> [</span><br><span class="line">    simd_float2(<span class="number">0</span>, <span class="number">1</span>), <span class="comment">// 左上角</span></span><br><span class="line">    simd_float2(<span class="number">0</span>, <span class="number">0</span>), <span class="comment">// 左下角（原点）</span></span><br><span class="line">    simd_float2(<span class="number">1</span>, <span class="number">0</span>), <span class="comment">// 右下角</span></span><br><span class="line">    simd_float2(<span class="number">1</span>, <span class="number">1</span>), <span class="comment">// 右上角</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>好，我们已经完成了所有的准备工作，现在是时候加载我老婆了！</p><img src="/2022/04/09/hello-metal-5/laopo.png" class=""><img src="/2022/04/09/hello-metal-5/test.png" class=""><p>也许你注意到了，照片看起来似乎饱和度有一些不太对，这是因为我们还没有调整色彩空间，只是简单的读取了原始信息，所以我们需要做一些处理，这就留到下一篇章吧～ </p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://developer.apple.com/documentation/metal/mtlvertexdescriptor">https://developer.apple.com/documentation/metal/mtlvertexdescriptor</a><br><a href="https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf">https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf</a><br><a href="https://metalbyexample.com/vertex-descriptors/">https://metalbyexample.com/vertex-descriptors/</a><br><a href="https://metalbyexample.com/textures-and-samplers/">https://metalbyexample.com/textures-and-samplers/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。&lt;/p&gt;
&lt;p&gt;目前系列有:&lt;/p&gt;
&lt;a href=&quot;/2022/04/04/hello-metal-1/&quot; title=&quot;hello-metal.1 看到了绿色&quot;&gt;</summary>
      
    
    
    
    <category term="HelloMetal系列" scheme="https://blog.justforlxz.com/categories/HelloMetal%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Metal" scheme="https://blog.justforlxz.com/tags/Metal/"/>
    
    <category term="GameEngine" scheme="https://blog.justforlxz.com/tags/GameEngine/"/>
    
  </entry>
  
  <entry>
    <title>hello-metal.4 动画</title>
    <link href="https://blog.justforlxz.com/2022/04/04/hello-metal-4/"/>
    <id>https://blog.justforlxz.com/2022/04/04/hello-metal-4/</id>
    <published>2022-04-04T08:20:24.000Z</published>
    <updated>2024-04-15T05:09:54.984Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。</p><p>目前系列有:</p><a href="/2022/04/04/hello-metal-1/" title="hello-metal.1 看到了绿色">hello-metal.1 看到了绿色</a><br><a href="/2022/04/04/hello-metal-2/" title="hello-metal.2 第一个三角形">hello-metal.2 第一个三角形</a><br><a href="/2022/04/04/hello-metal-3/" title="hello-metal.3 四边形">hello-metal.3 四边形</a><br><a href="/2022/04/04/hello-metal-4/" title="hello-metal.4 动画">hello-metal.4 动画</a><br><a href="/2022/04/09/hello-metal-5/" title="hello-metal.5 材质贴图">hello-metal.5 材质贴图</a><hr><div><p>点击查看上一篇 <a href="/2022/04/04/hello-metal-3/" title="hello-metal.3 四边形">hello-metal.3 四边形</a></p><p></div><p>在上一篇已经完成了四边形的绘制，这一篇我们来实现一个简单的动画效果。</p><h2 id="动起来"><a href="#动起来" class="headerlink" title="动起来"></a>动起来</h2><p>现在我们需要增加一个结构体，用来保存画面的偏移，这样每次画面更新的时候，我们都可以使用偏移来控制顶点的坐标，达到动画的效果。</p><h3 id="增加存储数据的结构体"><a href="#增加存储数据的结构体" class="headerlink" title="增加存储数据的结构体"></a>增加存储数据的结构体</h3><p>在 Renderer 中增加一个结构体，用来保存动画的值，增加一个 Float 类型的变量，保存每帧时间。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> animateBy: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> constants <span class="operator">=</span> <span class="type">Constants</span>()</span><br><span class="line"><span class="keyword">var</span> time: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="计算每帧移动的距离"><a href="#计算每帧移动的距离" class="headerlink" title="计算每帧移动的距离"></a>计算每帧移动的距离</h3><p>在 draw 函数中，我们使用画面的最佳刷新率作为累加值。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">time <span class="operator">+=</span> <span class="number">1</span> <span class="operator">/</span> <span class="type">Float</span>(view.preferredFramesPerSecond)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animateBy <span class="operator">=</span> <span class="built_in">abs</span>(sin(time) <span class="operator">/</span> <span class="number">2</span> <span class="operator">+</span> <span class="number">0.5</span>)</span><br><span class="line">constants.animateBy <span class="operator">=</span> animateBy</span><br></pre></td></tr></table></figure><h3 id="发送数据到-GPU"><a href="#发送数据到-GPU" class="headerlink" title="发送数据到 GPU"></a>发送数据到 GPU</h3><p>然后我们将结构体放进 GPU 中，MTLCommandEncoder 提供了 setVertexBytes 函数来保存数据。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">commandEncoder<span class="operator">?</span>.setVertexBytes(<span class="operator">&amp;</span>constants,</span><br><span class="line">                               length: <span class="type">MemoryLayout</span>&lt;<span class="type">Constants</span>&gt;.stride,</span><br><span class="line">                               index: <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>我们为这个数据设置一个索引值 1，这样我们就可以在着色器代码中访问了。</p><h3 id="修改着色器"><a href="#修改着色器" class="headerlink" title="修改着色器"></a>修改着色器</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="type">float</span> animateBy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">vertex float4 <span class="title">vertex_shader</span><span class="params">(<span class="type">const</span> device packed_float3 *vertices [[ buffer(<span class="number">0</span>) ]],</span></span></span><br><span class="line"><span class="params"><span class="function">                            constant Constants &amp;constants [[ buffer(<span class="number">1</span>) ]],</span></span></span><br><span class="line"><span class="params"><span class="function">                            uint vertexId [[ vertex_id ]])</span> </span>&#123;</span><br><span class="line">    float4 position = <span class="built_in">float4</span>(vertices[vertexId], <span class="number">1</span>);</span><br><span class="line">    position.x += constants.animateBy;</span><br><span class="line">    <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要在着色器代码中增加一个 struct，保持相同的内存布局，然后在函数参数中使用 <code>constant</code> 修饰结构体和buffer。</p><p><code>const</code> 和 <code>constant</code> 的不同在于，<code>constant</code> 是地址空间，<code>const</code> 是类型限定符。</p><p>现在我们再跑一下，就可以看到一个动画效果了。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?bvid=BV1e34y1x7qz" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Renderer.swift</span></span><br><span class="line"><span class="comment">//  HelloMetal</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by lxz on 2022/4/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MetalKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Colors</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> wenderlichGreen <span class="operator">=</span> <span class="type">MTLClearColor</span>(red: <span class="number">0.0</span>,</span><br><span class="line">                                               green: <span class="number">0.4</span>,</span><br><span class="line">                                               blue: <span class="number">0.21</span>,</span><br><span class="line">                                               alpha: <span class="number">1.0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Renderer</span>: <span class="title class_ inherited__">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> device: <span class="type">MTLDevice</span></span><br><span class="line">    <span class="keyword">let</span> commandQueue: <span class="type">MTLCommandQueue</span></span><br><span class="line">    <span class="keyword">var</span> vertices: [<span class="type">Float</span>] <span class="operator">=</span> [</span><br><span class="line">        <span class="operator">-</span><span class="number">1</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="comment">// 左上角</span></span><br><span class="line">        <span class="operator">-</span><span class="number">1</span>, <span class="operator">-</span><span class="number">1</span>, <span class="number">0</span>, <span class="comment">// 左下角</span></span><br><span class="line">         <span class="number">1</span>, <span class="operator">-</span><span class="number">1</span>, <span class="number">0</span>, <span class="comment">// 右下角</span></span><br><span class="line">         <span class="number">1</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="comment">// 右上角</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">let</span> indices: [<span class="type">UInt16</span>] <span class="operator">=</span> [</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="comment">// 左边的三角形</span></span><br><span class="line">        <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>  <span class="comment">// 右边的三角形</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">var</span> pipelineState: <span class="type">MTLRenderPipelineState</span>?</span><br><span class="line">    <span class="keyword">var</span> vertexBuffer: <span class="type">MTLBuffer</span>?</span><br><span class="line">    <span class="keyword">var</span> indexBuffer: <span class="type">MTLBuffer</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> animateBy: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> constants <span class="operator">=</span> <span class="type">Constants</span>()</span><br><span class="line">    <span class="keyword">var</span> time: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">device</span>: <span class="type">MTLDevice</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.device <span class="operator">=</span> device</span><br><span class="line">        commandQueue <span class="operator">=</span> device.makeCommandQueue()<span class="operator">!</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        buildModel()</span><br><span class="line">        buildPipelineState()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">buildModel</span>() &#123;</span><br><span class="line">        vertexBuffer <span class="operator">=</span> device.makeBuffer(bytes: vertices,</span><br><span class="line">                                         length: vertices.count <span class="operator">*</span> <span class="type">MemoryLayout</span>&lt;<span class="type">Float</span>&gt;.size,</span><br><span class="line">                                         options: [])</span><br><span class="line">        indexBuffer <span class="operator">=</span> device.makeBuffer(bytes: indices,</span><br><span class="line">                                        length: indices.count <span class="operator">*</span> <span class="type">MemoryLayout</span>&lt;<span class="type">UInt16</span>&gt;.size,</span><br><span class="line">                                        options: [])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">buildPipelineState</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> library <span class="operator">=</span> device.makeDefaultLibrary()</span><br><span class="line">        <span class="keyword">let</span> vertexFunction <span class="operator">=</span> library<span class="operator">?</span>.makeFunction(name: <span class="string">&quot;vertex_shader&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> fragmentFunction <span class="operator">=</span> library<span class="operator">?</span>.makeFunction(name: <span class="string">&quot;fragment_shader&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> pipelineDescriptor <span class="operator">=</span> <span class="type">MTLRenderPipelineDescriptor</span>()</span><br><span class="line">        pipelineDescriptor.vertexFunction <span class="operator">=</span> vertexFunction</span><br><span class="line">        pipelineDescriptor.fragmentFunction <span class="operator">=</span> fragmentFunction</span><br><span class="line">        pipelineDescriptor.colorAttachments[<span class="number">0</span>].pixelFormat <span class="operator">=</span> .bgra8Unorm</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            pipelineState <span class="operator">=</span> <span class="keyword">try</span> device.makeRenderPipelineState(descriptor: pipelineDescriptor)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error: <span class="subst">\(error.localizedDescription)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Renderer</span>: <span class="title class_ inherited__">MTKViewDelegate</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">mtkView</span>(<span class="keyword">_</span> <span class="params">view</span>: <span class="type">MTKView</span>, <span class="params">drawableSizeWillChange</span> <span class="params">size</span>: <span class="type">CGSize</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">draw</span>(<span class="params">in</span> <span class="params">view</span>: <span class="type">MTKView</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> drawable <span class="operator">=</span> view.currentDrawable,</span><br><span class="line">              <span class="keyword">let</span> pipelineState <span class="operator">=</span> pipelineState,</span><br><span class="line">              <span class="keyword">let</span> indexBuffer <span class="operator">=</span> indexBuffer,</span><br><span class="line">              <span class="keyword">let</span> descriptor <span class="operator">=</span> view.currentRenderPassDescriptor</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        time <span class="operator">+=</span> <span class="number">1</span> <span class="operator">/</span> <span class="type">Float</span>(view.preferredFramesPerSecond)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> animateBy <span class="operator">=</span> <span class="built_in">abs</span>(sin(time) <span class="operator">/</span> <span class="number">2</span> <span class="operator">+</span> <span class="number">0.5</span>)</span><br><span class="line">        constants.animateBy <span class="operator">=</span> animateBy</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> commandBuffer <span class="operator">=</span> commandQueue.makeCommandBuffer()</span><br><span class="line">        <span class="keyword">let</span> commandEncoder <span class="operator">=</span> commandBuffer<span class="operator">?</span>.makeRenderCommandEncoder(descriptor: view.currentRenderPassDescriptor<span class="operator">!</span>)</span><br><span class="line"></span><br><span class="line">        commandEncoder<span class="operator">?</span>.setRenderPipelineState(pipelineState)</span><br><span class="line">        commandEncoder<span class="operator">?</span>.setVertexBuffer(vertexBuffer,</span><br><span class="line">                                        offset: <span class="number">0</span>,</span><br><span class="line">                                        index: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        commandEncoder<span class="operator">?</span>.setVertexBytes(<span class="operator">&amp;</span>constants,</span><br><span class="line">                                       length: <span class="type">MemoryLayout</span>&lt;<span class="type">Constants</span>&gt;.stride,</span><br><span class="line">                                       index: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        commandEncoder<span class="operator">?</span>.drawIndexedPrimitives(type: .triangle,</span><br><span class="line">                                              indexCount: indices.count,</span><br><span class="line">                                              indexType: .uint16,</span><br><span class="line">                                              indexBuffer: indexBuffer,</span><br><span class="line">                                              indexBufferOffset: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        commandEncoder<span class="operator">?</span>.endEncoding()</span><br><span class="line">        commandBuffer<span class="operator">?</span>.present(view.currentDrawable<span class="operator">!</span>)</span><br><span class="line">        commandBuffer<span class="operator">?</span>.commit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Shader.metal</span></span><br><span class="line"><span class="comment">//  HelloMetal</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by lxz on 2022/4/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;metal_stdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> metal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="type">float</span> animateBy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">vertex float4 <span class="title">vertex_shader</span><span class="params">(<span class="type">const</span> device packed_float3 *vertices [[ buffer(<span class="number">0</span>) ]],</span></span></span><br><span class="line"><span class="params"><span class="function">                            constant Constants &amp;constants [[ buffer(<span class="number">1</span>) ]],</span></span></span><br><span class="line"><span class="params"><span class="function">                            uint vertexId [[ vertex_id ]])</span> </span>&#123;</span><br><span class="line">    float4 position = <span class="built_in">float4</span>(vertices[vertexId], <span class="number">1</span>);</span><br><span class="line">    position.x += constants.animateBy;</span><br><span class="line">    <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fragment half4 <span class="title">fragment_shader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">half4</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.swift</span></span><br><span class="line"><span class="comment">//  HelloMetal</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by lxz on 2022/4/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> MetalKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_ inherited__">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> metalView: <span class="type">MTKView</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> view <span class="keyword">as!</span> <span class="type">MTKView</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> renderer: <span class="type">Renderer</span>!</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        metalView.device <span class="operator">=</span> <span class="type">MTLCreateSystemDefaultDevice</span>()</span><br><span class="line">        metalView.clearColor <span class="operator">=</span> <span class="type">Colors</span>.wenderlichGreen</span><br><span class="line">        renderer <span class="operator">=</span> <span class="type">Renderer</span>(device: metalView.device<span class="operator">!</span>)</span><br><span class="line">        metalView.delegate <span class="operator">=</span> renderer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个系列是我用来学习 Metal API 的笔记，我的最终目的是希望实现一个基于 Metal 的游戏引擎。&lt;/p&gt;
&lt;p&gt;目前系列有:&lt;/p&gt;
&lt;a href=&quot;/2022/04/04/hello-metal-1/&quot; title=&quot;hello-metal.1 看到了绿色&quot;&gt;</summary>
      
    
    
    
    <category term="HelloMetal系列" scheme="https://blog.justforlxz.com/categories/HelloMetal%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Metal" scheme="https://blog.justforlxz.com/tags/Metal/"/>
    
    <category term="GameEngine" scheme="https://blog.justforlxz.com/tags/GameEngine/"/>
    
  </entry>
  
</feed>
